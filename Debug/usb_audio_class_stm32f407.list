
usb_audio_class_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b60  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  08010ce8  08010ce8  00020ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011440  08011440  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  08011440  08011440  00021440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011448  08011448  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011448  08011448  00021448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801144c  0801144c  0002144c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  08011450  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030334  2**0
                  CONTENTS
 10 .bss          00001574  20000334  20000334  00030334  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  200018a8  200018a8  00030334  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027ce9  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000051d8  00000000  00000000  0005804d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001a38  00000000  00000000  0005d228  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000017d8  00000000  00000000  0005ec60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00028b32  00000000  00000000  00060438  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001b042  00000000  00000000  00088f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000d7d1a  00000000  00000000  000a3fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0017bcc6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000749c  00000000  00000000  0017bd44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000334 	.word	0x20000334
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08010cd0 	.word	0x08010cd0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000338 	.word	0x20000338
 80001c4:	08010cd0 	.word	0x08010cd0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b972 	b.w	8000dfc <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	4688      	mov	r8, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14b      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4615      	mov	r5, r2
 8000b42:	d967      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0720 	rsb	r7, r2, #32
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	fa20 f707 	lsr.w	r7, r0, r7
 8000b56:	4095      	lsls	r5, r2
 8000b58:	ea47 0803 	orr.w	r8, r7, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b68:	fa1f fc85 	uxth.w	ip, r5
 8000b6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b74:	fb07 f10c 	mul.w	r1, r7, ip
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b82:	f080 811b 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8118 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000b8c:	3f02      	subs	r7, #2
 8000b8e:	442b      	add	r3, r5
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	442c      	add	r4, r5
 8000bbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc0:	eba4 040c 	sub.w	r4, r4, ip
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	b11e      	cbz	r6, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xbe>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80eb 	beq.w	8000db6 <__udivmoddi4+0x286>
 8000be0:	2700      	movs	r7, #0
 8000be2:	e9c6 0100 	strd	r0, r1, [r6]
 8000be6:	4638      	mov	r0, r7
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f783 	clz	r7, r3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d147      	bne.n	8000c86 <__udivmoddi4+0x156>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd0>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2c4>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xe8>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 808f 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c22:	1b49      	subs	r1, r1, r5
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa1f f885 	uxth.w	r8, r5
 8000c2c:	2701      	movs	r7, #1
 8000c2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	f200 80cd 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x14c>
 8000c6c:	192c      	adds	r4, r5, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x14a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80b6 	bhi.w	8000de6 <__udivmoddi4+0x2b6>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e79f      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c86:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8a:	40bb      	lsls	r3, r7
 8000c8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c94:	fa01 f407 	lsl.w	r4, r1, r7
 8000c98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000caa:	0c2c      	lsrs	r4, r5, #16
 8000cac:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb0:	fa1f fa8e 	uxth.w	sl, lr
 8000cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd0:	f080 8087 	bcs.w	8000de2 <__udivmoddi4+0x2b2>
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	f240 8084 	bls.w	8000de2 <__udivmoddi4+0x2b2>
 8000cda:	f1a9 0902 	sub.w	r9, r9, #2
 8000cde:	4473      	add	r3, lr
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	b2ad      	uxth	r5, r5
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf4:	45a2      	cmp	sl, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	d26b      	bcs.n	8000dda <__udivmoddi4+0x2aa>
 8000d02:	45a2      	cmp	sl, r4
 8000d04:	d969      	bls.n	8000dda <__udivmoddi4+0x2aa>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4474      	add	r4, lr
 8000d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	eba4 040a 	sub.w	r4, r4, sl
 8000d16:	454c      	cmp	r4, r9
 8000d18:	46c2      	mov	sl, r8
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	d354      	bcc.n	8000dc8 <__udivmoddi4+0x298>
 8000d1e:	d051      	beq.n	8000dc4 <__udivmoddi4+0x294>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d069      	beq.n	8000df8 <__udivmoddi4+0x2c8>
 8000d24:	ebb1 050a 	subs.w	r5, r1, sl
 8000d28:	eb64 0403 	sbc.w	r4, r4, r3
 8000d2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	40fc      	lsrs	r4, r7
 8000d34:	ea4c 0505 	orr.w	r5, ip, r5
 8000d38:	e9c6 5400 	strd	r5, r4, [r6]
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f703 	lsr.w	r7, r0, r3
 8000d48:	4095      	lsls	r5, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d56:	4338      	orrs	r0, r7
 8000d58:	0c01      	lsrs	r1, r0, #16
 8000d5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5e:	fa1f f885 	uxth.w	r8, r5
 8000d62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb07 f308 	mul.w	r3, r7, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x256>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d7c:	d22f      	bcs.n	8000dde <__udivmoddi4+0x2ae>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d92d      	bls.n	8000dde <__udivmoddi4+0x2ae>
 8000d82:	3f02      	subs	r7, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	b281      	uxth	r1, r0
 8000d8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb00 f308 	mul.w	r3, r0, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x27e>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da4:	d217      	bcs.n	8000dd6 <__udivmoddi4+0x2a6>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d915      	bls.n	8000dd6 <__udivmoddi4+0x2a6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db4:	e73b      	b.n	8000c2e <__udivmoddi4+0xfe>
 8000db6:	4637      	mov	r7, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e709      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	e6e7      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc4:	4541      	cmp	r1, r8
 8000dc6:	d2ab      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dcc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	e7a4      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	e7e9      	b.n	8000dae <__udivmoddi4+0x27e>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	e795      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000dde:	4667      	mov	r7, ip
 8000de0:	e7d1      	b.n	8000d86 <__udivmoddi4+0x256>
 8000de2:	4681      	mov	r9, r0
 8000de4:	e77c      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	442c      	add	r4, r5
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0x14c>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	442b      	add	r3, r5
 8000df2:	e72f      	b.n	8000c54 <__udivmoddi4+0x124>
 8000df4:	4638      	mov	r0, r7
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xda>
 8000df8:	4637      	mov	r7, r6
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0xa0>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <HAL_ADC_ConvCpltCallback>:
				ITM_SendChar(*ptr++);
			}
				return len;
		}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

	end_conv_adc = 1;
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <HAL_ADC_ConvCpltCallback+0x1c>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]



}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000412 	.word	0x20000412

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e26:	f000 fcf9 	bl	800181c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2a:	f000 f89d 	bl	8000f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2e:	f000 f9f5 	bl	800121c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e32:	f000 f9c3 	bl	80011bc <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000e36:	f00d fcc9 	bl	800e7cc <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000e3a:	f000 f971 	bl	8001120 <MX_TIM3_Init>
  MX_SDIO_SD_Init();
 8000e3e:	f000 f94f 	bl	80010e0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000e42:	f007 fbf9 	bl	8008638 <MX_FATFS_Init>
  MX_ADC1_Init();
 8000e46:	f000 f8f9 	bl	800103c <MX_ADC1_Init>
//  HAL_TIM_Base_Start(&htim8);
 // HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 1);
//  HAL_ADC_Start_IT(&hadc1);
 // HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_buffer, 20);

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_buffer, AUDIO_IN_PACKET/2);
 8000e4a:	2230      	movs	r2, #48	; 0x30
 8000e4c:	4938      	ldr	r1, [pc, #224]	; (8000f30 <main+0x110>)
 8000e4e:	4839      	ldr	r0, [pc, #228]	; (8000f34 <main+0x114>)
 8000e50:	f000 fdbc 	bl	80019cc <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000e54:	4838      	ldr	r0, [pc, #224]	; (8000f38 <main+0x118>)
 8000e56:	f005 f8d4 	bl	8006002 <HAL_TIM_Base_Start>

  for(uint8_t i=0;i<AUDIO_IN_PACKET/2;i++){
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	71fb      	strb	r3, [r7, #7]
 8000e5e:	e00e      	b.n	8000e7e <main+0x5e>
	  testBuffer2[i]=12*i;
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	461a      	mov	r2, r3
 8000e66:	0052      	lsls	r2, r2, #1
 8000e68:	4413      	add	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	b211      	sxth	r1, r2
 8000e72:	4a32      	ldr	r2, [pc, #200]	; (8000f3c <main+0x11c>)
 8000e74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint8_t i=0;i<AUDIO_IN_PACKET/2;i++){
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	71fb      	strb	r3, [r7, #7]
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	2b2f      	cmp	r3, #47	; 0x2f
 8000e82:	d9ed      	bls.n	8000e60 <main+0x40>
  }

  if (f_mount(&fileSystem, SDPath, 0) != FR_OK) {
 8000e84:	2200      	movs	r2, #0
 8000e86:	492e      	ldr	r1, [pc, #184]	; (8000f40 <main+0x120>)
 8000e88:	482e      	ldr	r0, [pc, #184]	; (8000f44 <main+0x124>)
 8000e8a:	f00c fc9b 	bl	800d7c4 <f_mount>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <main+0x7a>
		Error_Handler();
 8000e94:	f000 fa2e 	bl	80012f4 <Error_Handler>
 8000e98:	e044      	b.n	8000f24 <main+0x104>
	}
  else{
	if (f_open(&testFile, "ERMAK.TXT", FA_CREATE_ALWAYS | FA_WRITE)
 8000e9a:	220a      	movs	r2, #10
 8000e9c:	492a      	ldr	r1, [pc, #168]	; (8000f48 <main+0x128>)
 8000e9e:	482b      	ldr	r0, [pc, #172]	; (8000f4c <main+0x12c>)
 8000ea0:	f00c fcd6 	bl	800d850 <f_open>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d002      	beq.n	8000eb0 <main+0x90>
			!= FR_OK) {
		/* 'STM32.TXT' file Open for write Error */
		Error_Handler();
 8000eaa:	f000 fa23 	bl	80012f4 <Error_Handler>
 8000eae:	e002      	b.n	8000eb6 <main+0x96>
	}
	else {
		flag_open = 1;
 8000eb0:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <main+0x130>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (flag_open == 1 && end_conv_adc==1) {
 8000eb6:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <main+0x130>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d1fb      	bne.n	8000eb6 <main+0x96>
 8000ebe:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <main+0x134>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d1f7      	bne.n	8000eb6 <main+0x96>
	 		for (uint8_t i = 0; i < AUDIO_IN_PACKET / 2; i++) {
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	71bb      	strb	r3, [r7, #6]
 8000eca:	e010      	b.n	8000eee <main+0xce>
	 			f_printf(&testFile, "%d",adc_buffer[i]);
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	4a18      	ldr	r2, [pc, #96]	; (8000f30 <main+0x110>)
 8000ed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4920      	ldr	r1, [pc, #128]	; (8000f58 <main+0x138>)
 8000ed8:	481c      	ldr	r0, [pc, #112]	; (8000f4c <main+0x12c>)
 8000eda:	f00d f91d 	bl	800e118 <f_printf>
	 			f_printf(&testFile, "%c", '\n');
 8000ede:	220a      	movs	r2, #10
 8000ee0:	491e      	ldr	r1, [pc, #120]	; (8000f5c <main+0x13c>)
 8000ee2:	481a      	ldr	r0, [pc, #104]	; (8000f4c <main+0x12c>)
 8000ee4:	f00d f918 	bl	800e118 <f_printf>
	 		for (uint8_t i = 0; i < AUDIO_IN_PACKET / 2; i++) {
 8000ee8:	79bb      	ldrb	r3, [r7, #6]
 8000eea:	3301      	adds	r3, #1
 8000eec:	71bb      	strb	r3, [r7, #6]
 8000eee:	79bb      	ldrb	r3, [r7, #6]
 8000ef0:	2b2f      	cmp	r3, #47	; 0x2f
 8000ef2:	d9eb      	bls.n	8000ecc <main+0xac>
	 		}

	 		if (flag == 10) {
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <main+0x140>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b0a      	cmp	r3, #10
 8000efa:	d109      	bne.n	8000f10 <main+0xf0>
	 			res = f_close(&testFile);
 8000efc:	4813      	ldr	r0, [pc, #76]	; (8000f4c <main+0x12c>)
 8000efe:	f00d f868 	bl	800dfd2 <f_close>
 8000f02:	4603      	mov	r3, r0
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <main+0x144>)
 8000f08:	701a      	strb	r2, [r3, #0]
	 			flag_open = 0;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <main+0x130>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
	 		}

	 		flag++;
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <main+0x140>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <main+0x140>)
 8000f1a:	701a      	strb	r2, [r3, #0]
	 		end_conv_adc = 0;
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <main+0x134>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
	  if (flag_open == 1 && end_conv_adc==1) {
 8000f22:	e7c8      	b.n	8000eb6 <main+0x96>
 8000f24:	2300      	movs	r3, #0


  }
  }
  /* USER CODE END 3 */
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000350 	.word	0x20000350
 8000f34:	20000790 	.word	0x20000790
 8000f38:	20000750 	.word	0x20000750
 8000f3c:	20000414 	.word	0x20000414
 8000f40:	20000b64 	.word	0x20000b64
 8000f44:	20000924 	.word	0x20000924
 8000f48:	08010ce8 	.word	0x08010ce8
 8000f4c:	20000520 	.word	0x20000520
 8000f50:	20000411 	.word	0x20000411
 8000f54:	20000412 	.word	0x20000412
 8000f58:	08010cf4 	.word	0x08010cf4
 8000f5c:	08010cf8 	.word	0x08010cf8
 8000f60:	20000410 	.word	0x20000410
 8000f64:	20000b58 	.word	0x20000b58

08000f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b094      	sub	sp, #80	; 0x50
 8000f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6e:	f107 0320 	add.w	r3, r7, #32
 8000f72:	2230      	movs	r2, #48	; 0x30
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f00e f936 	bl	800f1e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	4b28      	ldr	r3, [pc, #160]	; (8001034 <SystemClock_Config+0xcc>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	4a27      	ldr	r2, [pc, #156]	; (8001034 <SystemClock_Config+0xcc>)
 8000f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9c:	4b25      	ldr	r3, [pc, #148]	; (8001034 <SystemClock_Config+0xcc>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	4b22      	ldr	r3, [pc, #136]	; (8001038 <SystemClock_Config+0xd0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a21      	ldr	r2, [pc, #132]	; (8001038 <SystemClock_Config+0xd0>)
 8000fb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <SystemClock_Config+0xd0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fdc:	23a8      	movs	r3, #168	; 0xa8
 8000fde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe8:	f107 0320 	add.w	r3, r7, #32
 8000fec:	4618      	mov	r0, r3
 8000fee:	f003 f8a5 	bl	800413c <HAL_RCC_OscConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ff8:	f000 f97c 	bl	80012f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001000:	2302      	movs	r3, #2
 8001002:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001008:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800100c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800100e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001012:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2105      	movs	r1, #5
 800101a:	4618      	mov	r0, r3
 800101c:	f003 fafe 	bl	800461c <HAL_RCC_ClockConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001026:	f000 f965 	bl	80012f4 <Error_Handler>
  }
}
 800102a:	bf00      	nop
 800102c:	3750      	adds	r7, #80	; 0x50
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800
 8001038:	40007000 	.word	0x40007000

0800103c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001042:	463b      	mov	r3, r7
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800104e:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <MX_ADC1_Init+0x9c>)
 8001050:	4a22      	ldr	r2, [pc, #136]	; (80010dc <MX_ADC1_Init+0xa0>)
 8001052:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001054:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <MX_ADC1_Init+0x9c>)
 8001056:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800105a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800105c:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_ADC1_Init+0x9c>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001062:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <MX_ADC1_Init+0x9c>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <MX_ADC1_Init+0x9c>)
 800106a:	2200      	movs	r2, #0
 800106c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_ADC1_Init+0x9c>)
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_ADC1_Init+0x9c>)
 8001078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800107c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_ADC1_Init+0x9c>)
 8001080:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_ADC1_Init+0x9c>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_ADC1_Init+0x9c>)
 800108e:	2201      	movs	r2, #1
 8001090:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_ADC1_Init+0x9c>)
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_ADC1_Init+0x9c>)
 800109c:	2201      	movs	r2, #1
 800109e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a0:	480d      	ldr	r0, [pc, #52]	; (80010d8 <MX_ADC1_Init+0x9c>)
 80010a2:	f000 fc4f 	bl	8001944 <HAL_ADC_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80010ac:	f000 f922 	bl	80012f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010b4:	2301      	movs	r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80010b8:	2302      	movs	r3, #2
 80010ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010bc:	463b      	mov	r3, r7
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_ADC1_Init+0x9c>)
 80010c2:	f000 fd89 	bl	8001bd8 <HAL_ADC_ConfigChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80010cc:	f000 f912 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000790 	.word	0x20000790
 80010dc:	40012000 	.word	0x40012000

080010e0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_SDIO_SD_Init+0x38>)
 80010e6:	4a0d      	ldr	r2, [pc, #52]	; (800111c <MX_SDIO_SD_Init+0x3c>)
 80010e8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <MX_SDIO_SD_Init+0x38>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_SDIO_SD_Init+0x38>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <MX_SDIO_SD_Init+0x38>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_SDIO_SD_Init+0x38>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <MX_SDIO_SD_Init+0x38>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <MX_SDIO_SD_Init+0x38>)
 800110a:	2203      	movs	r2, #3
 800110c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	2000089c 	.word	0x2000089c
 800111c:	40012c00 	.word	0x40012c00

08001120 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001134:	463b      	mov	r3, r7
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <MX_TIM3_Init+0x94>)
 800113e:	4a1e      	ldr	r2, [pc, #120]	; (80011b8 <MX_TIM3_Init+0x98>)
 8001140:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <MX_TIM3_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <MX_TIM3_Init+0x94>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <MX_TIM3_Init+0x94>)
 8001150:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001154:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001156:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <MX_TIM3_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_TIM3_Init+0x94>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001162:	4814      	ldr	r0, [pc, #80]	; (80011b4 <MX_TIM3_Init+0x94>)
 8001164:	f004 ff22 	bl	8005fac <HAL_TIM_Base_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800116e:	f000 f8c1 	bl	80012f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001176:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	4619      	mov	r1, r3
 800117e:	480d      	ldr	r0, [pc, #52]	; (80011b4 <MX_TIM3_Init+0x94>)
 8001180:	f004 ff63 	bl	800604a <HAL_TIM_ConfigClockSource>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800118a:	f000 f8b3 	bl	80012f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800118e:	2320      	movs	r3, #32
 8001190:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001196:	463b      	mov	r3, r7
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <MX_TIM3_Init+0x94>)
 800119c:	f005 f946 	bl	800642c <HAL_TIMEx_MasterConfigSynchronization>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80011a6:	f000 f8a5 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000750 	.word	0x20000750
 80011b8:	40000400 	.word	0x40000400

080011bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_DMA_Init+0x5c>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a13      	ldr	r2, [pc, #76]	; (8001218 <MX_DMA_Init+0x5c>)
 80011cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_DMA_Init+0x5c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2038      	movs	r0, #56	; 0x38
 80011e4:	f001 f873 	bl	80022ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011e8:	2038      	movs	r0, #56	; 0x38
 80011ea:	f001 f88c 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2106      	movs	r1, #6
 80011f2:	203b      	movs	r0, #59	; 0x3b
 80011f4:	f001 f86b 	bl	80022ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80011f8:	203b      	movs	r0, #59	; 0x3b
 80011fa:	f001 f884 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2106      	movs	r1, #6
 8001202:	2045      	movs	r0, #69	; 0x45
 8001204:	f001 f863 	bl	80022ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001208:	2045      	movs	r0, #69	; 0x45
 800120a:	f001 f87c 	bl	8002306 <HAL_NVIC_EnableIRQ>

}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <MX_GPIO_Init+0xcc>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a2b      	ldr	r2, [pc, #172]	; (80012e8 <MX_GPIO_Init+0xcc>)
 800123c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <MX_GPIO_Init+0xcc>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <MX_GPIO_Init+0xcc>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a24      	ldr	r2, [pc, #144]	; (80012e8 <MX_GPIO_Init+0xcc>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <MX_GPIO_Init+0xcc>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_GPIO_Init+0xcc>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a1d      	ldr	r2, [pc, #116]	; (80012e8 <MX_GPIO_Init+0xcc>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_GPIO_Init+0xcc>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <MX_GPIO_Init+0xcc>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a16      	ldr	r2, [pc, #88]	; (80012e8 <MX_GPIO_Init+0xcc>)
 8001290:	f043 0308 	orr.w	r3, r3, #8
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_GPIO_Init+0xcc>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2130      	movs	r1, #48	; 0x30
 80012a6:	4811      	ldr	r0, [pc, #68]	; (80012ec <MX_GPIO_Init+0xd0>)
 80012a8:	f001 fd7e 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012ac:	2330      	movs	r3, #48	; 0x30
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	480a      	ldr	r0, [pc, #40]	; (80012ec <MX_GPIO_Init+0xd0>)
 80012c4:	f001 fbd6 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012c8:	2340      	movs	r3, #64	; 0x40
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_GPIO_Init+0xd4>)
 80012dc:	f001 fbca 	bl	8002a74 <HAL_GPIO_Init>

}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	; 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40020800 	.word	0x40020800

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <HAL_MspInit+0x4c>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <HAL_MspInit+0x4c>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <HAL_MspInit+0x4c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_MspInit+0x4c>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	4a08      	ldr	r2, [pc, #32]	; (8001350 <HAL_MspInit+0x4c>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001334:	6413      	str	r3, [r2, #64]	; 0x40
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_MspInit+0x4c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800

08001354 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a2f      	ldr	r2, [pc, #188]	; (8001430 <HAL_ADC_MspInit+0xdc>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d157      	bne.n	8001426 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b2e      	ldr	r3, [pc, #184]	; (8001434 <HAL_ADC_MspInit+0xe0>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	4a2d      	ldr	r2, [pc, #180]	; (8001434 <HAL_ADC_MspInit+0xe0>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001384:	6453      	str	r3, [r2, #68]	; 0x44
 8001386:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <HAL_ADC_MspInit+0xe0>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b27      	ldr	r3, [pc, #156]	; (8001434 <HAL_ADC_MspInit+0xe0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a26      	ldr	r2, [pc, #152]	; (8001434 <HAL_ADC_MspInit+0xe0>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b24      	ldr	r3, [pc, #144]	; (8001434 <HAL_ADC_MspInit+0xe0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013ae:	2301      	movs	r3, #1
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b2:	2303      	movs	r3, #3
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	481d      	ldr	r0, [pc, #116]	; (8001438 <HAL_ADC_MspInit+0xe4>)
 80013c2:	f001 fb57 	bl	8002a74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80013c6:	4b1d      	ldr	r3, [pc, #116]	; (800143c <HAL_ADC_MspInit+0xe8>)
 80013c8:	4a1d      	ldr	r2, [pc, #116]	; (8001440 <HAL_ADC_MspInit+0xec>)
 80013ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <HAL_ADC_MspInit+0xe8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013d2:	4b1a      	ldr	r3, [pc, #104]	; (800143c <HAL_ADC_MspInit+0xe8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <HAL_ADC_MspInit+0xe8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013de:	4b17      	ldr	r3, [pc, #92]	; (800143c <HAL_ADC_MspInit+0xe8>)
 80013e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_ADC_MspInit+0xe8>)
 80013e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <HAL_ADC_MspInit+0xe8>)
 80013f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_ADC_MspInit+0xe8>)
 80013f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_ADC_MspInit+0xe8>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001404:	4b0d      	ldr	r3, [pc, #52]	; (800143c <HAL_ADC_MspInit+0xe8>)
 8001406:	2200      	movs	r2, #0
 8001408:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800140a:	480c      	ldr	r0, [pc, #48]	; (800143c <HAL_ADC_MspInit+0xe8>)
 800140c:	f000 ff96 	bl	800233c <HAL_DMA_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001416:	f7ff ff6d 	bl	80012f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a07      	ldr	r2, [pc, #28]	; (800143c <HAL_ADC_MspInit+0xe8>)
 800141e:	639a      	str	r2, [r3, #56]	; 0x38
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <HAL_ADC_MspInit+0xe8>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	; 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40012000 	.word	0x40012000
 8001434:	40023800 	.word	0x40023800
 8001438:	40020000 	.word	0x40020000
 800143c:	200007dc 	.word	0x200007dc
 8001440:	40026410 	.word	0x40026410

08001444 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a6f      	ldr	r2, [pc, #444]	; (8001620 <HAL_SD_MspInit+0x1dc>)
 8001462:	4293      	cmp	r3, r2
 8001464:	f040 80d8 	bne.w	8001618 <HAL_SD_MspInit+0x1d4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	4b6d      	ldr	r3, [pc, #436]	; (8001624 <HAL_SD_MspInit+0x1e0>)
 800146e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001470:	4a6c      	ldr	r2, [pc, #432]	; (8001624 <HAL_SD_MspInit+0x1e0>)
 8001472:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001476:	6453      	str	r3, [r2, #68]	; 0x44
 8001478:	4b6a      	ldr	r3, [pc, #424]	; (8001624 <HAL_SD_MspInit+0x1e0>)
 800147a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	4b66      	ldr	r3, [pc, #408]	; (8001624 <HAL_SD_MspInit+0x1e0>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	4a65      	ldr	r2, [pc, #404]	; (8001624 <HAL_SD_MspInit+0x1e0>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	6313      	str	r3, [r2, #48]	; 0x30
 8001494:	4b63      	ldr	r3, [pc, #396]	; (8001624 <HAL_SD_MspInit+0x1e0>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	4b5f      	ldr	r3, [pc, #380]	; (8001624 <HAL_SD_MspInit+0x1e0>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	4a5e      	ldr	r2, [pc, #376]	; (8001624 <HAL_SD_MspInit+0x1e0>)
 80014aa:	f043 0308 	orr.w	r3, r3, #8
 80014ae:	6313      	str	r3, [r2, #48]	; 0x30
 80014b0:	4b5c      	ldr	r3, [pc, #368]	; (8001624 <HAL_SD_MspInit+0x1e0>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80014bc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80014c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80014ce:	230c      	movs	r3, #12
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	4853      	ldr	r0, [pc, #332]	; (8001628 <HAL_SD_MspInit+0x1e4>)
 80014da:	f001 facb 	bl	8002a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80014f0:	230c      	movs	r3, #12
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	484b      	ldr	r0, [pc, #300]	; (8001628 <HAL_SD_MspInit+0x1e4>)
 80014fc:	f001 faba 	bl	8002a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001500:	2304      	movs	r3, #4
 8001502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001508:	2301      	movs	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001510:	230c      	movs	r3, #12
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	4844      	ldr	r0, [pc, #272]	; (800162c <HAL_SD_MspInit+0x1e8>)
 800151c:	f001 faaa 	bl	8002a74 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001520:	4b43      	ldr	r3, [pc, #268]	; (8001630 <HAL_SD_MspInit+0x1ec>)
 8001522:	4a44      	ldr	r2, [pc, #272]	; (8001634 <HAL_SD_MspInit+0x1f0>)
 8001524:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001526:	4b42      	ldr	r3, [pc, #264]	; (8001630 <HAL_SD_MspInit+0x1ec>)
 8001528:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800152c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800152e:	4b40      	ldr	r3, [pc, #256]	; (8001630 <HAL_SD_MspInit+0x1ec>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001534:	4b3e      	ldr	r3, [pc, #248]	; (8001630 <HAL_SD_MspInit+0x1ec>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800153a:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <HAL_SD_MspInit+0x1ec>)
 800153c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001540:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001542:	4b3b      	ldr	r3, [pc, #236]	; (8001630 <HAL_SD_MspInit+0x1ec>)
 8001544:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001548:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800154a:	4b39      	ldr	r3, [pc, #228]	; (8001630 <HAL_SD_MspInit+0x1ec>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001550:	4b37      	ldr	r3, [pc, #220]	; (8001630 <HAL_SD_MspInit+0x1ec>)
 8001552:	2220      	movs	r2, #32
 8001554:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001556:	4b36      	ldr	r3, [pc, #216]	; (8001630 <HAL_SD_MspInit+0x1ec>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800155c:	4b34      	ldr	r3, [pc, #208]	; (8001630 <HAL_SD_MspInit+0x1ec>)
 800155e:	2204      	movs	r2, #4
 8001560:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001562:	4b33      	ldr	r3, [pc, #204]	; (8001630 <HAL_SD_MspInit+0x1ec>)
 8001564:	2203      	movs	r2, #3
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001568:	4b31      	ldr	r3, [pc, #196]	; (8001630 <HAL_SD_MspInit+0x1ec>)
 800156a:	2200      	movs	r2, #0
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800156e:	4b30      	ldr	r3, [pc, #192]	; (8001630 <HAL_SD_MspInit+0x1ec>)
 8001570:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001574:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001576:	482e      	ldr	r0, [pc, #184]	; (8001630 <HAL_SD_MspInit+0x1ec>)
 8001578:	f000 fee0 	bl	800233c <HAL_DMA_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_SD_MspInit+0x142>
    {
      Error_Handler();
 8001582:	f7ff feb7 	bl	80012f4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a29      	ldr	r2, [pc, #164]	; (8001630 <HAL_SD_MspInit+0x1ec>)
 800158a:	641a      	str	r2, [r3, #64]	; 0x40
 800158c:	4a28      	ldr	r2, [pc, #160]	; (8001630 <HAL_SD_MspInit+0x1ec>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001592:	4b29      	ldr	r3, [pc, #164]	; (8001638 <HAL_SD_MspInit+0x1f4>)
 8001594:	4a29      	ldr	r2, [pc, #164]	; (800163c <HAL_SD_MspInit+0x1f8>)
 8001596:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <HAL_SD_MspInit+0x1f4>)
 800159a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800159e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015a0:	4b25      	ldr	r3, [pc, #148]	; (8001638 <HAL_SD_MspInit+0x1f4>)
 80015a2:	2240      	movs	r2, #64	; 0x40
 80015a4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a6:	4b24      	ldr	r3, [pc, #144]	; (8001638 <HAL_SD_MspInit+0x1f4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015ac:	4b22      	ldr	r3, [pc, #136]	; (8001638 <HAL_SD_MspInit+0x1f4>)
 80015ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015b4:	4b20      	ldr	r3, [pc, #128]	; (8001638 <HAL_SD_MspInit+0x1f4>)
 80015b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015ba:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <HAL_SD_MspInit+0x1f4>)
 80015be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015c2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80015c4:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <HAL_SD_MspInit+0x1f4>)
 80015c6:	2220      	movs	r2, #32
 80015c8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015ca:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <HAL_SD_MspInit+0x1f4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <HAL_SD_MspInit+0x1f4>)
 80015d2:	2204      	movs	r2, #4
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <HAL_SD_MspInit+0x1f4>)
 80015d8:	2203      	movs	r2, #3
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <HAL_SD_MspInit+0x1f4>)
 80015de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <HAL_SD_MspInit+0x1f4>)
 80015e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80015ea:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80015ec:	4812      	ldr	r0, [pc, #72]	; (8001638 <HAL_SD_MspInit+0x1f4>)
 80015ee:	f000 fea5 	bl	800233c <HAL_DMA_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_SD_MspInit+0x1b8>
    {
      Error_Handler();
 80015f8:	f7ff fe7c 	bl	80012f4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <HAL_SD_MspInit+0x1f4>)
 8001600:	63da      	str	r2, [r3, #60]	; 0x3c
 8001602:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <HAL_SD_MspInit+0x1f4>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001608:	2200      	movs	r2, #0
 800160a:	2105      	movs	r1, #5
 800160c:	2031      	movs	r0, #49	; 0x31
 800160e:	f000 fe5e 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001612:	2031      	movs	r0, #49	; 0x31
 8001614:	f000 fe77 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	; 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40012c00 	.word	0x40012c00
 8001624:	40023800 	.word	0x40023800
 8001628:	40020800 	.word	0x40020800
 800162c:	40020c00 	.word	0x40020c00
 8001630:	200004c0 	.word	0x200004c0
 8001634:	40026458 	.word	0x40026458
 8001638:	2000083c 	.word	0x2000083c
 800163c:	400264a0 	.word	0x400264a0

08001640 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0b      	ldr	r2, [pc, #44]	; (800167c <HAL_TIM_Base_MspInit+0x3c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d10d      	bne.n	800166e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_TIM_Base_MspInit+0x40>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a09      	ldr	r2, [pc, #36]	; (8001680 <HAL_TIM_Base_MspInit+0x40>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <HAL_TIM_Base_MspInit+0x40>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40000400 	.word	0x40000400
 8001680:	40023800 	.word	0x40023800

08001684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <HardFault_Handler+0x4>

08001698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <MemManage_Handler+0x4>

0800169e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <BusFault_Handler+0x4>

080016a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <UsageFault_Handler+0x4>

080016aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d8:	f000 f8f2 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}

080016e0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <SDIO_IRQHandler+0x10>)
 80016e6:	f003 fbcd 	bl	8004e84 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000089c 	.word	0x2000089c

080016f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <DMA2_Stream0_IRQHandler+0x10>)
 80016fa:	f000 ff47 	bl	800258c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200007dc 	.word	0x200007dc

08001708 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <DMA2_Stream3_IRQHandler+0x10>)
 800170e:	f000 ff3d 	bl	800258c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200004c0 	.word	0x200004c0

0800171c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <OTG_FS_IRQHandler+0x10>)
 8001722:	f001 fcaa 	bl	800307a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000149c 	.word	0x2000149c

08001730 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <DMA2_Stream6_IRQHandler+0x10>)
 8001736:	f000 ff29 	bl	800258c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000083c 	.word	0x2000083c

08001744 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <_sbrk+0x50>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <_sbrk+0x16>
		heap_end = &end;
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <_sbrk+0x50>)
 8001756:	4a10      	ldr	r2, [pc, #64]	; (8001798 <_sbrk+0x54>)
 8001758:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <_sbrk+0x50>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <_sbrk+0x50>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4413      	add	r3, r2
 8001768:	466a      	mov	r2, sp
 800176a:	4293      	cmp	r3, r2
 800176c:	d907      	bls.n	800177e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800176e:	f00d fd01 	bl	800f174 <__errno>
 8001772:	4602      	mov	r2, r0
 8001774:	230c      	movs	r3, #12
 8001776:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
 800177c:	e006      	b.n	800178c <_sbrk+0x48>
	}

	heap_end += incr;
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <_sbrk+0x50>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	4a03      	ldr	r2, [pc, #12]	; (8001794 <_sbrk+0x50>)
 8001788:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000474 	.word	0x20000474
 8001798:	200018a8 	.word	0x200018a8

0800179c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <SystemInit+0x28>)
 80017a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a6:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <SystemInit+0x28>)
 80017a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <SystemInit+0x28>)
 80017b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017b6:	609a      	str	r2, [r3, #8]
#endif
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001800 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017ce:	e003      	b.n	80017d8 <LoopCopyDataInit>

080017d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017d6:	3104      	adds	r1, #4

080017d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017d8:	480b      	ldr	r0, [pc, #44]	; (8001808 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017e0:	d3f6      	bcc.n	80017d0 <CopyDataInit>
  ldr  r2, =_sbss
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017e4:	e002      	b.n	80017ec <LoopFillZerobss>

080017e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017e8:	f842 3b04 	str.w	r3, [r2], #4

080017ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017f0:	d3f9      	bcc.n	80017e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017f2:	f7ff ffd3 	bl	800179c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017f6:	f00d fcc3 	bl	800f180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fa:	f7ff fb11 	bl	8000e20 <main>
  bx  lr    
 80017fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001800:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001804:	08011450 	.word	0x08011450
  ldr  r0, =_sdata
 8001808:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800180c:	20000334 	.word	0x20000334
  ldr  r2, =_sbss
 8001810:	20000334 	.word	0x20000334
  ldr  r3, = _ebss
 8001814:	200018a8 	.word	0x200018a8

08001818 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC_IRQHandler>
	...

0800181c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0d      	ldr	r2, [pc, #52]	; (800185c <HAL_Init+0x40>)
 8001826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0a      	ldr	r2, [pc, #40]	; (800185c <HAL_Init+0x40>)
 8001832:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001836:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_Init+0x40>)
 800183e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001842:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 fd37 	bl	80022b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184a:	2000      	movs	r0, #0
 800184c:	f000 f808 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001850:	f7ff fd58 	bl	8001304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023c00 	.word	0x40023c00

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x54>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x58>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 fd4f 	bl	8002322 <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00e      	b.n	80018ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d80a      	bhi.n	80018aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f000 fd17 	bl	80022ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_InitTick+0x5c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000008 	.word	0x20000008
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x20>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_IncTick+0x24>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <HAL_IncTick+0x24>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000008 	.word	0x20000008
 80018e4:	20000b5c 	.word	0x20000b5c

080018e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return uwTick;
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_GetTick+0x14>)
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000b5c 	.word	0x20000b5c

08001900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff ffee 	bl	80018e8 <HAL_GetTick>
 800190c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001918:	d005      	beq.n	8001926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_Delay+0x40>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001926:	bf00      	nop
 8001928:	f7ff ffde 	bl	80018e8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	429a      	cmp	r2, r3
 8001936:	d8f7      	bhi.n	8001928 <HAL_Delay+0x28>
  {
  }
}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000008 	.word	0x20000008

08001944 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e033      	b.n	80019c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff fcf6 	bl	8001354 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	2b00      	cmp	r3, #0
 8001980:	d118      	bne.n	80019b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800198a:	f023 0302 	bic.w	r3, r3, #2
 800198e:	f043 0202 	orr.w	r2, r3, #2
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 fa40 	bl	8001e1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f023 0303 	bic.w	r3, r3, #3
 80019aa:	f043 0201 	orr.w	r2, r3, #1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40
 80019b2:	e001      	b.n	80019b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_Start_DMA+0x1e>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e0cc      	b.n	8001b84 <HAL_ADC_Start_DMA+0x1b8>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d018      	beq.n	8001a32 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a10:	4b5e      	ldr	r3, [pc, #376]	; (8001b8c <HAL_ADC_Start_DMA+0x1c0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a5e      	ldr	r2, [pc, #376]	; (8001b90 <HAL_ADC_Start_DMA+0x1c4>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0c9a      	lsrs	r2, r3, #18
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a24:	e002      	b.n	8001a2c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f9      	bne.n	8001a26 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	f040 80a0 	bne.w	8001b82 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d007      	beq.n	8001a74 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a6c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a80:	d106      	bne.n	8001a90 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	f023 0206 	bic.w	r2, r3, #6
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	645a      	str	r2, [r3, #68]	; 0x44
 8001a8e:	e002      	b.n	8001a96 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a9e:	4b3d      	ldr	r3, [pc, #244]	; (8001b94 <HAL_ADC_Start_DMA+0x1c8>)
 8001aa0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa6:	4a3c      	ldr	r2, [pc, #240]	; (8001b98 <HAL_ADC_Start_DMA+0x1cc>)
 8001aa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aae:	4a3b      	ldr	r2, [pc, #236]	; (8001b9c <HAL_ADC_Start_DMA+0x1d0>)
 8001ab0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab6:	4a3a      	ldr	r2, [pc, #232]	; (8001ba0 <HAL_ADC_Start_DMA+0x1d4>)
 8001ab8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ac2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ad2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ae2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	334c      	adds	r3, #76	; 0x4c
 8001aee:	4619      	mov	r1, r3
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f000 fcd0 	bl	8002498 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d12a      	bne.n	8001b5a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a26      	ldr	r2, [pc, #152]	; (8001ba4 <HAL_ADC_Start_DMA+0x1d8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d015      	beq.n	8001b3a <HAL_ADC_Start_DMA+0x16e>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a25      	ldr	r2, [pc, #148]	; (8001ba8 <HAL_ADC_Start_DMA+0x1dc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d105      	bne.n	8001b24 <HAL_ADC_Start_DMA+0x158>
 8001b18:	4b1e      	ldr	r3, [pc, #120]	; (8001b94 <HAL_ADC_Start_DMA+0x1c8>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00a      	beq.n	8001b3a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a20      	ldr	r2, [pc, #128]	; (8001bac <HAL_ADC_Start_DMA+0x1e0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d129      	bne.n	8001b82 <HAL_ADC_Start_DMA+0x1b6>
 8001b2e:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <HAL_ADC_Start_DMA+0x1c8>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	2b0f      	cmp	r3, #15
 8001b38:	d823      	bhi.n	8001b82 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d11c      	bne.n	8001b82 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	e013      	b.n	8001b82 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a11      	ldr	r2, [pc, #68]	; (8001ba4 <HAL_ADC_Start_DMA+0x1d8>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d10e      	bne.n	8001b82 <HAL_ADC_Start_DMA+0x1b6>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d107      	bne.n	8001b82 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b80:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	431bde83 	.word	0x431bde83
 8001b94:	40012300 	.word	0x40012300
 8001b98:	08002015 	.word	0x08002015
 8001b9c:	080020cf 	.word	0x080020cf
 8001ba0:	080020eb 	.word	0x080020eb
 8001ba4:	40012000 	.word	0x40012000
 8001ba8:	40012100 	.word	0x40012100
 8001bac:	40012200 	.word	0x40012200

08001bb0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x1c>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e105      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x228>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b09      	cmp	r3, #9
 8001c02:	d925      	bls.n	8001c50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68d9      	ldr	r1, [r3, #12]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	3b1e      	subs	r3, #30
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43da      	mvns	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	400a      	ands	r2, r1
 8001c28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68d9      	ldr	r1, [r3, #12]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4403      	add	r3, r0
 8001c42:	3b1e      	subs	r3, #30
 8001c44:	409a      	lsls	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	e022      	b.n	8001c96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6919      	ldr	r1, [r3, #16]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4613      	mov	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4413      	add	r3, r2
 8001c64:	2207      	movs	r2, #7
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	400a      	ands	r2, r1
 8001c72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6919      	ldr	r1, [r3, #16]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	4618      	mov	r0, r3
 8001c86:	4603      	mov	r3, r0
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	4403      	add	r3, r0
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d824      	bhi.n	8001ce8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	3b05      	subs	r3, #5
 8001cb0:	221f      	movs	r2, #31
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3b05      	subs	r3, #5
 8001cda:	fa00 f203 	lsl.w	r2, r0, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ce6:	e04c      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b0c      	cmp	r3, #12
 8001cee:	d824      	bhi.n	8001d3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	3b23      	subs	r3, #35	; 0x23
 8001d02:	221f      	movs	r2, #31
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43da      	mvns	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	400a      	ands	r2, r1
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	3b23      	subs	r3, #35	; 0x23
 8001d2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	631a      	str	r2, [r3, #48]	; 0x30
 8001d38:	e023      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	3b41      	subs	r3, #65	; 0x41
 8001d4c:	221f      	movs	r2, #31
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	400a      	ands	r2, r1
 8001d5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	3b41      	subs	r3, #65	; 0x41
 8001d76:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d82:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <HAL_ADC_ConfigChannel+0x234>)
 8001d84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a21      	ldr	r2, [pc, #132]	; (8001e10 <HAL_ADC_ConfigChannel+0x238>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d109      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x1cc>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b12      	cmp	r3, #18
 8001d96:	d105      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a19      	ldr	r2, [pc, #100]	; (8001e10 <HAL_ADC_ConfigChannel+0x238>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d123      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x21e>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b10      	cmp	r3, #16
 8001db4:	d003      	beq.n	8001dbe <HAL_ADC_ConfigChannel+0x1e6>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2b11      	cmp	r3, #17
 8001dbc:	d11b      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b10      	cmp	r3, #16
 8001dd0:	d111      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <HAL_ADC_ConfigChannel+0x23c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a10      	ldr	r2, [pc, #64]	; (8001e18 <HAL_ADC_ConfigChannel+0x240>)
 8001dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ddc:	0c9a      	lsrs	r2, r3, #18
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001de8:	e002      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	3b01      	subs	r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f9      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	40012300 	.word	0x40012300
 8001e10:	40012000 	.word	0x40012000
 8001e14:	20000000 	.word	0x20000000
 8001e18:	431bde83 	.word	0x431bde83

08001e1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e24:	4b79      	ldr	r3, [pc, #484]	; (800200c <ADC_Init+0x1f0>)
 8001e26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	021a      	lsls	r2, r3, #8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6859      	ldr	r1, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6899      	ldr	r1, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eae:	4a58      	ldr	r2, [pc, #352]	; (8002010 <ADC_Init+0x1f4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d022      	beq.n	8001efa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ec2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6899      	ldr	r1, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ee4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6899      	ldr	r1, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	e00f      	b.n	8001f1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0202 	bic.w	r2, r2, #2
 8001f28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6899      	ldr	r1, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	7e1b      	ldrb	r3, [r3, #24]
 8001f34:	005a      	lsls	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01b      	beq.n	8001f80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6859      	ldr	r1, [r3, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	3b01      	subs	r3, #1
 8001f74:	035a      	lsls	r2, r3, #13
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	e007      	b.n	8001f90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	051a      	lsls	r2, r3, #20
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6899      	ldr	r1, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fd2:	025a      	lsls	r2, r3, #9
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6899      	ldr	r1, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	029a      	lsls	r2, r3, #10
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	609a      	str	r2, [r3, #8]
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	40012300 	.word	0x40012300
 8002010:	0f000001 	.word	0x0f000001

08002014 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002020:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800202a:	2b00      	cmp	r3, #0
 800202c:	d13c      	bne.n	80020a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d12b      	bne.n	80020a0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800204c:	2b00      	cmp	r3, #0
 800204e:	d127      	bne.n	80020a0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800205a:	2b00      	cmp	r3, #0
 800205c:	d006      	beq.n	800206c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002068:	2b00      	cmp	r3, #0
 800206a:	d119      	bne.n	80020a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0220 	bic.w	r2, r2, #32
 800207a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d105      	bne.n	80020a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f043 0201 	orr.w	r2, r3, #1
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f7fe fead 	bl	8000e00 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020a6:	e00e      	b.n	80020c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f7ff fd85 	bl	8001bc4 <HAL_ADC_ErrorCallback>
}
 80020ba:	e004      	b.n	80020c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	4798      	blx	r3
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020da:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f7ff fd67 	bl	8001bb0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2240      	movs	r2, #64	; 0x40
 80020fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	f043 0204 	orr.w	r2, r3, #4
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f7ff fd5a 	bl	8001bc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002134:	4013      	ands	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214a:	4a04      	ldr	r2, [pc, #16]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	60d3      	str	r3, [r2, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <__NVIC_GetPriorityGrouping+0x18>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	f003 0307 	and.w	r3, r3, #7
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	2b00      	cmp	r3, #0
 800218c:	db0b      	blt.n	80021a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	4907      	ldr	r1, [pc, #28]	; (80021b4 <__NVIC_EnableIRQ+0x38>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2001      	movs	r0, #1
 800219e:	fa00 f202 	lsl.w	r2, r0, r2
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000e100 	.word	0xe000e100

080021b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db0a      	blt.n	80021e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	490c      	ldr	r1, [pc, #48]	; (8002204 <__NVIC_SetPriority+0x4c>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	440b      	add	r3, r1
 80021dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e0:	e00a      	b.n	80021f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4908      	ldr	r1, [pc, #32]	; (8002208 <__NVIC_SetPriority+0x50>)
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3b04      	subs	r3, #4
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	440b      	add	r3, r1
 80021f6:	761a      	strb	r2, [r3, #24]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000e100 	.word	0xe000e100
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	; 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f1c3 0307 	rsb	r3, r3, #7
 8002226:	2b04      	cmp	r3, #4
 8002228:	bf28      	it	cs
 800222a:	2304      	movcs	r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3304      	adds	r3, #4
 8002232:	2b06      	cmp	r3, #6
 8002234:	d902      	bls.n	800223c <NVIC_EncodePriority+0x30>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3b03      	subs	r3, #3
 800223a:	e000      	b.n	800223e <NVIC_EncodePriority+0x32>
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	f04f 32ff 	mov.w	r2, #4294967295
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	401a      	ands	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002254:	f04f 31ff 	mov.w	r1, #4294967295
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43d9      	mvns	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	4313      	orrs	r3, r2
         );
}
 8002266:	4618      	mov	r0, r3
 8002268:	3724      	adds	r7, #36	; 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002284:	d301      	bcc.n	800228a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002286:	2301      	movs	r3, #1
 8002288:	e00f      	b.n	80022aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <SysTick_Config+0x40>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002292:	210f      	movs	r1, #15
 8002294:	f04f 30ff 	mov.w	r0, #4294967295
 8002298:	f7ff ff8e 	bl	80021b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <SysTick_Config+0x40>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a2:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <SysTick_Config+0x40>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000e010 	.word	0xe000e010

080022b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff29 	bl	8002118 <__NVIC_SetPriorityGrouping>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e0:	f7ff ff3e 	bl	8002160 <__NVIC_GetPriorityGrouping>
 80022e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	6978      	ldr	r0, [r7, #20]
 80022ec:	f7ff ff8e 	bl	800220c <NVIC_EncodePriority>
 80022f0:	4602      	mov	r2, r0
 80022f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff5d 	bl	80021b8 <__NVIC_SetPriority>
}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff31 	bl	800217c <__NVIC_EnableIRQ>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ffa2 	bl	8002274 <SysTick_Config>
 8002330:	4603      	mov	r3, r0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff face 	bl	80018e8 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e099      	b.n	800248c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002378:	e00f      	b.n	800239a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800237a:	f7ff fab5 	bl	80018e8 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b05      	cmp	r3, #5
 8002386:	d908      	bls.n	800239a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2203      	movs	r2, #3
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e078      	b.n	800248c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1e8      	bne.n	800237a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	4b38      	ldr	r3, [pc, #224]	; (8002494 <HAL_DMA_Init+0x158>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d107      	bne.n	8002404 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	4313      	orrs	r3, r2
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f023 0307 	bic.w	r3, r3, #7
 800241a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	4313      	orrs	r3, r2
 8002424:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	2b04      	cmp	r3, #4
 800242c:	d117      	bne.n	800245e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00e      	beq.n	800245e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fa9d 	bl	8002980 <DMA_CheckFifoParam>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2240      	movs	r2, #64	; 0x40
 8002450:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800245a:	2301      	movs	r3, #1
 800245c:	e016      	b.n	800248c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fa54 	bl	8002914 <DMA_CalcBaseAndBitshift>
 800246c:	4603      	mov	r3, r0
 800246e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	223f      	movs	r2, #63	; 0x3f
 8002476:	409a      	lsls	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	f010803f 	.word	0xf010803f

08002498 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_DMA_Start_IT+0x26>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e040      	b.n	8002540 <HAL_DMA_Start_IT+0xa8>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d12f      	bne.n	8002532 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2202      	movs	r2, #2
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f9e6 	bl	80028b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	223f      	movs	r2, #63	; 0x3f
 80024f2:	409a      	lsls	r2, r3
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0216 	orr.w	r2, r2, #22
 8002506:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0208 	orr.w	r2, r2, #8
 800251e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	e005      	b.n	800253e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800253a:	2302      	movs	r3, #2
 800253c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800253e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d004      	beq.n	8002566 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2280      	movs	r2, #128	; 0x80
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e00c      	b.n	8002580 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2205      	movs	r2, #5
 800256a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0201 	bic.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002598:	4b92      	ldr	r3, [pc, #584]	; (80027e4 <HAL_DMA_IRQHandler+0x258>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a92      	ldr	r2, [pc, #584]	; (80027e8 <HAL_DMA_IRQHandler+0x25c>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	0a9b      	lsrs	r3, r3, #10
 80025a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b6:	2208      	movs	r2, #8
 80025b8:	409a      	lsls	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4013      	ands	r3, r2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d01a      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d013      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0204 	bic.w	r2, r2, #4
 80025de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	2208      	movs	r2, #8
 80025e6:	409a      	lsls	r2, r3
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f0:	f043 0201 	orr.w	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fc:	2201      	movs	r2, #1
 80025fe:	409a      	lsls	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d012      	beq.n	800262e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261a:	2201      	movs	r2, #1
 800261c:	409a      	lsls	r2, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	f043 0202 	orr.w	r2, r3, #2
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002632:	2204      	movs	r2, #4
 8002634:	409a      	lsls	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4013      	ands	r3, r2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d012      	beq.n	8002664 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00b      	beq.n	8002664 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	2204      	movs	r2, #4
 8002652:	409a      	lsls	r2, r3
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	f043 0204 	orr.w	r2, r3, #4
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	2210      	movs	r2, #16
 800266a:	409a      	lsls	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d043      	beq.n	80026fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d03c      	beq.n	80026fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	2210      	movs	r2, #16
 8002688:	409a      	lsls	r2, r3
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d018      	beq.n	80026ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d108      	bne.n	80026bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d024      	beq.n	80026fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	4798      	blx	r3
 80026ba:	e01f      	b.n	80026fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01b      	beq.n	80026fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	4798      	blx	r3
 80026cc:	e016      	b.n	80026fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d107      	bne.n	80026ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0208 	bic.w	r2, r2, #8
 80026ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002700:	2220      	movs	r2, #32
 8002702:	409a      	lsls	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 808e 	beq.w	800282a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 8086 	beq.w	800282a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002722:	2220      	movs	r2, #32
 8002724:	409a      	lsls	r2, r3
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b05      	cmp	r3, #5
 8002734:	d136      	bne.n	80027a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0216 	bic.w	r2, r2, #22
 8002744:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002754:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	2b00      	cmp	r3, #0
 800275c:	d103      	bne.n	8002766 <HAL_DMA_IRQHandler+0x1da>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002762:	2b00      	cmp	r3, #0
 8002764:	d007      	beq.n	8002776 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0208 	bic.w	r2, r2, #8
 8002774:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277a:	223f      	movs	r2, #63	; 0x3f
 800277c:	409a      	lsls	r2, r3
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002796:	2b00      	cmp	r3, #0
 8002798:	d07d      	beq.n	8002896 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	4798      	blx	r3
        }
        return;
 80027a2:	e078      	b.n	8002896 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d01c      	beq.n	80027ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d108      	bne.n	80027d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d030      	beq.n	800282a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	4798      	blx	r3
 80027d0:	e02b      	b.n	800282a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d027      	beq.n	800282a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	4798      	blx	r3
 80027e2:	e022      	b.n	800282a <HAL_DMA_IRQHandler+0x29e>
 80027e4:	20000000 	.word	0x20000000
 80027e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10f      	bne.n	800281a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0210 	bic.w	r2, r2, #16
 8002808:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282e:	2b00      	cmp	r3, #0
 8002830:	d032      	beq.n	8002898 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d022      	beq.n	8002884 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2205      	movs	r2, #5
 8002842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0201 	bic.w	r2, r2, #1
 8002854:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	3301      	adds	r3, #1
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	429a      	cmp	r2, r3
 8002860:	d307      	bcc.n	8002872 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f2      	bne.n	8002856 <HAL_DMA_IRQHandler+0x2ca>
 8002870:	e000      	b.n	8002874 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002872:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	4798      	blx	r3
 8002894:	e000      	b.n	8002898 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002896:	bf00      	nop
    }
  }
}
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop

080028a0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b40      	cmp	r3, #64	; 0x40
 80028e4:	d108      	bne.n	80028f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028f6:	e007      	b.n	8002908 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	60da      	str	r2, [r3, #12]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	3b10      	subs	r3, #16
 8002924:	4a14      	ldr	r2, [pc, #80]	; (8002978 <DMA_CalcBaseAndBitshift+0x64>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800292e:	4a13      	ldr	r2, [pc, #76]	; (800297c <DMA_CalcBaseAndBitshift+0x68>)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b03      	cmp	r3, #3
 8002940:	d909      	bls.n	8002956 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800294a:	f023 0303 	bic.w	r3, r3, #3
 800294e:	1d1a      	adds	r2, r3, #4
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	659a      	str	r2, [r3, #88]	; 0x58
 8002954:	e007      	b.n	8002966 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800295e:	f023 0303 	bic.w	r3, r3, #3
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800296a:	4618      	mov	r0, r3
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	aaaaaaab 	.word	0xaaaaaaab
 800297c:	08010d98 	.word	0x08010d98

08002980 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d11f      	bne.n	80029da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d855      	bhi.n	8002a4c <DMA_CheckFifoParam+0xcc>
 80029a0:	a201      	add	r2, pc, #4	; (adr r2, 80029a8 <DMA_CheckFifoParam+0x28>)
 80029a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a6:	bf00      	nop
 80029a8:	080029b9 	.word	0x080029b9
 80029ac:	080029cb 	.word	0x080029cb
 80029b0:	080029b9 	.word	0x080029b9
 80029b4:	08002a4d 	.word	0x08002a4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d045      	beq.n	8002a50 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c8:	e042      	b.n	8002a50 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029d2:	d13f      	bne.n	8002a54 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d8:	e03c      	b.n	8002a54 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e2:	d121      	bne.n	8002a28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d836      	bhi.n	8002a58 <DMA_CheckFifoParam+0xd8>
 80029ea:	a201      	add	r2, pc, #4	; (adr r2, 80029f0 <DMA_CheckFifoParam+0x70>)
 80029ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f0:	08002a01 	.word	0x08002a01
 80029f4:	08002a07 	.word	0x08002a07
 80029f8:	08002a01 	.word	0x08002a01
 80029fc:	08002a19 	.word	0x08002a19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
      break;
 8002a04:	e02f      	b.n	8002a66 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d024      	beq.n	8002a5c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a16:	e021      	b.n	8002a5c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a20:	d11e      	bne.n	8002a60 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a26:	e01b      	b.n	8002a60 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d902      	bls.n	8002a34 <DMA_CheckFifoParam+0xb4>
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d003      	beq.n	8002a3a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a32:	e018      	b.n	8002a66 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
      break;
 8002a38:	e015      	b.n	8002a66 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00e      	beq.n	8002a64 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
      break;
 8002a4a:	e00b      	b.n	8002a64 <DMA_CheckFifoParam+0xe4>
      break;
 8002a4c:	bf00      	nop
 8002a4e:	e00a      	b.n	8002a66 <DMA_CheckFifoParam+0xe6>
      break;
 8002a50:	bf00      	nop
 8002a52:	e008      	b.n	8002a66 <DMA_CheckFifoParam+0xe6>
      break;
 8002a54:	bf00      	nop
 8002a56:	e006      	b.n	8002a66 <DMA_CheckFifoParam+0xe6>
      break;
 8002a58:	bf00      	nop
 8002a5a:	e004      	b.n	8002a66 <DMA_CheckFifoParam+0xe6>
      break;
 8002a5c:	bf00      	nop
 8002a5e:	e002      	b.n	8002a66 <DMA_CheckFifoParam+0xe6>
      break;   
 8002a60:	bf00      	nop
 8002a62:	e000      	b.n	8002a66 <DMA_CheckFifoParam+0xe6>
      break;
 8002a64:	bf00      	nop
    }
  } 
  
  return status; 
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	e16b      	b.n	8002d68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a90:	2201      	movs	r2, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	f040 815a 	bne.w	8002d62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d00b      	beq.n	8002ace <HAL_GPIO_Init+0x5a>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d007      	beq.n	8002ace <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ac2:	2b11      	cmp	r3, #17
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b12      	cmp	r3, #18
 8002acc:	d130      	bne.n	8002b30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	2203      	movs	r2, #3
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b04:	2201      	movs	r2, #1
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 0201 	and.w	r2, r3, #1
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0xfc>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b12      	cmp	r3, #18
 8002b6e:	d123      	bne.n	8002bb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	08da      	lsrs	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3208      	adds	r2, #8
 8002b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	220f      	movs	r2, #15
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	08da      	lsrs	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3208      	adds	r2, #8
 8002bb2:	69b9      	ldr	r1, [r7, #24]
 8002bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0203 	and.w	r2, r3, #3
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80b4 	beq.w	8002d62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	4b5f      	ldr	r3, [pc, #380]	; (8002d7c <HAL_GPIO_Init+0x308>)
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	4a5e      	ldr	r2, [pc, #376]	; (8002d7c <HAL_GPIO_Init+0x308>)
 8002c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c08:	6453      	str	r3, [r2, #68]	; 0x44
 8002c0a:	4b5c      	ldr	r3, [pc, #368]	; (8002d7c <HAL_GPIO_Init+0x308>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c16:	4a5a      	ldr	r2, [pc, #360]	; (8002d80 <HAL_GPIO_Init+0x30c>)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	220f      	movs	r2, #15
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a51      	ldr	r2, [pc, #324]	; (8002d84 <HAL_GPIO_Init+0x310>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d02b      	beq.n	8002c9a <HAL_GPIO_Init+0x226>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a50      	ldr	r2, [pc, #320]	; (8002d88 <HAL_GPIO_Init+0x314>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d025      	beq.n	8002c96 <HAL_GPIO_Init+0x222>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4f      	ldr	r2, [pc, #316]	; (8002d8c <HAL_GPIO_Init+0x318>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01f      	beq.n	8002c92 <HAL_GPIO_Init+0x21e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4e      	ldr	r2, [pc, #312]	; (8002d90 <HAL_GPIO_Init+0x31c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d019      	beq.n	8002c8e <HAL_GPIO_Init+0x21a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4d      	ldr	r2, [pc, #308]	; (8002d94 <HAL_GPIO_Init+0x320>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d013      	beq.n	8002c8a <HAL_GPIO_Init+0x216>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a4c      	ldr	r2, [pc, #304]	; (8002d98 <HAL_GPIO_Init+0x324>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00d      	beq.n	8002c86 <HAL_GPIO_Init+0x212>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4b      	ldr	r2, [pc, #300]	; (8002d9c <HAL_GPIO_Init+0x328>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d007      	beq.n	8002c82 <HAL_GPIO_Init+0x20e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a4a      	ldr	r2, [pc, #296]	; (8002da0 <HAL_GPIO_Init+0x32c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d101      	bne.n	8002c7e <HAL_GPIO_Init+0x20a>
 8002c7a:	2307      	movs	r3, #7
 8002c7c:	e00e      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c7e:	2308      	movs	r3, #8
 8002c80:	e00c      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c82:	2306      	movs	r3, #6
 8002c84:	e00a      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c86:	2305      	movs	r3, #5
 8002c88:	e008      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	e006      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e004      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e002      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_GPIO_Init+0x228>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	f002 0203 	and.w	r2, r2, #3
 8002ca2:	0092      	lsls	r2, r2, #2
 8002ca4:	4093      	lsls	r3, r2
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cac:	4934      	ldr	r1, [pc, #208]	; (8002d80 <HAL_GPIO_Init+0x30c>)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	089b      	lsrs	r3, r3, #2
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cba:	4b3a      	ldr	r3, [pc, #232]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cde:	4a31      	ldr	r2, [pc, #196]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ce4:	4b2f      	ldr	r3, [pc, #188]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d08:	4a26      	ldr	r2, [pc, #152]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d0e:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d32:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d5c:	4a11      	ldr	r2, [pc, #68]	; (8002da4 <HAL_GPIO_Init+0x330>)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3301      	adds	r3, #1
 8002d66:	61fb      	str	r3, [r7, #28]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	2b0f      	cmp	r3, #15
 8002d6c:	f67f ae90 	bls.w	8002a90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d70:	bf00      	nop
 8002d72:	3724      	adds	r7, #36	; 0x24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40013800 	.word	0x40013800
 8002d84:	40020000 	.word	0x40020000
 8002d88:	40020400 	.word	0x40020400
 8002d8c:	40020800 	.word	0x40020800
 8002d90:	40020c00 	.word	0x40020c00
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40021400 	.word	0x40021400
 8002d9c:	40021800 	.word	0x40021800
 8002da0:	40021c00 	.word	0x40021c00
 8002da4:	40013c00 	.word	0x40013c00

08002da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
 8002db4:	4613      	mov	r3, r2
 8002db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db8:	787b      	ldrb	r3, [r7, #1]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dbe:	887a      	ldrh	r2, [r7, #2]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dc4:	e003      	b.n	8002dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dc6:	887b      	ldrh	r3, [r7, #2]
 8002dc8:	041a      	lsls	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	619a      	str	r2, [r3, #24]
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ddc:	b08f      	sub	sp, #60	; 0x3c
 8002dde:	af0a      	add	r7, sp, #40	; 0x28
 8002de0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e10f      	b.n	800300c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f00b fe98 	bl	800eb3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2203      	movs	r2, #3
 8002e10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f004 f9f3 	bl	8007216 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	603b      	str	r3, [r7, #0]
 8002e36:	687e      	ldr	r6, [r7, #4]
 8002e38:	466d      	mov	r5, sp
 8002e3a:	f106 0410 	add.w	r4, r6, #16
 8002e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e4e:	1d33      	adds	r3, r6, #4
 8002e50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e52:	6838      	ldr	r0, [r7, #0]
 8002e54:	f004 f8ca 	bl	8006fec <USB_CoreInit>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2202      	movs	r2, #2
 8002e62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0d0      	b.n	800300c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4618      	mov	r0, r3
 8002e72:	f004 f9e1 	bl	8007238 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e76:	2300      	movs	r3, #0
 8002e78:	73fb      	strb	r3, [r7, #15]
 8002e7a:	e04a      	b.n	8002f12 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	333d      	adds	r3, #61	; 0x3d
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e90:	7bfa      	ldrb	r2, [r7, #15]
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	333c      	adds	r3, #60	; 0x3c
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ea4:	7bfa      	ldrb	r2, [r7, #15]
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	b298      	uxth	r0, r3
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3342      	adds	r3, #66	; 0x42
 8002eb8:	4602      	mov	r2, r0
 8002eba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	1a9b      	subs	r3, r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	333f      	adds	r3, #63	; 0x3f
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	3344      	adds	r3, #68	; 0x44
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3348      	adds	r3, #72	; 0x48
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	3350      	adds	r3, #80	; 0x50
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
 8002f12:	7bfa      	ldrb	r2, [r7, #15]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d3af      	bcc.n	8002e7c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	73fb      	strb	r3, [r7, #15]
 8002f20:	e044      	b.n	8002fac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002f4a:	7bfa      	ldrb	r2, [r7, #15]
 8002f4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f4e:	7bfa      	ldrb	r2, [r7, #15]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f64:	7bfa      	ldrb	r2, [r7, #15]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f7a:	7bfa      	ldrb	r2, [r7, #15]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f90:	7bfa      	ldrb	r2, [r7, #15]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
 8002fac:	7bfa      	ldrb	r2, [r7, #15]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d3b5      	bcc.n	8002f22 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	687e      	ldr	r6, [r7, #4]
 8002fbe:	466d      	mov	r5, sp
 8002fc0:	f106 0410 	add.w	r4, r6, #16
 8002fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fcc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fd0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fd4:	1d33      	adds	r3, r6, #4
 8002fd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fd8:	6838      	ldr	r0, [r7, #0]
 8002fda:	f004 f957 	bl	800728c <USB_DevInit>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e00d      	b.n	800300c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f005 f99f 	bl	8008348 <USB_DevDisconnect>

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003014 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_PCD_Start+0x1c>
 800302c:	2302      	movs	r3, #2
 800302e:	e020      	b.n	8003072 <HAL_PCD_Start+0x5e>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	2b01      	cmp	r3, #1
 800303e:	d109      	bne.n	8003054 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003044:	2b01      	cmp	r3, #1
 8003046:	d005      	beq.n	8003054 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f004 f8cb 	bl	80071f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f005 f94f 	bl	8008306 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800307a:	b590      	push	{r4, r7, lr}
 800307c:	b08d      	sub	sp, #52	; 0x34
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f005 fa0d 	bl	80084b0 <USB_GetMode>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	f040 839d 	bne.w	80037d8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f005 f971 	bl	800838a <USB_ReadInterrupts>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 8393 	beq.w	80037d6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f005 f968 	bl	800838a <USB_ReadInterrupts>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d107      	bne.n	80030d4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695a      	ldr	r2, [r3, #20]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f002 0202 	and.w	r2, r2, #2
 80030d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f005 f956 	bl	800838a <USB_ReadInterrupts>
 80030de:	4603      	mov	r3, r0
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b10      	cmp	r3, #16
 80030e6:	d161      	bne.n	80031ac <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699a      	ldr	r2, [r3, #24]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0210 	bic.w	r2, r2, #16
 80030f6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f003 020f 	and.w	r2, r3, #15
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	1a9b      	subs	r3, r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	4413      	add	r3, r2
 8003114:	3304      	adds	r3, #4
 8003116:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	0c5b      	lsrs	r3, r3, #17
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	2b02      	cmp	r3, #2
 8003122:	d124      	bne.n	800316e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d035      	beq.n	800319c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	091b      	lsrs	r3, r3, #4
 8003138:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800313a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800313e:	b29b      	uxth	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	6a38      	ldr	r0, [r7, #32]
 8003144:	f004 ffbc 	bl	80080c0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003154:	441a      	add	r2, r3
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003166:	441a      	add	r2, r3
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	619a      	str	r2, [r3, #24]
 800316c:	e016      	b.n	800319c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	0c5b      	lsrs	r3, r3, #17
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	2b06      	cmp	r3, #6
 8003178:	d110      	bne.n	800319c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003180:	2208      	movs	r2, #8
 8003182:	4619      	mov	r1, r3
 8003184:	6a38      	ldr	r0, [r7, #32]
 8003186:	f004 ff9b 	bl	80080c0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003196:	441a      	add	r2, r3
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0210 	orr.w	r2, r2, #16
 80031aa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f005 f8ea 	bl	800838a <USB_ReadInterrupts>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031c0:	d16e      	bne.n	80032a0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f005 f8f0 	bl	80083b0 <USB_ReadDevAllOutEpInterrupt>
 80031d0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031d2:	e062      	b.n	800329a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d057      	beq.n	800328e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	4611      	mov	r1, r2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f005 f915 	bl	8008418 <USB_ReadDevOutEPInterrupt>
 80031ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00c      	beq.n	8003214 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003206:	461a      	mov	r2, r3
 8003208:	2301      	movs	r3, #1
 800320a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800320c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fdde 	bl	8003dd0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00c      	beq.n	8003238 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	4413      	add	r3, r2
 8003226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322a:	461a      	mov	r2, r3
 800322c:	2308      	movs	r3, #8
 800322e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003230:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fed8 	bl	8003fe8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	4413      	add	r3, r2
 800324a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324e:	461a      	mov	r2, r3
 8003250:	2310      	movs	r3, #16
 8003252:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b00      	cmp	r3, #0
 800325c:	d008      	beq.n	8003270 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	4413      	add	r3, r2
 8003266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326a:	461a      	mov	r2, r3
 800326c:	2320      	movs	r3, #32
 800326e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d009      	beq.n	800328e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	4413      	add	r3, r2
 8003282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003286:	461a      	mov	r2, r3
 8003288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800328c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	3301      	adds	r3, #1
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003296:	085b      	lsrs	r3, r3, #1
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	2b00      	cmp	r3, #0
 800329e:	d199      	bne.n	80031d4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f005 f870 	bl	800838a <USB_ReadInterrupts>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032b4:	f040 80c0 	bne.w	8003438 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f005 f891 	bl	80083e4 <USB_ReadDevAllInEpInterrupt>
 80032c2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80032c8:	e0b2      	b.n	8003430 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80a7 	beq.w	8003424 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f005 f8b7 	bl	8008454 <USB_ReadDevInEPInterrupt>
 80032e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d057      	beq.n	80033a2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	2201      	movs	r2, #1
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	43db      	mvns	r3, r3
 800330c:	69f9      	ldr	r1, [r7, #28]
 800330e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003312:	4013      	ands	r3, r2
 8003314:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	4413      	add	r3, r2
 800331e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003322:	461a      	mov	r2, r3
 8003324:	2301      	movs	r3, #1
 8003326:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d132      	bne.n	8003396 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003334:	4613      	mov	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	3348      	adds	r3, #72	; 0x48
 8003340:	6819      	ldr	r1, [r3, #0]
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003346:	4613      	mov	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4403      	add	r3, r0
 8003350:	3344      	adds	r3, #68	; 0x44
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4419      	add	r1, r3
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335a:	4613      	mov	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4403      	add	r3, r0
 8003364:	3348      	adds	r3, #72	; 0x48
 8003366:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	2b00      	cmp	r3, #0
 800336c:	d113      	bne.n	8003396 <HAL_PCD_IRQHandler+0x31c>
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003372:	4613      	mov	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	1a9b      	subs	r3, r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	3350      	adds	r3, #80	; 0x50
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d108      	bne.n	8003396 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800338e:	461a      	mov	r2, r3
 8003390:	2101      	movs	r1, #1
 8003392:	f005 f8bf 	bl	8008514 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	b2db      	uxtb	r3, r3
 800339a:	4619      	mov	r1, r3
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f00b fc4e 	bl	800ec3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b8:	461a      	mov	r2, r3
 80033ba:	2308      	movs	r3, #8
 80033bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d4:	461a      	mov	r2, r3
 80033d6:	2310      	movs	r3, #16
 80033d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f0:	461a      	mov	r2, r3
 80033f2:	2340      	movs	r3, #64	; 0x40
 80033f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	4413      	add	r3, r2
 8003408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800340c:	461a      	mov	r2, r3
 800340e:	2302      	movs	r3, #2
 8003410:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800341c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fc48 	bl	8003cb4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	3301      	adds	r3, #1
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342c:	085b      	lsrs	r3, r3, #1
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	2b00      	cmp	r3, #0
 8003434:	f47f af49 	bne.w	80032ca <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f004 ffa4 	bl	800838a <USB_ReadInterrupts>
 8003442:	4603      	mov	r3, r0
 8003444:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003448:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800344c:	d122      	bne.n	8003494 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	69fa      	ldr	r2, [r7, #28]
 8003458:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800345c:	f023 0301 	bic.w	r3, r3, #1
 8003460:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003468:	2b01      	cmp	r3, #1
 800346a:	d108      	bne.n	800347e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003474:	2100      	movs	r1, #0
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fe54 	bl	8004124 <HAL_PCDEx_LPM_Callback>
 800347c:	e002      	b.n	8003484 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f00b fc54 	bl	800ed2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003492:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f004 ff76 	bl	800838a <USB_ReadInterrupts>
 800349e:	4603      	mov	r3, r0
 80034a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a8:	d112      	bne.n	80034d0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d102      	bne.n	80034c0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f00b fc10 	bl	800ece0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695a      	ldr	r2, [r3, #20]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80034ce:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f004 ff58 	bl	800838a <USB_ReadInterrupts>
 80034da:	4603      	mov	r3, r0
 80034dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e4:	f040 80c7 	bne.w	8003676 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	69fa      	ldr	r2, [r7, #28]
 80034f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034f6:	f023 0301 	bic.w	r3, r3, #1
 80034fa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2110      	movs	r1, #16
 8003502:	4618      	mov	r0, r3
 8003504:	f004 f826 	bl	8007554 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003508:	2300      	movs	r3, #0
 800350a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800350c:	e056      	b.n	80035bc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800350e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	4413      	add	r3, r2
 8003516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800351a:	461a      	mov	r2, r3
 800351c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003520:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	4413      	add	r3, r2
 800352a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003532:	0151      	lsls	r1, r2, #5
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	440a      	add	r2, r1
 8003538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800353c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003540:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003544:	015a      	lsls	r2, r3, #5
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	4413      	add	r3, r2
 800354a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003552:	0151      	lsls	r1, r2, #5
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	440a      	add	r2, r1
 8003558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800355c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003560:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356e:	461a      	mov	r2, r3
 8003570:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003574:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003586:	0151      	lsls	r1, r2, #5
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	440a      	add	r2, r1
 800358c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003590:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003594:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035a6:	0151      	lsls	r1, r2, #5
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	440a      	add	r2, r1
 80035ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035b4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b8:	3301      	adds	r3, #1
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d3a3      	bcc.n	800350e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	69fa      	ldr	r2, [r7, #28]
 80035d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035d4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80035d8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d016      	beq.n	8003610 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ec:	69fa      	ldr	r2, [r7, #28]
 80035ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035f2:	f043 030b 	orr.w	r3, r3, #11
 80035f6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003608:	f043 030b 	orr.w	r3, r3, #11
 800360c:	6453      	str	r3, [r2, #68]	; 0x44
 800360e:	e015      	b.n	800363c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	69fa      	ldr	r2, [r7, #28]
 800361a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800361e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003622:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003626:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003636:	f043 030b 	orr.w	r3, r3, #11
 800363a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800364a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800364e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003660:	461a      	mov	r2, r3
 8003662:	f004 ff57 	bl	8008514 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695a      	ldr	r2, [r3, #20]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003674:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f004 fe85 	bl	800838a <USB_ReadInterrupts>
 8003680:	4603      	mov	r3, r0
 8003682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800368a:	d124      	bne.n	80036d6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f004 ff1b 	bl	80084cc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f003 ffbb 	bl	8007616 <USB_GetDevSpeed>
 80036a0:	4603      	mov	r3, r0
 80036a2:	461a      	mov	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681c      	ldr	r4, [r3, #0]
 80036ac:	f001 f974 	bl	8004998 <HAL_RCC_GetHCLKFreq>
 80036b0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	4620      	mov	r0, r4
 80036bc:	f003 fcf8 	bl	80070b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f00b fae4 	bl	800ec8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695a      	ldr	r2, [r3, #20]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80036d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f004 fe55 	bl	800838a <USB_ReadInterrupts>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d10a      	bne.n	8003700 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f00b fac1 	bl	800ec72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f002 0208 	and.w	r2, r2, #8
 80036fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f004 fe40 	bl	800838a <USB_ReadInterrupts>
 800370a:	4603      	mov	r3, r0
 800370c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003710:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003714:	d10f      	bne.n	8003736 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	b2db      	uxtb	r3, r3
 800371e:	4619      	mov	r1, r3
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f00b fb23 	bl	800ed6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003734:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f004 fe25 	bl	800838a <USB_ReadInterrupts>
 8003740:	4603      	mov	r3, r0
 8003742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003746:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800374a:	d10f      	bne.n	800376c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	b2db      	uxtb	r3, r3
 8003754:	4619      	mov	r1, r3
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f00b faf6 	bl	800ed48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695a      	ldr	r2, [r3, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800376a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f004 fe0a 	bl	800838a <USB_ReadInterrupts>
 8003776:	4603      	mov	r3, r0
 8003778:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800377c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003780:	d10a      	bne.n	8003798 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f00b fb04 	bl	800ed90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003796:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f004 fdf4 	bl	800838a <USB_ReadInterrupts>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d115      	bne.n	80037d8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	f003 0304 	and.w	r3, r3, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f00b faf4 	bl	800edac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6859      	ldr	r1, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	605a      	str	r2, [r3, #4]
 80037d4:	e000      	b.n	80037d8 <HAL_PCD_IRQHandler+0x75e>
      return;
 80037d6:	bf00      	nop
    }
  }
}
 80037d8:	3734      	adds	r7, #52	; 0x34
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd90      	pop	{r4, r7, pc}

080037de <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_PCD_SetAddress+0x1a>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e013      	b.n	8003820 <HAL_PCD_SetAddress+0x42>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	4611      	mov	r1, r2
 8003810:	4618      	mov	r0, r3
 8003812:	f004 fd52 	bl	80082ba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	4608      	mov	r0, r1
 8003832:	4611      	mov	r1, r2
 8003834:	461a      	mov	r2, r3
 8003836:	4603      	mov	r3, r0
 8003838:	70fb      	strb	r3, [r7, #3]
 800383a:	460b      	mov	r3, r1
 800383c:	803b      	strh	r3, [r7, #0]
 800383e:	4613      	mov	r3, r2
 8003840:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003846:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800384a:	2b00      	cmp	r3, #0
 800384c:	da0f      	bge.n	800386e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800384e:	78fb      	ldrb	r3, [r7, #3]
 8003850:	f003 020f 	and.w	r2, r3, #15
 8003854:	4613      	mov	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	3338      	adds	r3, #56	; 0x38
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	4413      	add	r3, r2
 8003862:	3304      	adds	r3, #4
 8003864:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	705a      	strb	r2, [r3, #1]
 800386c:	e00f      	b.n	800388e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	f003 020f 	and.w	r2, r3, #15
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	4413      	add	r3, r2
 8003884:	3304      	adds	r3, #4
 8003886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	f003 030f 	and.w	r3, r3, #15
 8003894:	b2da      	uxtb	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800389a:	883a      	ldrh	r2, [r7, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	78ba      	ldrb	r2, [r7, #2]
 80038a4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	785b      	ldrb	r3, [r3, #1]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d004      	beq.n	80038b8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038b8:	78bb      	ldrb	r3, [r7, #2]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d102      	bne.n	80038c4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_PCD_EP_Open+0xaa>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e00e      	b.n	80038f0 <HAL_PCD_EP_Open+0xc8>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68f9      	ldr	r1, [r7, #12]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f003 febd 	bl	8007660 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80038ee:	7afb      	ldrb	r3, [r7, #11]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003908:	2b00      	cmp	r3, #0
 800390a:	da0f      	bge.n	800392c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800390c:	78fb      	ldrb	r3, [r7, #3]
 800390e:	f003 020f 	and.w	r2, r3, #15
 8003912:	4613      	mov	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	3338      	adds	r3, #56	; 0x38
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	4413      	add	r3, r2
 8003920:	3304      	adds	r3, #4
 8003922:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	705a      	strb	r2, [r3, #1]
 800392a:	e00f      	b.n	800394c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800392c:	78fb      	ldrb	r3, [r7, #3]
 800392e:	f003 020f 	and.w	r2, r3, #15
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	4413      	add	r3, r2
 8003942:	3304      	adds	r3, #4
 8003944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	b2da      	uxtb	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_PCD_EP_Close+0x6e>
 8003962:	2302      	movs	r3, #2
 8003964:	e00e      	b.n	8003984 <HAL_PCD_EP_Close+0x8c>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68f9      	ldr	r1, [r7, #12]
 8003974:	4618      	mov	r0, r3
 8003976:	f003 fefb 	bl	8007770 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	607a      	str	r2, [r7, #4]
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	460b      	mov	r3, r1
 800399a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800399c:	7afb      	ldrb	r3, [r7, #11]
 800399e:	f003 020f 	and.w	r2, r3, #15
 80039a2:	4613      	mov	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	1a9b      	subs	r3, r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4413      	add	r3, r2
 80039b2:	3304      	adds	r3, #4
 80039b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2200      	movs	r2, #0
 80039c6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2200      	movs	r2, #0
 80039cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ce:	7afb      	ldrb	r3, [r7, #11]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d102      	bne.n	80039e8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039e8:	7afb      	ldrb	r3, [r7, #11]
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	461a      	mov	r2, r3
 80039fe:	6979      	ldr	r1, [r7, #20]
 8003a00:	f004 f9d6 	bl	8007db0 <USB_EP0StartXfer>
 8003a04:	e008      	b.n	8003a18 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	6979      	ldr	r1, [r7, #20]
 8003a14:	f003 ff88 	bl	8007928 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	f003 020f 	and.w	r2, r3, #15
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a44:	681b      	ldr	r3, [r3, #0]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b086      	sub	sp, #24
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	60f8      	str	r0, [r7, #12]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a62:	7afb      	ldrb	r3, [r7, #11]
 8003a64:	f003 020f 	and.w	r2, r3, #15
 8003a68:	4613      	mov	r3, r2
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	3338      	adds	r3, #56	; 0x38
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4413      	add	r3, r2
 8003a76:	3304      	adds	r3, #4
 8003a78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a92:	7afb      	ldrb	r3, [r7, #11]
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d102      	bne.n	8003aac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003aac:	7afb      	ldrb	r3, [r7, #11]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	6979      	ldr	r1, [r7, #20]
 8003ac4:	f004 f974 	bl	8007db0 <USB_EP0StartXfer>
 8003ac8:	e008      	b.n	8003adc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	6979      	ldr	r1, [r7, #20]
 8003ad8:	f003 ff26 	bl	8007928 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	460b      	mov	r3, r1
 8003af0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003af2:	78fb      	ldrb	r3, [r7, #3]
 8003af4:	f003 020f 	and.w	r2, r3, #15
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d901      	bls.n	8003b04 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e050      	b.n	8003ba6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	da0f      	bge.n	8003b2c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	f003 020f 	and.w	r2, r3, #15
 8003b12:	4613      	mov	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	3338      	adds	r3, #56	; 0x38
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	4413      	add	r3, r2
 8003b20:	3304      	adds	r3, #4
 8003b22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	705a      	strb	r2, [r3, #1]
 8003b2a:	e00d      	b.n	8003b48 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3304      	adds	r3, #4
 8003b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b4e:	78fb      	ldrb	r3, [r7, #3]
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_PCD_EP_SetStall+0x82>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e01e      	b.n	8003ba6 <HAL_PCD_EP_SetStall+0xc0>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68f9      	ldr	r1, [r7, #12]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f004 facb 	bl	8008112 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	b2d9      	uxtb	r1, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b96:	461a      	mov	r2, r3
 8003b98:	f004 fcbc 	bl	8008514 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	f003 020f 	and.w	r2, r3, #15
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d901      	bls.n	8003bcc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e042      	b.n	8003c52 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	da0f      	bge.n	8003bf4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	f003 020f 	and.w	r2, r3, #15
 8003bda:	4613      	mov	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	1a9b      	subs	r3, r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	3338      	adds	r3, #56	; 0x38
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	4413      	add	r3, r2
 8003be8:	3304      	adds	r3, #4
 8003bea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	705a      	strb	r2, [r3, #1]
 8003bf2:	e00f      	b.n	8003c14 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	f003 020f 	and.w	r2, r3, #15
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	4413      	add	r3, r2
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_PCD_EP_ClrStall+0x86>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e00e      	b.n	8003c52 <HAL_PCD_EP_ClrStall+0xa4>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68f9      	ldr	r1, [r7, #12]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f004 fad3 	bl	80081ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	460b      	mov	r3, r1
 8003c64:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_PCD_EP_Flush+0x1a>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e01b      	b.n	8003cac <HAL_PCD_EP_Flush+0x52>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8003c7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	da09      	bge.n	8003c98 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4610      	mov	r0, r2
 8003c92:	f003 fc5f 	bl	8007554 <USB_FlushTxFifo>
 8003c96:	e004      	b.n	8003ca2 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f003 fc7f 	bl	80075a0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	; 0x28
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	3338      	adds	r3, #56	; 0x38
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3304      	adds	r3, #4
 8003cda:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	699a      	ldr	r2, [r3, #24]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d901      	bls.n	8003cec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e06c      	b.n	8003dc6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	695a      	ldr	r2, [r3, #20]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	69fa      	ldr	r2, [r7, #28]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d902      	bls.n	8003d08 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	3303      	adds	r3, #3
 8003d0c:	089b      	lsrs	r3, r3, #2
 8003d0e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d10:	e02b      	b.n	8003d6a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	695a      	ldr	r2, [r3, #20]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d902      	bls.n	8003d2e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	3303      	adds	r3, #3
 8003d32:	089b      	lsrs	r3, r3, #2
 8003d34:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	68d9      	ldr	r1, [r3, #12]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	6978      	ldr	r0, [r7, #20]
 8003d4e:	f004 f982 	bl	8008056 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	441a      	add	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	441a      	add	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	015a      	lsls	r2, r3, #5
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4413      	add	r3, r2
 8003d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d809      	bhi.n	8003d94 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	699a      	ldr	r2, [r3, #24]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d203      	bcs.n	8003d94 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1be      	bne.n	8003d12 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	695a      	ldr	r2, [r3, #20]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d811      	bhi.n	8003dc4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	2201      	movs	r2, #1
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	43db      	mvns	r3, r3
 8003dba:	6939      	ldr	r1, [r7, #16]
 8003dbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3720      	adds	r7, #32
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	333c      	adds	r3, #60	; 0x3c
 8003de8:	3304      	adds	r3, #4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	f040 80a0 	bne.w	8003f48 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d015      	beq.n	8003e3e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4a72      	ldr	r2, [pc, #456]	; (8003fe0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	f240 80dd 	bls.w	8003fd6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80d7 	beq.w	8003fd6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e34:	461a      	mov	r2, r3
 8003e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e3a:	6093      	str	r3, [r2, #8]
 8003e3c:	e0cb      	b.n	8003fd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d009      	beq.n	8003e5c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e54:	461a      	mov	r2, r3
 8003e56:	2320      	movs	r3, #32
 8003e58:	6093      	str	r3, [r2, #8]
 8003e5a:	e0bc      	b.n	8003fd6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f040 80b7 	bne.w	8003fd6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4a5d      	ldr	r2, [pc, #372]	; (8003fe0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d90f      	bls.n	8003e90 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e86:	461a      	mov	r2, r3
 8003e88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8c:	6093      	str	r3, [r2, #8]
 8003e8e:	e0a2      	b.n	8003fd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ea2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	0159      	lsls	r1, r3, #5
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	440b      	add	r3, r1
 8003eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003eb6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4403      	add	r3, r0
 8003ec6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003eca:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ede:	6819      	ldr	r1, [r3, #0]
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4403      	add	r3, r0
 8003eee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4419      	add	r1, r3
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4403      	add	r3, r0
 8003f04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f08:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d114      	bne.n	8003f3a <PCD_EP_OutXfrComplete_int+0x16a>
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	4613      	mov	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d108      	bne.n	8003f3a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f32:	461a      	mov	r2, r3
 8003f34:	2101      	movs	r1, #1
 8003f36:	f004 faed 	bl	8008514 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	4619      	mov	r1, r3
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f00a fe61 	bl	800ec08 <HAL_PCD_DataOutStageCallback>
 8003f46:	e046      	b.n	8003fd6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4a26      	ldr	r2, [pc, #152]	; (8003fe4 <PCD_EP_OutXfrComplete_int+0x214>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d124      	bne.n	8003f9a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f66:	461a      	mov	r2, r3
 8003f68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f6c:	6093      	str	r3, [r2, #8]
 8003f6e:	e032      	b.n	8003fd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d008      	beq.n	8003f8c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f86:	461a      	mov	r2, r3
 8003f88:	2320      	movs	r3, #32
 8003f8a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	4619      	mov	r1, r3
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f00a fe38 	bl	800ec08 <HAL_PCD_DataOutStageCallback>
 8003f98:	e01d      	b.n	8003fd6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d114      	bne.n	8003fca <PCD_EP_OutXfrComplete_int+0x1fa>
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d108      	bne.n	8003fca <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6818      	ldr	r0, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	f004 faa5 	bl	8008514 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f00a fe19 	bl	800ec08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	4f54300a 	.word	0x4f54300a
 8003fe4:	4f54310a 	.word	0x4f54310a

08003fe8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	333c      	adds	r3, #60	; 0x3c
 8004000:	3304      	adds	r3, #4
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4413      	add	r3, r2
 800400e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4a15      	ldr	r2, [pc, #84]	; (8004070 <PCD_EP_OutSetupPacket_int+0x88>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d90e      	bls.n	800403c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004024:	2b00      	cmp	r3, #0
 8004026:	d009      	beq.n	800403c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004034:	461a      	mov	r2, r3
 8004036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800403a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f00a fdd1 	bl	800ebe4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4a0a      	ldr	r2, [pc, #40]	; (8004070 <PCD_EP_OutSetupPacket_int+0x88>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d90c      	bls.n	8004064 <PCD_EP_OutSetupPacket_int+0x7c>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d108      	bne.n	8004064 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6818      	ldr	r0, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800405c:	461a      	mov	r2, r3
 800405e:	2101      	movs	r1, #1
 8004060:	f004 fa58 	bl	8008514 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	4f54300a 	.word	0x4f54300a

08004074 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	70fb      	strb	r3, [r7, #3]
 8004080:	4613      	mov	r3, r2
 8004082:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d107      	bne.n	80040a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004092:	883b      	ldrh	r3, [r7, #0]
 8004094:	0419      	lsls	r1, r3, #16
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	430a      	orrs	r2, r1
 800409e:	629a      	str	r2, [r3, #40]	; 0x28
 80040a0:	e028      	b.n	80040f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	0c1b      	lsrs	r3, r3, #16
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	4413      	add	r3, r2
 80040ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040b0:	2300      	movs	r3, #0
 80040b2:	73fb      	strb	r3, [r7, #15]
 80040b4:	e00d      	b.n	80040d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
 80040bc:	3340      	adds	r3, #64	; 0x40
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	0c1b      	lsrs	r3, r3, #16
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	4413      	add	r3, r2
 80040ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
 80040ce:	3301      	adds	r3, #1
 80040d0:	73fb      	strb	r3, [r7, #15]
 80040d2:	7bfa      	ldrb	r2, [r7, #15]
 80040d4:	78fb      	ldrb	r3, [r7, #3]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	429a      	cmp	r2, r3
 80040da:	d3ec      	bcc.n	80040b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80040dc:	883b      	ldrh	r3, [r7, #0]
 80040de:	0418      	lsls	r0, r3, #16
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6819      	ldr	r1, [r3, #0]
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	4302      	orrs	r2, r0
 80040ec:	3340      	adds	r3, #64	; 0x40
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	460b      	mov	r3, r1
 800410c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	887a      	ldrh	r2, [r7, #2]
 8004114:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e25b      	b.n	8004606 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d075      	beq.n	8004246 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800415a:	4ba3      	ldr	r3, [pc, #652]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	2b04      	cmp	r3, #4
 8004164:	d00c      	beq.n	8004180 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004166:	4ba0      	ldr	r3, [pc, #640]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800416e:	2b08      	cmp	r3, #8
 8004170:	d112      	bne.n	8004198 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004172:	4b9d      	ldr	r3, [pc, #628]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800417a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800417e:	d10b      	bne.n	8004198 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004180:	4b99      	ldr	r3, [pc, #612]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d05b      	beq.n	8004244 <HAL_RCC_OscConfig+0x108>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d157      	bne.n	8004244 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e236      	b.n	8004606 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a0:	d106      	bne.n	80041b0 <HAL_RCC_OscConfig+0x74>
 80041a2:	4b91      	ldr	r3, [pc, #580]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a90      	ldr	r2, [pc, #576]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 80041a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e01d      	b.n	80041ec <HAL_RCC_OscConfig+0xb0>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x98>
 80041ba:	4b8b      	ldr	r3, [pc, #556]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a8a      	ldr	r2, [pc, #552]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 80041c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	4b88      	ldr	r3, [pc, #544]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a87      	ldr	r2, [pc, #540]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	e00b      	b.n	80041ec <HAL_RCC_OscConfig+0xb0>
 80041d4:	4b84      	ldr	r3, [pc, #528]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a83      	ldr	r2, [pc, #524]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 80041da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	4b81      	ldr	r3, [pc, #516]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a80      	ldr	r2, [pc, #512]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 80041e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d013      	beq.n	800421c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fd fb78 	bl	80018e8 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041fc:	f7fd fb74 	bl	80018e8 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	; 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e1fb      	b.n	8004606 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420e:	4b76      	ldr	r3, [pc, #472]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCC_OscConfig+0xc0>
 800421a:	e014      	b.n	8004246 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7fd fb64 	bl	80018e8 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004224:	f7fd fb60 	bl	80018e8 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	; 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e1e7      	b.n	8004606 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004236:	4b6c      	ldr	r3, [pc, #432]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0xe8>
 8004242:	e000      	b.n	8004246 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d063      	beq.n	800431a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004252:	4b65      	ldr	r3, [pc, #404]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800425e:	4b62      	ldr	r3, [pc, #392]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004266:	2b08      	cmp	r3, #8
 8004268:	d11c      	bne.n	80042a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800426a:	4b5f      	ldr	r3, [pc, #380]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d116      	bne.n	80042a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004276:	4b5c      	ldr	r3, [pc, #368]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <HAL_RCC_OscConfig+0x152>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d001      	beq.n	800428e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e1bb      	b.n	8004606 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428e:	4b56      	ldr	r3, [pc, #344]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4952      	ldr	r1, [pc, #328]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a2:	e03a      	b.n	800431a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d020      	beq.n	80042ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042ac:	4b4f      	ldr	r3, [pc, #316]	; (80043ec <HAL_RCC_OscConfig+0x2b0>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b2:	f7fd fb19 	bl	80018e8 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ba:	f7fd fb15 	bl	80018e8 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e19c      	b.n	8004606 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042cc:	4b46      	ldr	r3, [pc, #280]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d8:	4b43      	ldr	r3, [pc, #268]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	4940      	ldr	r1, [pc, #256]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	600b      	str	r3, [r1, #0]
 80042ec:	e015      	b.n	800431a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ee:	4b3f      	ldr	r3, [pc, #252]	; (80043ec <HAL_RCC_OscConfig+0x2b0>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7fd faf8 	bl	80018e8 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042fc:	f7fd faf4 	bl	80018e8 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e17b      	b.n	8004606 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800430e:	4b36      	ldr	r3, [pc, #216]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f0      	bne.n	80042fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d030      	beq.n	8004388 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d016      	beq.n	800435c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800432e:	4b30      	ldr	r3, [pc, #192]	; (80043f0 <HAL_RCC_OscConfig+0x2b4>)
 8004330:	2201      	movs	r2, #1
 8004332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fd fad8 	bl	80018e8 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800433c:	f7fd fad4 	bl	80018e8 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e15b      	b.n	8004606 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800434e:	4b26      	ldr	r3, [pc, #152]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 8004350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0x200>
 800435a:	e015      	b.n	8004388 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800435c:	4b24      	ldr	r3, [pc, #144]	; (80043f0 <HAL_RCC_OscConfig+0x2b4>)
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004362:	f7fd fac1 	bl	80018e8 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800436a:	f7fd fabd 	bl	80018e8 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e144      	b.n	8004606 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800437c:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 800437e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1f0      	bne.n	800436a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 80a0 	beq.w	80044d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004396:	2300      	movs	r3, #0
 8004398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800439a:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10f      	bne.n	80043c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043a6:	2300      	movs	r3, #0
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	4a0e      	ldr	r2, [pc, #56]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b4:	6413      	str	r3, [r2, #64]	; 0x40
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <HAL_RCC_OscConfig+0x2ac>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043be:	60bb      	str	r3, [r7, #8]
 80043c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043c2:	2301      	movs	r3, #1
 80043c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c6:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_RCC_OscConfig+0x2b8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d121      	bne.n	8004416 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043d2:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <HAL_RCC_OscConfig+0x2b8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a07      	ldr	r2, [pc, #28]	; (80043f4 <HAL_RCC_OscConfig+0x2b8>)
 80043d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043de:	f7fd fa83 	bl	80018e8 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e4:	e011      	b.n	800440a <HAL_RCC_OscConfig+0x2ce>
 80043e6:	bf00      	nop
 80043e8:	40023800 	.word	0x40023800
 80043ec:	42470000 	.word	0x42470000
 80043f0:	42470e80 	.word	0x42470e80
 80043f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f8:	f7fd fa76 	bl	80018e8 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e0fd      	b.n	8004606 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440a:	4b81      	ldr	r3, [pc, #516]	; (8004610 <HAL_RCC_OscConfig+0x4d4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d106      	bne.n	800442c <HAL_RCC_OscConfig+0x2f0>
 800441e:	4b7d      	ldr	r3, [pc, #500]	; (8004614 <HAL_RCC_OscConfig+0x4d8>)
 8004420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004422:	4a7c      	ldr	r2, [pc, #496]	; (8004614 <HAL_RCC_OscConfig+0x4d8>)
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	6713      	str	r3, [r2, #112]	; 0x70
 800442a:	e01c      	b.n	8004466 <HAL_RCC_OscConfig+0x32a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b05      	cmp	r3, #5
 8004432:	d10c      	bne.n	800444e <HAL_RCC_OscConfig+0x312>
 8004434:	4b77      	ldr	r3, [pc, #476]	; (8004614 <HAL_RCC_OscConfig+0x4d8>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004438:	4a76      	ldr	r2, [pc, #472]	; (8004614 <HAL_RCC_OscConfig+0x4d8>)
 800443a:	f043 0304 	orr.w	r3, r3, #4
 800443e:	6713      	str	r3, [r2, #112]	; 0x70
 8004440:	4b74      	ldr	r3, [pc, #464]	; (8004614 <HAL_RCC_OscConfig+0x4d8>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004444:	4a73      	ldr	r2, [pc, #460]	; (8004614 <HAL_RCC_OscConfig+0x4d8>)
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	6713      	str	r3, [r2, #112]	; 0x70
 800444c:	e00b      	b.n	8004466 <HAL_RCC_OscConfig+0x32a>
 800444e:	4b71      	ldr	r3, [pc, #452]	; (8004614 <HAL_RCC_OscConfig+0x4d8>)
 8004450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004452:	4a70      	ldr	r2, [pc, #448]	; (8004614 <HAL_RCC_OscConfig+0x4d8>)
 8004454:	f023 0301 	bic.w	r3, r3, #1
 8004458:	6713      	str	r3, [r2, #112]	; 0x70
 800445a:	4b6e      	ldr	r3, [pc, #440]	; (8004614 <HAL_RCC_OscConfig+0x4d8>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445e:	4a6d      	ldr	r2, [pc, #436]	; (8004614 <HAL_RCC_OscConfig+0x4d8>)
 8004460:	f023 0304 	bic.w	r3, r3, #4
 8004464:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d015      	beq.n	800449a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446e:	f7fd fa3b 	bl	80018e8 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004474:	e00a      	b.n	800448c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004476:	f7fd fa37 	bl	80018e8 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	f241 3288 	movw	r2, #5000	; 0x1388
 8004484:	4293      	cmp	r3, r2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e0bc      	b.n	8004606 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448c:	4b61      	ldr	r3, [pc, #388]	; (8004614 <HAL_RCC_OscConfig+0x4d8>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0ee      	beq.n	8004476 <HAL_RCC_OscConfig+0x33a>
 8004498:	e014      	b.n	80044c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800449a:	f7fd fa25 	bl	80018e8 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044a0:	e00a      	b.n	80044b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a2:	f7fd fa21 	bl	80018e8 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e0a6      	b.n	8004606 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b8:	4b56      	ldr	r3, [pc, #344]	; (8004614 <HAL_RCC_OscConfig+0x4d8>)
 80044ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1ee      	bne.n	80044a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d105      	bne.n	80044d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ca:	4b52      	ldr	r3, [pc, #328]	; (8004614 <HAL_RCC_OscConfig+0x4d8>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	4a51      	ldr	r2, [pc, #324]	; (8004614 <HAL_RCC_OscConfig+0x4d8>)
 80044d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 8092 	beq.w	8004604 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044e0:	4b4c      	ldr	r3, [pc, #304]	; (8004614 <HAL_RCC_OscConfig+0x4d8>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 030c 	and.w	r3, r3, #12
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d05c      	beq.n	80045a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d141      	bne.n	8004578 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f4:	4b48      	ldr	r3, [pc, #288]	; (8004618 <HAL_RCC_OscConfig+0x4dc>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fa:	f7fd f9f5 	bl	80018e8 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004502:	f7fd f9f1 	bl	80018e8 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e078      	b.n	8004606 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004514:	4b3f      	ldr	r3, [pc, #252]	; (8004614 <HAL_RCC_OscConfig+0x4d8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1f0      	bne.n	8004502 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69da      	ldr	r2, [r3, #28]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	019b      	lsls	r3, r3, #6
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004536:	085b      	lsrs	r3, r3, #1
 8004538:	3b01      	subs	r3, #1
 800453a:	041b      	lsls	r3, r3, #16
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	061b      	lsls	r3, r3, #24
 8004544:	4933      	ldr	r1, [pc, #204]	; (8004614 <HAL_RCC_OscConfig+0x4d8>)
 8004546:	4313      	orrs	r3, r2
 8004548:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800454a:	4b33      	ldr	r3, [pc, #204]	; (8004618 <HAL_RCC_OscConfig+0x4dc>)
 800454c:	2201      	movs	r2, #1
 800454e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004550:	f7fd f9ca 	bl	80018e8 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004558:	f7fd f9c6 	bl	80018e8 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e04d      	b.n	8004606 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800456a:	4b2a      	ldr	r3, [pc, #168]	; (8004614 <HAL_RCC_OscConfig+0x4d8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f0      	beq.n	8004558 <HAL_RCC_OscConfig+0x41c>
 8004576:	e045      	b.n	8004604 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004578:	4b27      	ldr	r3, [pc, #156]	; (8004618 <HAL_RCC_OscConfig+0x4dc>)
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457e:	f7fd f9b3 	bl	80018e8 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004586:	f7fd f9af 	bl	80018e8 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e036      	b.n	8004606 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004598:	4b1e      	ldr	r3, [pc, #120]	; (8004614 <HAL_RCC_OscConfig+0x4d8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1f0      	bne.n	8004586 <HAL_RCC_OscConfig+0x44a>
 80045a4:	e02e      	b.n	8004604 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d101      	bne.n	80045b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e029      	b.n	8004606 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045b2:	4b18      	ldr	r3, [pc, #96]	; (8004614 <HAL_RCC_OscConfig+0x4d8>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d11c      	bne.n	8004600 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d115      	bne.n	8004600 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045da:	4013      	ands	r3, r2
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d10d      	bne.n	8004600 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d106      	bne.n	8004600 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d001      	beq.n	8004604 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40007000 	.word	0x40007000
 8004614:	40023800 	.word	0x40023800
 8004618:	42470060 	.word	0x42470060

0800461c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e0cc      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004630:	4b68      	ldr	r3, [pc, #416]	; (80047d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 030f 	and.w	r3, r3, #15
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d90c      	bls.n	8004658 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463e:	4b65      	ldr	r3, [pc, #404]	; (80047d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004646:	4b63      	ldr	r3, [pc, #396]	; (80047d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d001      	beq.n	8004658 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e0b8      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d020      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004670:	4b59      	ldr	r3, [pc, #356]	; (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	4a58      	ldr	r2, [pc, #352]	; (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800467a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0308 	and.w	r3, r3, #8
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004688:	4b53      	ldr	r3, [pc, #332]	; (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	4a52      	ldr	r2, [pc, #328]	; (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004692:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004694:	4b50      	ldr	r3, [pc, #320]	; (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	494d      	ldr	r1, [pc, #308]	; (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d044      	beq.n	800473c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d107      	bne.n	80046ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ba:	4b47      	ldr	r3, [pc, #284]	; (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d119      	bne.n	80046fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e07f      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d003      	beq.n	80046da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d107      	bne.n	80046ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046da:	4b3f      	ldr	r3, [pc, #252]	; (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d109      	bne.n	80046fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e06f      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ea:	4b3b      	ldr	r3, [pc, #236]	; (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e067      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046fa:	4b37      	ldr	r3, [pc, #220]	; (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f023 0203 	bic.w	r2, r3, #3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	4934      	ldr	r1, [pc, #208]	; (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	4313      	orrs	r3, r2
 800470a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800470c:	f7fd f8ec 	bl	80018e8 <HAL_GetTick>
 8004710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004712:	e00a      	b.n	800472a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004714:	f7fd f8e8 	bl	80018e8 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004722:	4293      	cmp	r3, r2
 8004724:	d901      	bls.n	800472a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e04f      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472a:	4b2b      	ldr	r3, [pc, #172]	; (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 020c 	and.w	r2, r3, #12
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	429a      	cmp	r2, r3
 800473a:	d1eb      	bne.n	8004714 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800473c:	4b25      	ldr	r3, [pc, #148]	; (80047d4 <HAL_RCC_ClockConfig+0x1b8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	d20c      	bcs.n	8004764 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474a:	4b22      	ldr	r3, [pc, #136]	; (80047d4 <HAL_RCC_ClockConfig+0x1b8>)
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004752:	4b20      	ldr	r3, [pc, #128]	; (80047d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	d001      	beq.n	8004764 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e032      	b.n	80047ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	d008      	beq.n	8004782 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004770:	4b19      	ldr	r3, [pc, #100]	; (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	4916      	ldr	r1, [pc, #88]	; (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	4313      	orrs	r3, r2
 8004780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b00      	cmp	r3, #0
 800478c:	d009      	beq.n	80047a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800478e:	4b12      	ldr	r3, [pc, #72]	; (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	490e      	ldr	r1, [pc, #56]	; (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047a2:	f000 f821 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 80047a6:	4601      	mov	r1, r0
 80047a8:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	091b      	lsrs	r3, r3, #4
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	4a0a      	ldr	r2, [pc, #40]	; (80047dc <HAL_RCC_ClockConfig+0x1c0>)
 80047b4:	5cd3      	ldrb	r3, [r2, r3]
 80047b6:	fa21 f303 	lsr.w	r3, r1, r3
 80047ba:	4a09      	ldr	r2, [pc, #36]	; (80047e0 <HAL_RCC_ClockConfig+0x1c4>)
 80047bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047be:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <HAL_RCC_ClockConfig+0x1c8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fd f84c 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40023c00 	.word	0x40023c00
 80047d8:	40023800 	.word	0x40023800
 80047dc:	08010d88 	.word	0x08010d88
 80047e0:	20000000 	.word	0x20000000
 80047e4:	20000004 	.word	0x20000004

080047e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	607b      	str	r3, [r7, #4]
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	2300      	movs	r3, #0
 80047f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047fe:	4b63      	ldr	r3, [pc, #396]	; (800498c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
 8004806:	2b04      	cmp	r3, #4
 8004808:	d007      	beq.n	800481a <HAL_RCC_GetSysClockFreq+0x32>
 800480a:	2b08      	cmp	r3, #8
 800480c:	d008      	beq.n	8004820 <HAL_RCC_GetSysClockFreq+0x38>
 800480e:	2b00      	cmp	r3, #0
 8004810:	f040 80b4 	bne.w	800497c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004814:	4b5e      	ldr	r3, [pc, #376]	; (8004990 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004816:	60bb      	str	r3, [r7, #8]
       break;
 8004818:	e0b3      	b.n	8004982 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800481a:	4b5e      	ldr	r3, [pc, #376]	; (8004994 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800481c:	60bb      	str	r3, [r7, #8]
      break;
 800481e:	e0b0      	b.n	8004982 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004820:	4b5a      	ldr	r3, [pc, #360]	; (800498c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004828:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800482a:	4b58      	ldr	r3, [pc, #352]	; (800498c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d04a      	beq.n	80048cc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004836:	4b55      	ldr	r3, [pc, #340]	; (800498c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	099b      	lsrs	r3, r3, #6
 800483c:	f04f 0400 	mov.w	r4, #0
 8004840:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	ea03 0501 	and.w	r5, r3, r1
 800484c:	ea04 0602 	and.w	r6, r4, r2
 8004850:	4629      	mov	r1, r5
 8004852:	4632      	mov	r2, r6
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	f04f 0400 	mov.w	r4, #0
 800485c:	0154      	lsls	r4, r2, #5
 800485e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004862:	014b      	lsls	r3, r1, #5
 8004864:	4619      	mov	r1, r3
 8004866:	4622      	mov	r2, r4
 8004868:	1b49      	subs	r1, r1, r5
 800486a:	eb62 0206 	sbc.w	r2, r2, r6
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	f04f 0400 	mov.w	r4, #0
 8004876:	0194      	lsls	r4, r2, #6
 8004878:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800487c:	018b      	lsls	r3, r1, #6
 800487e:	1a5b      	subs	r3, r3, r1
 8004880:	eb64 0402 	sbc.w	r4, r4, r2
 8004884:	f04f 0100 	mov.w	r1, #0
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	00e2      	lsls	r2, r4, #3
 800488e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004892:	00d9      	lsls	r1, r3, #3
 8004894:	460b      	mov	r3, r1
 8004896:	4614      	mov	r4, r2
 8004898:	195b      	adds	r3, r3, r5
 800489a:	eb44 0406 	adc.w	r4, r4, r6
 800489e:	f04f 0100 	mov.w	r1, #0
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	0262      	lsls	r2, r4, #9
 80048a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80048ac:	0259      	lsls	r1, r3, #9
 80048ae:	460b      	mov	r3, r1
 80048b0:	4614      	mov	r4, r2
 80048b2:	4618      	mov	r0, r3
 80048b4:	4621      	mov	r1, r4
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f04f 0400 	mov.w	r4, #0
 80048bc:	461a      	mov	r2, r3
 80048be:	4623      	mov	r3, r4
 80048c0:	f7fc f91e 	bl	8000b00 <__aeabi_uldivmod>
 80048c4:	4603      	mov	r3, r0
 80048c6:	460c      	mov	r4, r1
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	e049      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048cc:	4b2f      	ldr	r3, [pc, #188]	; (800498c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	099b      	lsrs	r3, r3, #6
 80048d2:	f04f 0400 	mov.w	r4, #0
 80048d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	ea03 0501 	and.w	r5, r3, r1
 80048e2:	ea04 0602 	and.w	r6, r4, r2
 80048e6:	4629      	mov	r1, r5
 80048e8:	4632      	mov	r2, r6
 80048ea:	f04f 0300 	mov.w	r3, #0
 80048ee:	f04f 0400 	mov.w	r4, #0
 80048f2:	0154      	lsls	r4, r2, #5
 80048f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048f8:	014b      	lsls	r3, r1, #5
 80048fa:	4619      	mov	r1, r3
 80048fc:	4622      	mov	r2, r4
 80048fe:	1b49      	subs	r1, r1, r5
 8004900:	eb62 0206 	sbc.w	r2, r2, r6
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	f04f 0400 	mov.w	r4, #0
 800490c:	0194      	lsls	r4, r2, #6
 800490e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004912:	018b      	lsls	r3, r1, #6
 8004914:	1a5b      	subs	r3, r3, r1
 8004916:	eb64 0402 	sbc.w	r4, r4, r2
 800491a:	f04f 0100 	mov.w	r1, #0
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	00e2      	lsls	r2, r4, #3
 8004924:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004928:	00d9      	lsls	r1, r3, #3
 800492a:	460b      	mov	r3, r1
 800492c:	4614      	mov	r4, r2
 800492e:	195b      	adds	r3, r3, r5
 8004930:	eb44 0406 	adc.w	r4, r4, r6
 8004934:	f04f 0100 	mov.w	r1, #0
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	02a2      	lsls	r2, r4, #10
 800493e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004942:	0299      	lsls	r1, r3, #10
 8004944:	460b      	mov	r3, r1
 8004946:	4614      	mov	r4, r2
 8004948:	4618      	mov	r0, r3
 800494a:	4621      	mov	r1, r4
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f04f 0400 	mov.w	r4, #0
 8004952:	461a      	mov	r2, r3
 8004954:	4623      	mov	r3, r4
 8004956:	f7fc f8d3 	bl	8000b00 <__aeabi_uldivmod>
 800495a:	4603      	mov	r3, r0
 800495c:	460c      	mov	r4, r1
 800495e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004960:	4b0a      	ldr	r3, [pc, #40]	; (800498c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	0c1b      	lsrs	r3, r3, #16
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	3301      	adds	r3, #1
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	60bb      	str	r3, [r7, #8]
      break;
 800497a:	e002      	b.n	8004982 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800497c:	4b04      	ldr	r3, [pc, #16]	; (8004990 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800497e:	60bb      	str	r3, [r7, #8]
      break;
 8004980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004982:	68bb      	ldr	r3, [r7, #8]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800498c:	40023800 	.word	0x40023800
 8004990:	00f42400 	.word	0x00f42400
 8004994:	007a1200 	.word	0x007a1200

08004998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800499c:	4b03      	ldr	r3, [pc, #12]	; (80049ac <HAL_RCC_GetHCLKFreq+0x14>)
 800499e:	681b      	ldr	r3, [r3, #0]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	20000000 	.word	0x20000000

080049b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e022      	b.n	8004a08 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d105      	bne.n	80049da <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7fc fd35 	bl	8001444 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2203      	movs	r2, #3
 80049de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f814 	bl	8004a10 <HAL_SD_InitCard>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e00a      	b.n	8004a08 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004a10:	b5b0      	push	{r4, r5, r7, lr}
 8004a12:	b08e      	sub	sp, #56	; 0x38
 8004a14:	af04      	add	r7, sp, #16
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004a20:	2300      	movs	r3, #0
 8004a22:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004a24:	2300      	movs	r3, #0
 8004a26:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004a2c:	2376      	movs	r3, #118	; 0x76
 8004a2e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681d      	ldr	r5, [r3, #0]
 8004a34:	466c      	mov	r4, sp
 8004a36:	f107 0314 	add.w	r3, r7, #20
 8004a3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a42:	f107 0308 	add.w	r3, r7, #8
 8004a46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a48:	4628      	mov	r0, r5
 8004a4a:	f001 fd6b 	bl	8006524 <SDIO_Init>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e031      	b.n	8004ac4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004a60:	4b1a      	ldr	r3, [pc, #104]	; (8004acc <HAL_SD_InitCard+0xbc>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f001 fda3 	bl	80065b6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004a70:	4b16      	ldr	r3, [pc, #88]	; (8004acc <HAL_SD_InitCard+0xbc>)
 8004a72:	2201      	movs	r2, #1
 8004a74:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 ffdc 	bl	8005a34 <SD_PowerON>
 8004a7c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00b      	beq.n	8004a9c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e013      	b.n	8004ac4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fefb 	bl	8005898 <SD_InitCard>
 8004aa2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00b      	beq.n	8004ac2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3728      	adds	r7, #40	; 0x28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bdb0      	pop	{r4, r5, r7, pc}
 8004acc:	422580a0 	.word	0x422580a0

08004ad0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08c      	sub	sp, #48	; 0x30
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d107      	bne.n	8004af8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e0c9      	b.n	8004c8c <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	f040 80c2 	bne.w	8004c8a <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	441a      	add	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d907      	bls.n	8004b2a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e0b0      	b.n	8004c8c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2203      	movs	r2, #3
 8004b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2200      	movs	r2, #0
 8004b38:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004b48:	f043 0302 	orr.w	r3, r3, #2
 8004b4c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	4a50      	ldr	r2, [pc, #320]	; (8004c94 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8004b54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	4a4f      	ldr	r2, [pc, #316]	; (8004c98 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8004b5c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	2200      	movs	r2, #0
 8004b64:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3380      	adds	r3, #128	; 0x80
 8004b70:	4619      	mov	r1, r3
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	025b      	lsls	r3, r3, #9
 8004b78:	089b      	lsrs	r3, r3, #2
 8004b7a:	f7fd fc8d 	bl	8002498 <HAL_DMA_Start_IT>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d017      	beq.n	8004bb4 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004b92:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a40      	ldr	r2, [pc, #256]	; (8004c9c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004b9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e06b      	b.n	8004c8c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004bb4:	4b3a      	ldr	r3, [pc, #232]	; (8004ca0 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d002      	beq.n	8004bc8 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	025b      	lsls	r3, r3, #9
 8004bc6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f001 fd83 	bl	80066dc <SDMMC_CmdBlockLength>
 8004bd6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8004bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00f      	beq.n	8004bfe <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a2e      	ldr	r2, [pc, #184]	; (8004c9c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bec:	431a      	orrs	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e046      	b.n	8004c8c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8004c02:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	025b      	lsls	r3, r3, #9
 8004c08:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004c0a:	2390      	movs	r3, #144	; 0x90
 8004c0c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004c16:	2301      	movs	r3, #1
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f107 0210 	add.w	r2, r7, #16
 8004c22:	4611      	mov	r1, r2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f001 fd2d 	bl	8006684 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d90a      	bls.n	8004c46 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2282      	movs	r2, #130	; 0x82
 8004c34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f001 fd91 	bl	8006764 <SDMMC_CmdReadMultiBlock>
 8004c42:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004c44:	e009      	b.n	8004c5a <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2281      	movs	r2, #129	; 0x81
 8004c4a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c52:	4618      	mov	r0, r3
 8004c54:	f001 fd64 	bl	8006720 <SDMMC_CmdReadSingleBlock>
 8004c58:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d012      	beq.n	8004c86 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a0d      	ldr	r2, [pc, #52]	; (8004c9c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004c66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e002      	b.n	8004c8c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e000      	b.n	8004c8c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8004c8a:	2302      	movs	r3, #2
  }
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3730      	adds	r7, #48	; 0x30
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	080056a7 	.word	0x080056a7
 8004c98:	08005719 	.word	0x08005719
 8004c9c:	004005ff 	.word	0x004005ff
 8004ca0:	4225858c 	.word	0x4225858c

08004ca4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08c      	sub	sp, #48	; 0x30
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d107      	bne.n	8004ccc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0ce      	b.n	8004e6a <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	f040 80c7 	bne.w	8004e68 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004ce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	441a      	add	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d907      	bls.n	8004cfe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e0b5      	b.n	8004e6a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2203      	movs	r2, #3
 8004d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	6812      	ldr	r2, [r2, #0]
 8004d18:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004d1c:	f043 0302 	orr.w	r3, r3, #2
 8004d20:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d26:	4a53      	ldr	r2, [pc, #332]	; (8004e74 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8004d28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2e:	4a52      	ldr	r2, [pc, #328]	; (8004e78 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8004d30:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d36:	2200      	movs	r2, #0
 8004d38:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d002      	beq.n	8004d48 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d44:	025b      	lsls	r3, r3, #9
 8004d46:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d50:	4618      	mov	r0, r3
 8004d52:	f001 fcc3 	bl	80066dc <SDMMC_CmdBlockLength>
 8004d56:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00f      	beq.n	8004d7e <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a46      	ldr	r2, [pc, #280]	; (8004e7c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004d64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e075      	b.n	8004e6a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d90a      	bls.n	8004d9a <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	22a0      	movs	r2, #160	; 0xa0
 8004d88:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d90:	4618      	mov	r0, r3
 8004d92:	f001 fd2b 	bl	80067ec <SDMMC_CmdWriteMultiBlock>
 8004d96:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004d98:	e009      	b.n	8004dae <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2290      	movs	r2, #144	; 0x90
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004da6:	4618      	mov	r0, r3
 8004da8:	f001 fcfe 	bl	80067a8 <SDMMC_CmdWriteSingleBlock>
 8004dac:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d012      	beq.n	8004dda <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a30      	ldr	r2, [pc, #192]	; (8004e7c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004dba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e047      	b.n	8004e6a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004dda:	4b29      	ldr	r3, [pc, #164]	; (8004e80 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3380      	adds	r3, #128	; 0x80
 8004dec:	461a      	mov	r2, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	025b      	lsls	r3, r3, #9
 8004df2:	089b      	lsrs	r3, r3, #2
 8004df4:	f7fd fb50 	bl	8002498 <HAL_DMA_Start_IT>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01c      	beq.n	8004e38 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8004e0c:	f023 0302 	bic.w	r3, r3, #2
 8004e10:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a19      	ldr	r2, [pc, #100]	; (8004e7c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004e18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e018      	b.n	8004e6a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004e38:	f04f 33ff 	mov.w	r3, #4294967295
 8004e3c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	025b      	lsls	r3, r3, #9
 8004e42:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004e44:	2390      	movs	r3, #144	; 0x90
 8004e46:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004e50:	2301      	movs	r3, #1
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f107 0210 	add.w	r2, r7, #16
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f001 fc10 	bl	8006684 <SDIO_ConfigData>

      return HAL_OK;
 8004e64:	2300      	movs	r3, #0
 8004e66:	e000      	b.n	8004e6a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004e68:	2302      	movs	r3, #2
  }
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3730      	adds	r7, #48	; 0x30
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	0800567d 	.word	0x0800567d
 8004e78:	08005719 	.word	0x08005719
 8004e7c:	004005ff 	.word	0x004005ff
 8004e80:	4225858c 	.word	0x4225858c

08004e84 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d008      	beq.n	8004eb2 <HAL_SD_IRQHandler+0x2e>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 ffd8 	bl	8005e60 <SD_Read_IT>
 8004eb0:	e165      	b.n	800517e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 808f 	beq.w	8004fe0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004eca:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6812      	ldr	r2, [r2, #0]
 8004ed6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8004eda:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004ede:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0201 	bic.w	r2, r2, #1
 8004eee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d039      	beq.n	8004f6e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d104      	bne.n	8004f0e <HAL_SD_IRQHandler+0x8a>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d011      	beq.n	8004f32 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f001 fc8c 	bl	8006830 <SDMMC_CmdStopTransfer>
 8004f18:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d008      	beq.n	8004f32 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f92f 	bl	8005190 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f240 523a 	movw	r2, #1338	; 0x53a
 8004f3a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d104      	bne.n	8004f5e <HAL_SD_IRQHandler+0xda>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f003 fc10 	bl	8008784 <HAL_SD_RxCpltCallback>
 8004f64:	e10b      	b.n	800517e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f003 fc02 	bl	8008770 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f6c:	e107      	b.n	800517e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8102 	beq.w	800517e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d011      	beq.n	8004fa8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f001 fc51 	bl	8006830 <SDMMC_CmdStopTransfer>
 8004f8e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d008      	beq.n	8004fa8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f8f4 	bl	8005190 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f040 80e5 	bne.w	800517e <HAL_SD_IRQHandler+0x2fa>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f040 80df 	bne.w	800517e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0208 	bic.w	r2, r2, #8
 8004fce:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f003 fbc9 	bl	8008770 <HAL_SD_TxCpltCallback>
}
 8004fde:	e0ce      	b.n	800517e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d008      	beq.n	8005000 <HAL_SD_IRQHandler+0x17c>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 ff82 	bl	8005f02 <SD_Write_IT>
 8004ffe:	e0be      	b.n	800517e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005006:	f240 233a 	movw	r3, #570	; 0x23a
 800500a:	4013      	ands	r3, r2
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 80b6 	beq.w	800517e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	f043 0202 	orr.w	r2, r3, #2
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503e:	f043 0208 	orr.w	r2, r3, #8
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504c:	f003 0320 	and.w	r3, r3, #32
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	f043 0220 	orr.w	r2, r3, #32
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005066:	f003 0310 	and.w	r3, r3, #16
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	f043 0210 	orr.w	r2, r3, #16
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005084:	2b00      	cmp	r3, #0
 8005086:	d005      	beq.n	8005094 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508c:	f043 0208 	orr.w	r2, r3, #8
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f240 723a 	movw	r2, #1850	; 0x73a
 800509c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	6812      	ldr	r2, [r2, #0]
 80050a8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80050ac:	f023 0302 	bic.w	r3, r3, #2
 80050b0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f001 fbba 	bl	8006830 <SDMMC_CmdStopTransfer>
 80050bc:	4602      	mov	r2, r0
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f003 0308 	and.w	r3, r3, #8
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f855 	bl	8005190 <HAL_SD_ErrorCallback>
}
 80050e6:	e04a      	b.n	800517e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d045      	beq.n	800517e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f003 0310 	and.w	r3, r3, #16
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d104      	bne.n	8005106 <HAL_SD_IRQHandler+0x282>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f003 0320 	and.w	r3, r3, #32
 8005102:	2b00      	cmp	r3, #0
 8005104:	d011      	beq.n	800512a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510a:	4a1f      	ldr	r2, [pc, #124]	; (8005188 <HAL_SD_IRQHandler+0x304>)
 800510c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005112:	4618      	mov	r0, r3
 8005114:	f7fd fa18 	bl	8002548 <HAL_DMA_Abort_IT>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d02f      	beq.n	800517e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fb4a 	bl	80057bc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005128:	e029      	b.n	800517e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d104      	bne.n	800513e <HAL_SD_IRQHandler+0x2ba>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d011      	beq.n	8005162 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	4a12      	ldr	r2, [pc, #72]	; (800518c <HAL_SD_IRQHandler+0x308>)
 8005144:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	4618      	mov	r0, r3
 800514c:	f7fd f9fc 	bl	8002548 <HAL_DMA_Abort_IT>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d013      	beq.n	800517e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fb65 	bl	800582a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005160:	e00d      	b.n	800517e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f003 faf0 	bl	800875c <HAL_SD_AbortCallback>
}
 800517c:	e7ff      	b.n	800517e <HAL_SD_IRQHandler+0x2fa>
 800517e:	bf00      	nop
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	080057bd 	.word	0x080057bd
 800518c:	0800582b 	.word	0x0800582b

08005190 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051b2:	0f9b      	lsrs	r3, r3, #30
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051be:	0e9b      	lsrs	r3, r3, #26
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051d0:	0e1b      	lsrs	r3, r3, #24
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051e2:	0c1b      	lsrs	r3, r3, #16
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ee:	0a1b      	lsrs	r3, r3, #8
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005204:	0d1b      	lsrs	r3, r3, #20
 8005206:	b29a      	uxth	r2, r3
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005210:	0c1b      	lsrs	r3, r3, #16
 8005212:	b2db      	uxtb	r3, r3
 8005214:	f003 030f 	and.w	r3, r3, #15
 8005218:	b2da      	uxtb	r2, r3
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005222:	0bdb      	lsrs	r3, r3, #15
 8005224:	b2db      	uxtb	r3, r3
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	b2da      	uxtb	r2, r3
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005234:	0b9b      	lsrs	r3, r3, #14
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	b2da      	uxtb	r2, r3
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005246:	0b5b      	lsrs	r3, r3, #13
 8005248:	b2db      	uxtb	r3, r3
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	b2da      	uxtb	r2, r3
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005258:	0b1b      	lsrs	r3, r3, #12
 800525a:	b2db      	uxtb	r3, r3
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	b2da      	uxtb	r2, r3
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2200      	movs	r2, #0
 800526a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005270:	2b00      	cmp	r3, #0
 8005272:	d163      	bne.n	800533c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005278:	009a      	lsls	r2, r3, #2
 800527a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800527e:	4013      	ands	r3, r2
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005284:	0f92      	lsrs	r2, r2, #30
 8005286:	431a      	orrs	r2, r3
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005290:	0edb      	lsrs	r3, r3, #27
 8005292:	b2db      	uxtb	r3, r3
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	b2da      	uxtb	r2, r3
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052a2:	0e1b      	lsrs	r3, r3, #24
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052b4:	0d5b      	lsrs	r3, r3, #21
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c6:	0c9b      	lsrs	r3, r3, #18
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d8:	0bdb      	lsrs	r3, r3, #15
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	7e1b      	ldrb	r3, [r3, #24]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	3302      	adds	r3, #2
 80052fc:	2201      	movs	r2, #1
 80052fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005306:	fb02 f203 	mul.w	r2, r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	7a1b      	ldrb	r3, [r3, #8]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f003 030f 	and.w	r3, r3, #15
 8005318:	2201      	movs	r2, #1
 800531a:	409a      	lsls	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005328:	0a52      	lsrs	r2, r2, #9
 800532a:	fb02 f203 	mul.w	r2, r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005338:	661a      	str	r2, [r3, #96]	; 0x60
 800533a:	e031      	b.n	80053a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005340:	2b01      	cmp	r3, #1
 8005342:	d11d      	bne.n	8005380 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005348:	041b      	lsls	r3, r3, #16
 800534a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005352:	0c1b      	lsrs	r3, r3, #16
 8005354:	431a      	orrs	r2, r3
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	3301      	adds	r3, #1
 8005360:	029a      	lsls	r2, r3, #10
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005374:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	661a      	str	r2, [r3, #96]	; 0x60
 800537e:	e00f      	b.n	80053a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a58      	ldr	r2, [pc, #352]	; (80054e8 <HAL_SD_GetCardCSD+0x344>)
 8005386:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e09d      	b.n	80054dc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053a4:	0b9b      	lsrs	r3, r3, #14
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b6:	09db      	lsrs	r3, r3, #7
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d8:	0fdb      	lsrs	r3, r3, #31
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e4:	0f5b      	lsrs	r3, r3, #29
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f6:	0e9b      	lsrs	r3, r3, #26
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005408:	0d9b      	lsrs	r3, r3, #22
 800540a:	b2db      	uxtb	r3, r3
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	b2da      	uxtb	r2, r3
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541a:	0d5b      	lsrs	r3, r3, #21
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	b2da      	uxtb	r2, r3
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005436:	0c1b      	lsrs	r3, r3, #16
 8005438:	b2db      	uxtb	r3, r3
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	b2da      	uxtb	r2, r3
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544a:	0bdb      	lsrs	r3, r3, #15
 800544c:	b2db      	uxtb	r3, r3
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	b2da      	uxtb	r2, r3
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545e:	0b9b      	lsrs	r3, r3, #14
 8005460:	b2db      	uxtb	r3, r3
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	b2da      	uxtb	r2, r3
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005472:	0b5b      	lsrs	r3, r3, #13
 8005474:	b2db      	uxtb	r3, r3
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	b2da      	uxtb	r2, r3
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005486:	0b1b      	lsrs	r3, r3, #12
 8005488:	b2db      	uxtb	r3, r3
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	b2da      	uxtb	r2, r3
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549a:	0a9b      	lsrs	r3, r3, #10
 800549c:	b2db      	uxtb	r3, r3
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ae:	0a1b      	lsrs	r3, r3, #8
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c2:	085b      	lsrs	r3, r3, #1
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	004005ff 	.word	0x004005ff

080054ec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005544:	b5b0      	push	{r4, r5, r7, lr}
 8005546:	b08e      	sub	sp, #56	; 0x38
 8005548:	af04      	add	r7, sp, #16
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2203      	movs	r2, #3
 8005552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555a:	2b03      	cmp	r3, #3
 800555c:	d02e      	beq.n	80055bc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005564:	d106      	bne.n	8005574 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	639a      	str	r2, [r3, #56]	; 0x38
 8005572:	e029      	b.n	80055c8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800557a:	d10a      	bne.n	8005592 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fb0f 	bl	8005ba0 <SD_WideBus_Enable>
 8005582:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	639a      	str	r2, [r3, #56]	; 0x38
 8005590:	e01a      	b.n	80055c8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10a      	bne.n	80055ae <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fb4c 	bl	8005c36 <SD_WideBus_Disable>
 800559e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	639a      	str	r2, [r3, #56]	; 0x38
 80055ac:	e00c      	b.n	80055c8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	639a      	str	r2, [r3, #56]	; 0x38
 80055ba:	e005      	b.n	80055c8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d009      	beq.n	80055e4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a18      	ldr	r2, [pc, #96]	; (8005638 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80055d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e024      	b.n	800562e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681d      	ldr	r5, [r3, #0]
 800560a:	466c      	mov	r4, sp
 800560c:	f107 0318 	add.w	r3, r7, #24
 8005610:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005618:	f107 030c 	add.w	r3, r7, #12
 800561c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800561e:	4628      	mov	r0, r5
 8005620:	f000 ff80 	bl	8006524 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3728      	adds	r7, #40	; 0x28
 8005632:	46bd      	mov	sp, r7
 8005634:	bdb0      	pop	{r4, r5, r7, pc}
 8005636:	bf00      	nop
 8005638:	004005ff 	.word	0x004005ff

0800563c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005648:	f107 030c 	add.w	r3, r7, #12
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fa7e 	bl	8005b50 <SD_SendStatus>
 8005654:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d005      	beq.n	8005668 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	0a5b      	lsrs	r3, r3, #9
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005672:	693b      	ldr	r3, [r7, #16]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005688:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005698:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800569a:	bf00      	nop
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b084      	sub	sp, #16
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	2b82      	cmp	r3, #130	; 0x82
 80056ba:	d111      	bne.n	80056e0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f001 f8b5 	bl	8006830 <SDMMC_CmdStopTransfer>
 80056c6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d008      	beq.n	80056e0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	431a      	orrs	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f7ff fd58 	bl	8005190 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0208 	bic.w	r2, r2, #8
 80056ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f240 523a 	movw	r2, #1338	; 0x53a
 80056f8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f003 f83b 	bl	8008784 <HAL_SD_RxCpltCallback>
#endif
}
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005724:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7fd f8ba 	bl	80028a0 <HAL_DMA_GetError>
 800572c:	4603      	mov	r3, r0
 800572e:	2b02      	cmp	r3, #2
 8005730:	d03e      	beq.n	80057b0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005738:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005740:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d002      	beq.n	800574e <SD_DMAError+0x36>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d12d      	bne.n	80057aa <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a19      	ldr	r2, [pc, #100]	; (80057b8 <SD_DMAError+0xa0>)
 8005754:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005764:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005772:	6978      	ldr	r0, [r7, #20]
 8005774:	f7ff ff62 	bl	800563c <HAL_SD_GetCardState>
 8005778:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b06      	cmp	r3, #6
 800577e:	d002      	beq.n	8005786 <SD_DMAError+0x6e>
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b05      	cmp	r3, #5
 8005784:	d10a      	bne.n	800579c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f001 f850 	bl	8006830 <SDMMC_CmdStopTransfer>
 8005790:	4602      	mov	r2, r0
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005796:	431a      	orrs	r2, r3
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	2200      	movs	r2, #0
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80057aa:	6978      	ldr	r0, [r7, #20]
 80057ac:	f7ff fcf0 	bl	8005190 <HAL_SD_ErrorCallback>
#endif
  }
}
 80057b0:	bf00      	nop
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	004005ff 	.word	0x004005ff

080057bc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f240 523a 	movw	r2, #1338	; 0x53a
 80057d2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f7ff ff31 	bl	800563c <HAL_SD_GetCardState>
 80057da:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2b06      	cmp	r3, #6
 80057ee:	d002      	beq.n	80057f6 <SD_DMATxAbort+0x3a>
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2b05      	cmp	r3, #5
 80057f4:	d10a      	bne.n	800580c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f001 f818 	bl	8006830 <SDMMC_CmdStopTransfer>
 8005800:	4602      	mov	r2, r0
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005806:	431a      	orrs	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	2b00      	cmp	r3, #0
 8005812:	d103      	bne.n	800581c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f002 ffa1 	bl	800875c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800581a:	e002      	b.n	8005822 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f7ff fcb7 	bl	8005190 <HAL_SD_ErrorCallback>
}
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005836:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005840:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f7ff fefa 	bl	800563c <HAL_SD_GetCardState>
 8005848:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b06      	cmp	r3, #6
 800585c:	d002      	beq.n	8005864 <SD_DMARxAbort+0x3a>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b05      	cmp	r3, #5
 8005862:	d10a      	bne.n	800587a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4618      	mov	r0, r3
 800586a:	f000 ffe1 	bl	8006830 <SDMMC_CmdStopTransfer>
 800586e:	4602      	mov	r2, r0
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005874:	431a      	orrs	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587e:	2b00      	cmp	r3, #0
 8005880:	d103      	bne.n	800588a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f002 ff6a 	bl	800875c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005888:	e002      	b.n	8005890 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f7ff fc80 	bl	8005190 <HAL_SD_ErrorCallback>
}
 8005890:	bf00      	nop
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005898:	b5b0      	push	{r4, r5, r7, lr}
 800589a:	b094      	sub	sp, #80	; 0x50
 800589c:	af04      	add	r7, sp, #16
 800589e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80058a0:	2301      	movs	r3, #1
 80058a2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fe93 	bl	80065d4 <SDIO_GetPowerState>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d102      	bne.n	80058ba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80058b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80058b8:	e0b7      	b.n	8005a2a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d02f      	beq.n	8005922 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f001 f8bc 	bl	8006a44 <SDMMC_CmdSendCID>
 80058cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80058ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <SD_InitCard+0x40>
    {
      return errorstate;
 80058d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d6:	e0a8      	b.n	8005a2a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2100      	movs	r1, #0
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 febd 	bl	800665e <SDIO_GetResponse>
 80058e4:	4602      	mov	r2, r0
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2104      	movs	r1, #4
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 feb4 	bl	800665e <SDIO_GetResponse>
 80058f6:	4602      	mov	r2, r0
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2108      	movs	r1, #8
 8005902:	4618      	mov	r0, r3
 8005904:	f000 feab 	bl	800665e <SDIO_GetResponse>
 8005908:	4602      	mov	r2, r0
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	210c      	movs	r1, #12
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fea2 	bl	800665e <SDIO_GetResponse>
 800591a:	4602      	mov	r2, r0
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005926:	2b03      	cmp	r3, #3
 8005928:	d00d      	beq.n	8005946 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f107 020e 	add.w	r2, r7, #14
 8005932:	4611      	mov	r1, r2
 8005934:	4618      	mov	r0, r3
 8005936:	f001 f8c2 	bl	8006abe <SDMMC_CmdSetRelAdd>
 800593a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800593c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <SD_InitCard+0xae>
    {
      return errorstate;
 8005942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005944:	e071      	b.n	8005a2a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594a:	2b03      	cmp	r3, #3
 800594c:	d036      	beq.n	80059bc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800594e:	89fb      	ldrh	r3, [r7, #14]
 8005950:	461a      	mov	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595e:	041b      	lsls	r3, r3, #16
 8005960:	4619      	mov	r1, r3
 8005962:	4610      	mov	r0, r2
 8005964:	f001 f88c 	bl	8006a80 <SDMMC_CmdSendCSD>
 8005968:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800596a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005972:	e05a      	b.n	8005a2a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2100      	movs	r1, #0
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fe6f 	bl	800665e <SDIO_GetResponse>
 8005980:	4602      	mov	r2, r0
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2104      	movs	r1, #4
 800598c:	4618      	mov	r0, r3
 800598e:	f000 fe66 	bl	800665e <SDIO_GetResponse>
 8005992:	4602      	mov	r2, r0
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2108      	movs	r1, #8
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fe5d 	bl	800665e <SDIO_GetResponse>
 80059a4:	4602      	mov	r2, r0
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	210c      	movs	r1, #12
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 fe54 	bl	800665e <SDIO_GetResponse>
 80059b6:	4602      	mov	r2, r0
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2104      	movs	r1, #4
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fe4b 	bl	800665e <SDIO_GetResponse>
 80059c8:	4603      	mov	r3, r0
 80059ca:	0d1a      	lsrs	r2, r3, #20
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80059d0:	f107 0310 	add.w	r3, r7, #16
 80059d4:	4619      	mov	r1, r3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7ff fbe4 	bl	80051a4 <HAL_SD_GetCardCSD>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d002      	beq.n	80059e8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80059e6:	e020      	b.n	8005a2a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6819      	ldr	r1, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f0:	041b      	lsls	r3, r3, #16
 80059f2:	f04f 0400 	mov.w	r4, #0
 80059f6:	461a      	mov	r2, r3
 80059f8:	4623      	mov	r3, r4
 80059fa:	4608      	mov	r0, r1
 80059fc:	f000 ff3a 	bl	8006874 <SDMMC_CmdSelDesel>
 8005a00:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <SD_InitCard+0x174>
  {
    return errorstate;
 8005a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0a:	e00e      	b.n	8005a2a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681d      	ldr	r5, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	466c      	mov	r4, sp
 8005a14:	f103 0210 	add.w	r2, r3, #16
 8005a18:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a1e:	3304      	adds	r3, #4
 8005a20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a22:	4628      	mov	r0, r5
 8005a24:	f000 fd7e 	bl	8006524 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3740      	adds	r7, #64	; 0x40
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005a34 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	2300      	movs	r3, #0
 8005a46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 ff34 	bl	80068ba <SDMMC_CmdGoIdleState>
 8005a52:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <SD_PowerON+0x2a>
  {
    return errorstate;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	e072      	b.n	8005b44 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 ff47 	bl	80068f6 <SDMMC_CmdOperCond>
 8005a68:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00d      	beq.n	8005a8c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 ff1d 	bl	80068ba <SDMMC_CmdGoIdleState>
 8005a80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d004      	beq.n	8005a92 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	e05b      	b.n	8005b44 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d137      	bne.n	8005b0a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 ff47 	bl	8006934 <SDMMC_CmdAppCommand>
 8005aa6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d02d      	beq.n	8005b0a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005aae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ab2:	e047      	b.n	8005b44 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2100      	movs	r1, #0
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 ff3a 	bl	8006934 <SDMMC_CmdAppCommand>
 8005ac0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <SD_PowerON+0x98>
    {
      return errorstate;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	e03b      	b.n	8005b44 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	491e      	ldr	r1, [pc, #120]	; (8005b4c <SD_PowerON+0x118>)
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 ff50 	bl	8006978 <SDMMC_CmdAppOperCommand>
 8005ad8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ae0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ae4:	e02e      	b.n	8005b44 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2100      	movs	r1, #0
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fdb6 	bl	800665e <SDIO_GetResponse>
 8005af2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	0fdb      	lsrs	r3, r3, #31
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d101      	bne.n	8005b00 <SD_PowerON+0xcc>
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <SD_PowerON+0xce>
 8005b00:	2300      	movs	r3, #0
 8005b02:	613b      	str	r3, [r7, #16]

    count++;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	3301      	adds	r3, #1
 8005b08:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d802      	bhi.n	8005b1a <SD_PowerON+0xe6>
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0cc      	beq.n	8005ab4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d902      	bls.n	8005b2a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005b24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b28:	e00c      	b.n	8005b44 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d003      	beq.n	8005b3c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	645a      	str	r2, [r3, #68]	; 0x44
 8005b3a:	e002      	b.n	8005b42 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	c1100000 	.word	0xc1100000

08005b50 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d102      	bne.n	8005b66 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005b60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b64:	e018      	b.n	8005b98 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6e:	041b      	lsls	r3, r3, #16
 8005b70:	4619      	mov	r1, r3
 8005b72:	4610      	mov	r0, r2
 8005b74:	f000 ffc4 	bl	8006b00 <SDMMC_CmdSendStatus>
 8005b78:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	e009      	b.n	8005b98 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2100      	movs	r1, #0
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fd67 	bl	800665e <SDIO_GetResponse>
 8005b90:	4602      	mov	r2, r0
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	2300      	movs	r3, #0
 8005bae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fd51 	bl	800665e <SDIO_GetResponse>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bc6:	d102      	bne.n	8005bce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005bc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bcc:	e02f      	b.n	8005c2e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005bce:	f107 030c 	add.w	r3, r7, #12
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f879 	bl	8005ccc <SD_FindSCR>
 8005bda:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	e023      	b.n	8005c2e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01c      	beq.n	8005c2a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf8:	041b      	lsls	r3, r3, #16
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	f000 fe99 	bl	8006934 <SDMMC_CmdAppCommand>
 8005c02:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	e00f      	b.n	8005c2e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2102      	movs	r1, #2
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 fed2 	bl	80069be <SDMMC_CmdBusWidth>
 8005c1a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	e003      	b.n	8005c2e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e001      	b.n	8005c2e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b086      	sub	sp, #24
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	2300      	movs	r3, #0
 8005c44:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 fd06 	bl	800665e <SDIO_GetResponse>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c5c:	d102      	bne.n	8005c64 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c62:	e02f      	b.n	8005cc4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005c64:	f107 030c 	add.w	r3, r7, #12
 8005c68:	4619      	mov	r1, r3
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f82e 	bl	8005ccc <SD_FindSCR>
 8005c70:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	e023      	b.n	8005cc4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d01c      	beq.n	8005cc0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c8e:	041b      	lsls	r3, r3, #16
 8005c90:	4619      	mov	r1, r3
 8005c92:	4610      	mov	r0, r2
 8005c94:	f000 fe4e 	bl	8006934 <SDMMC_CmdAppCommand>
 8005c98:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	e00f      	b.n	8005cc4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2100      	movs	r1, #0
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fe87 	bl	80069be <SDMMC_CmdBusWidth>
 8005cb0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	e003      	b.n	8005cc4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e001      	b.n	8005cc4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005cc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005ccc:	b590      	push	{r4, r7, lr}
 8005cce:	b08f      	sub	sp, #60	; 0x3c
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005cd6:	f7fb fe07 	bl	80018e8 <HAL_GetTick>
 8005cda:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60bb      	str	r3, [r7, #8]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2108      	movs	r1, #8
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fcf2 	bl	80066dc <SDMMC_CmdBlockLength>
 8005cf8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d02:	e0a9      	b.n	8005e58 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0c:	041b      	lsls	r3, r3, #16
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4610      	mov	r0, r2
 8005d12:	f000 fe0f 	bl	8006934 <SDMMC_CmdAppCommand>
 8005d16:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	e09a      	b.n	8005e58 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d22:	f04f 33ff 	mov.w	r3, #4294967295
 8005d26:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005d28:	2308      	movs	r3, #8
 8005d2a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005d2c:	2330      	movs	r3, #48	; 0x30
 8005d2e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005d30:	2302      	movs	r3, #2
 8005d32:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f107 0210 	add.w	r2, r7, #16
 8005d44:	4611      	mov	r1, r2
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 fc9c 	bl	8006684 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 fe56 	bl	8006a02 <SDMMC_CmdSendSCR>
 8005d56:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d022      	beq.n	8005da4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8005d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d60:	e07a      	b.n	8005e58 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00e      	beq.n	8005d8e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6819      	ldr	r1, [r3, #0]
 8005d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	f107 0208 	add.w	r2, r7, #8
 8005d7c:	18d4      	adds	r4, r2, r3
 8005d7e:	4608      	mov	r0, r1
 8005d80:	f000 fbfb 	bl	800657a <SDIO_ReadFIFO>
 8005d84:	4603      	mov	r3, r0
 8005d86:	6023      	str	r3, [r4, #0]
      index++;
 8005d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005d8e:	f7fb fdab 	bl	80018e8 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9c:	d102      	bne.n	8005da4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005d9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005da2:	e059      	b.n	8005e58 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005daa:	f240 432a 	movw	r3, #1066	; 0x42a
 8005dae:	4013      	ands	r3, r2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0d6      	beq.n	8005d62 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d005      	beq.n	8005dce <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2208      	movs	r2, #8
 8005dc8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005dca:	2308      	movs	r3, #8
 8005dcc:	e044      	b.n	8005e58 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d005      	beq.n	8005de8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2202      	movs	r2, #2
 8005de2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005de4:	2302      	movs	r3, #2
 8005de6:	e037      	b.n	8005e58 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d005      	beq.n	8005e02 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005dfe:	2320      	movs	r3, #32
 8005e00:	e02a      	b.n	8005e58 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f240 523a 	movw	r2, #1338	; 0x53a
 8005e0a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	061a      	lsls	r2, r3, #24
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	021b      	lsls	r3, r3, #8
 8005e14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e18:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	0a1b      	lsrs	r3, r3, #8
 8005e1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e22:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	0e1b      	lsrs	r3, r3, #24
 8005e28:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2c:	601a      	str	r2, [r3, #0]
    scr++;
 8005e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e30:	3304      	adds	r3, #4
 8005e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	061a      	lsls	r2, r3, #24
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e40:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	0a1b      	lsrs	r3, r3, #8
 8005e46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e4a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	0e1b      	lsrs	r3, r3, #24
 8005e50:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e54:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	373c      	adds	r7, #60	; 0x3c
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd90      	pop	{r4, r7, pc}

08005e60 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d03f      	beq.n	8005efa <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	e033      	b.n	8005ee8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 fb78 	bl	800657a <SDIO_ReadFIFO>
 8005e8a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3301      	adds	r3, #1
 8005e98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	0a1b      	lsrs	r3, r3, #8
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	3301      	adds	r3, #1
 8005eae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	0c1b      	lsrs	r3, r3, #16
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	0e1b      	lsrs	r3, r3, #24
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2b07      	cmp	r3, #7
 8005eec:	d9c8      	bls.n	8005e80 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005efa:	bf00      	nop
 8005efc:	3718      	adds	r7, #24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b086      	sub	sp, #24
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d043      	beq.n	8005fa4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	e037      	b.n	8005f92 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	021a      	lsls	r2, r3, #8
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	3301      	adds	r3, #1
 8005f44:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	041a      	lsls	r2, r3, #16
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	061a      	lsls	r2, r3, #24
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3301      	adds	r3, #1
 8005f74:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f107 0208 	add.w	r2, r7, #8
 8005f84:	4611      	mov	r1, r2
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fb04 	bl	8006594 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2b07      	cmp	r3, #7
 8005f96:	d9c4      	bls.n	8005f22 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005fa4:	bf00      	nop
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e01d      	b.n	8005ffa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fb fb34 	bl	8001640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4610      	mov	r0, r2
 8005fec:	f000 f8e4 	bl	80061b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006002:	b480      	push	{r7}
 8006004:	b085      	sub	sp, #20
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2202      	movs	r2, #2
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 0307 	and.w	r3, r3, #7
 800601c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b06      	cmp	r3, #6
 8006022:	d007      	beq.n	8006034 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b084      	sub	sp, #16
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_TIM_ConfigClockSource+0x18>
 800605e:	2302      	movs	r3, #2
 8006060:	e0a6      	b.n	80061b0 <HAL_TIM_ConfigClockSource+0x166>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2202      	movs	r2, #2
 800606e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006080:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006088:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b40      	cmp	r3, #64	; 0x40
 8006098:	d067      	beq.n	800616a <HAL_TIM_ConfigClockSource+0x120>
 800609a:	2b40      	cmp	r3, #64	; 0x40
 800609c:	d80b      	bhi.n	80060b6 <HAL_TIM_ConfigClockSource+0x6c>
 800609e:	2b10      	cmp	r3, #16
 80060a0:	d073      	beq.n	800618a <HAL_TIM_ConfigClockSource+0x140>
 80060a2:	2b10      	cmp	r3, #16
 80060a4:	d802      	bhi.n	80060ac <HAL_TIM_ConfigClockSource+0x62>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d06f      	beq.n	800618a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80060aa:	e078      	b.n	800619e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060ac:	2b20      	cmp	r3, #32
 80060ae:	d06c      	beq.n	800618a <HAL_TIM_ConfigClockSource+0x140>
 80060b0:	2b30      	cmp	r3, #48	; 0x30
 80060b2:	d06a      	beq.n	800618a <HAL_TIM_ConfigClockSource+0x140>
      break;
 80060b4:	e073      	b.n	800619e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060b6:	2b70      	cmp	r3, #112	; 0x70
 80060b8:	d00d      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x8c>
 80060ba:	2b70      	cmp	r3, #112	; 0x70
 80060bc:	d804      	bhi.n	80060c8 <HAL_TIM_ConfigClockSource+0x7e>
 80060be:	2b50      	cmp	r3, #80	; 0x50
 80060c0:	d033      	beq.n	800612a <HAL_TIM_ConfigClockSource+0xe0>
 80060c2:	2b60      	cmp	r3, #96	; 0x60
 80060c4:	d041      	beq.n	800614a <HAL_TIM_ConfigClockSource+0x100>
      break;
 80060c6:	e06a      	b.n	800619e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060cc:	d066      	beq.n	800619c <HAL_TIM_ConfigClockSource+0x152>
 80060ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060d2:	d017      	beq.n	8006104 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80060d4:	e063      	b.n	800619e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6818      	ldr	r0, [r3, #0]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	6899      	ldr	r1, [r3, #8]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f000 f981 	bl	80063ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	609a      	str	r2, [r3, #8]
      break;
 8006102:	e04c      	b.n	800619e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6818      	ldr	r0, [r3, #0]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	6899      	ldr	r1, [r3, #8]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f000 f96a 	bl	80063ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689a      	ldr	r2, [r3, #8]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006126:	609a      	str	r2, [r3, #8]
      break;
 8006128:	e039      	b.n	800619e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6818      	ldr	r0, [r3, #0]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	6859      	ldr	r1, [r3, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	461a      	mov	r2, r3
 8006138:	f000 f8de 	bl	80062f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2150      	movs	r1, #80	; 0x50
 8006142:	4618      	mov	r0, r3
 8006144:	f000 f937 	bl	80063b6 <TIM_ITRx_SetConfig>
      break;
 8006148:	e029      	b.n	800619e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6818      	ldr	r0, [r3, #0]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	6859      	ldr	r1, [r3, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	461a      	mov	r2, r3
 8006158:	f000 f8fd 	bl	8006356 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2160      	movs	r1, #96	; 0x60
 8006162:	4618      	mov	r0, r3
 8006164:	f000 f927 	bl	80063b6 <TIM_ITRx_SetConfig>
      break;
 8006168:	e019      	b.n	800619e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6818      	ldr	r0, [r3, #0]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	6859      	ldr	r1, [r3, #4]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	461a      	mov	r2, r3
 8006178:	f000 f8be 	bl	80062f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2140      	movs	r1, #64	; 0x40
 8006182:	4618      	mov	r0, r3
 8006184:	f000 f917 	bl	80063b6 <TIM_ITRx_SetConfig>
      break;
 8006188:	e009      	b.n	800619e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4619      	mov	r1, r3
 8006194:	4610      	mov	r0, r2
 8006196:	f000 f90e 	bl	80063b6 <TIM_ITRx_SetConfig>
      break;
 800619a:	e000      	b.n	800619e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800619c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a40      	ldr	r2, [pc, #256]	; (80062cc <TIM_Base_SetConfig+0x114>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d013      	beq.n	80061f8 <TIM_Base_SetConfig+0x40>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d6:	d00f      	beq.n	80061f8 <TIM_Base_SetConfig+0x40>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a3d      	ldr	r2, [pc, #244]	; (80062d0 <TIM_Base_SetConfig+0x118>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d00b      	beq.n	80061f8 <TIM_Base_SetConfig+0x40>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a3c      	ldr	r2, [pc, #240]	; (80062d4 <TIM_Base_SetConfig+0x11c>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d007      	beq.n	80061f8 <TIM_Base_SetConfig+0x40>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a3b      	ldr	r2, [pc, #236]	; (80062d8 <TIM_Base_SetConfig+0x120>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d003      	beq.n	80061f8 <TIM_Base_SetConfig+0x40>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a3a      	ldr	r2, [pc, #232]	; (80062dc <TIM_Base_SetConfig+0x124>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d108      	bne.n	800620a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	4313      	orrs	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a2f      	ldr	r2, [pc, #188]	; (80062cc <TIM_Base_SetConfig+0x114>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d02b      	beq.n	800626a <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006218:	d027      	beq.n	800626a <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a2c      	ldr	r2, [pc, #176]	; (80062d0 <TIM_Base_SetConfig+0x118>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d023      	beq.n	800626a <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a2b      	ldr	r2, [pc, #172]	; (80062d4 <TIM_Base_SetConfig+0x11c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d01f      	beq.n	800626a <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a2a      	ldr	r2, [pc, #168]	; (80062d8 <TIM_Base_SetConfig+0x120>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d01b      	beq.n	800626a <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a29      	ldr	r2, [pc, #164]	; (80062dc <TIM_Base_SetConfig+0x124>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d017      	beq.n	800626a <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a28      	ldr	r2, [pc, #160]	; (80062e0 <TIM_Base_SetConfig+0x128>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d013      	beq.n	800626a <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a27      	ldr	r2, [pc, #156]	; (80062e4 <TIM_Base_SetConfig+0x12c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00f      	beq.n	800626a <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a26      	ldr	r2, [pc, #152]	; (80062e8 <TIM_Base_SetConfig+0x130>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00b      	beq.n	800626a <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a25      	ldr	r2, [pc, #148]	; (80062ec <TIM_Base_SetConfig+0x134>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d007      	beq.n	800626a <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a24      	ldr	r2, [pc, #144]	; (80062f0 <TIM_Base_SetConfig+0x138>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d003      	beq.n	800626a <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a23      	ldr	r2, [pc, #140]	; (80062f4 <TIM_Base_SetConfig+0x13c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d108      	bne.n	800627c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4313      	orrs	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	4313      	orrs	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	689a      	ldr	r2, [r3, #8]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a0a      	ldr	r2, [pc, #40]	; (80062cc <TIM_Base_SetConfig+0x114>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d003      	beq.n	80062b0 <TIM_Base_SetConfig+0xf8>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a0c      	ldr	r2, [pc, #48]	; (80062dc <TIM_Base_SetConfig+0x124>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d103      	bne.n	80062b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	691a      	ldr	r2, [r3, #16]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	615a      	str	r2, [r3, #20]
}
 80062be:	bf00      	nop
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	40010000 	.word	0x40010000
 80062d0:	40000400 	.word	0x40000400
 80062d4:	40000800 	.word	0x40000800
 80062d8:	40000c00 	.word	0x40000c00
 80062dc:	40010400 	.word	0x40010400
 80062e0:	40014000 	.word	0x40014000
 80062e4:	40014400 	.word	0x40014400
 80062e8:	40014800 	.word	0x40014800
 80062ec:	40001800 	.word	0x40001800
 80062f0:	40001c00 	.word	0x40001c00
 80062f4:	40002000 	.word	0x40002000

080062f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	f023 0201 	bic.w	r2, r3, #1
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	4313      	orrs	r3, r2
 800632c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f023 030a 	bic.w	r3, r3, #10
 8006334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	4313      	orrs	r3, r2
 800633c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	621a      	str	r2, [r3, #32]
}
 800634a:	bf00      	nop
 800634c:	371c      	adds	r7, #28
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006356:	b480      	push	{r7}
 8006358:	b087      	sub	sp, #28
 800635a:	af00      	add	r7, sp, #0
 800635c:	60f8      	str	r0, [r7, #12]
 800635e:	60b9      	str	r1, [r7, #8]
 8006360:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	f023 0210 	bic.w	r2, r3, #16
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006380:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	031b      	lsls	r3, r3, #12
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	4313      	orrs	r3, r2
 800638a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006392:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	011b      	lsls	r3, r3, #4
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	4313      	orrs	r3, r2
 800639c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b085      	sub	sp, #20
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	f043 0307 	orr.w	r3, r3, #7
 80063d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	609a      	str	r2, [r3, #8]
}
 80063e0:	bf00      	nop
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006406:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	021a      	lsls	r2, r3, #8
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	431a      	orrs	r2, r3
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4313      	orrs	r3, r2
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	609a      	str	r2, [r3, #8]
}
 8006420:	bf00      	nop
 8006422:	371c      	adds	r7, #28
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006440:	2302      	movs	r3, #2
 8006442:	e05a      	b.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a21      	ldr	r2, [pc, #132]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d022      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006490:	d01d      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a1d      	ldr	r2, [pc, #116]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d018      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a1b      	ldr	r2, [pc, #108]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d013      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a1a      	ldr	r2, [pc, #104]	; (8006514 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d00e      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a18      	ldr	r2, [pc, #96]	; (8006518 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d009      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a17      	ldr	r2, [pc, #92]	; (800651c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d004      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a15      	ldr	r2, [pc, #84]	; (8006520 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d10c      	bne.n	80064e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	40010000 	.word	0x40010000
 800650c:	40000400 	.word	0x40000400
 8006510:	40000800 	.word	0x40000800
 8006514:	40000c00 	.word	0x40000c00
 8006518:	40010400 	.word	0x40010400
 800651c:	40014000 	.word	0x40014000
 8006520:	40001800 	.word	0x40001800

08006524 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006524:	b084      	sub	sp, #16
 8006526:	b480      	push	{r7}
 8006528:	b085      	sub	sp, #20
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	f107 001c 	add.w	r0, r7, #28
 8006532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800653a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800653c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800653e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006542:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006546:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800654a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800654c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800654e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800655e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	431a      	orrs	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	b004      	add	sp, #16
 8006578:	4770      	bx	lr

0800657a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006588:	4618      	mov	r0, r3
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b082      	sub	sp, #8
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2203      	movs	r2, #3
 80065c2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80065c4:	2002      	movs	r0, #2
 80065c6:	f7fb f99b 	bl	8001900 <HAL_Delay>
  
  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0303 	and.w	r3, r3, #3
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800660e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006614:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800661a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800662a:	f023 030f 	bic.w	r3, r3, #15
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	431a      	orrs	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	b2db      	uxtb	r3, r3
}
 8006652:	4618      	mov	r0, r3
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800665e:	b480      	push	{r7}
 8006660:	b085      	sub	sp, #20
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3314      	adds	r3, #20
 800666c:	461a      	mov	r2, r3
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	4413      	add	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
}  
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800668e:	2300      	movs	r3, #0
 8006690:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80066aa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80066b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80066b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	431a      	orrs	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0

}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b088      	sub	sp, #32
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80066ea:	2310      	movs	r3, #16
 80066ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80066ee:	2340      	movs	r3, #64	; 0x40
 80066f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80066f2:	2300      	movs	r3, #0
 80066f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80066f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80066fc:	f107 0308 	add.w	r3, r7, #8
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff ff74 	bl	80065f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006708:	f241 3288 	movw	r2, #5000	; 0x1388
 800670c:	2110      	movs	r1, #16
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fa40 	bl	8006b94 <SDMMC_GetCmdResp1>
 8006714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006716:	69fb      	ldr	r3, [r7, #28]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3720      	adds	r7, #32
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800672e:	2311      	movs	r3, #17
 8006730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006732:	2340      	movs	r3, #64	; 0x40
 8006734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006736:	2300      	movs	r3, #0
 8006738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800673a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800673e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006740:	f107 0308 	add.w	r3, r7, #8
 8006744:	4619      	mov	r1, r3
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff ff52 	bl	80065f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800674c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006750:	2111      	movs	r1, #17
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 fa1e 	bl	8006b94 <SDMMC_GetCmdResp1>
 8006758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800675a:	69fb      	ldr	r3, [r7, #28]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3720      	adds	r7, #32
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006772:	2312      	movs	r3, #18
 8006774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006776:	2340      	movs	r3, #64	; 0x40
 8006778:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800677a:	2300      	movs	r3, #0
 800677c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800677e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006782:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006784:	f107 0308 	add.w	r3, r7, #8
 8006788:	4619      	mov	r1, r3
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7ff ff30 	bl	80065f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006790:	f241 3288 	movw	r2, #5000	; 0x1388
 8006794:	2112      	movs	r1, #18
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f9fc 	bl	8006b94 <SDMMC_GetCmdResp1>
 800679c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800679e:	69fb      	ldr	r3, [r7, #28]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3720      	adds	r7, #32
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80067b6:	2318      	movs	r3, #24
 80067b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067ba:	2340      	movs	r3, #64	; 0x40
 80067bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067c8:	f107 0308 	add.w	r3, r7, #8
 80067cc:	4619      	mov	r1, r3
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7ff ff0e 	bl	80065f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80067d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d8:	2118      	movs	r1, #24
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f9da 	bl	8006b94 <SDMMC_GetCmdResp1>
 80067e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067e2:	69fb      	ldr	r3, [r7, #28]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3720      	adds	r7, #32
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80067fa:	2319      	movs	r3, #25
 80067fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067fe:	2340      	movs	r3, #64	; 0x40
 8006800:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006802:	2300      	movs	r3, #0
 8006804:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800680a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800680c:	f107 0308 	add.w	r3, r7, #8
 8006810:	4619      	mov	r1, r3
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7ff feec 	bl	80065f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006818:	f241 3288 	movw	r2, #5000	; 0x1388
 800681c:	2119      	movs	r1, #25
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f9b8 	bl	8006b94 <SDMMC_GetCmdResp1>
 8006824:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006826:	69fb      	ldr	r3, [r7, #28]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3720      	adds	r7, #32
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b088      	sub	sp, #32
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800683c:	230c      	movs	r3, #12
 800683e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006840:	2340      	movs	r3, #64	; 0x40
 8006842:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006844:	2300      	movs	r3, #0
 8006846:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800684c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800684e:	f107 0308 	add.w	r3, r7, #8
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7ff fecb 	bl	80065f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800685a:	4a05      	ldr	r2, [pc, #20]	; (8006870 <SDMMC_CmdStopTransfer+0x40>)
 800685c:	210c      	movs	r1, #12
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f998 	bl	8006b94 <SDMMC_GetCmdResp1>
 8006864:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006866:	69fb      	ldr	r3, [r7, #28]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3720      	adds	r7, #32
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	05f5e100 	.word	0x05f5e100

08006874 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08a      	sub	sp, #40	; 0x28
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006884:	2307      	movs	r3, #7
 8006886:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006888:	2340      	movs	r3, #64	; 0x40
 800688a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800688c:	2300      	movs	r3, #0
 800688e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006894:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006896:	f107 0310 	add.w	r3, r7, #16
 800689a:	4619      	mov	r1, r3
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f7ff fea7 	bl	80065f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80068a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a6:	2107      	movs	r1, #7
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 f973 	bl	8006b94 <SDMMC_GetCmdResp1>
 80068ae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3728      	adds	r7, #40	; 0x28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b088      	sub	sp, #32
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80068c2:	2300      	movs	r3, #0
 80068c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80068c6:	2300      	movs	r3, #0
 80068c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80068ca:	2300      	movs	r3, #0
 80068cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068ce:	2300      	movs	r3, #0
 80068d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068d8:	f107 0308 	add.w	r3, r7, #8
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7ff fe86 	bl	80065f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f92d 	bl	8006b44 <SDMMC_GetCmdError>
 80068ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068ec:	69fb      	ldr	r3, [r7, #28]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3720      	adds	r7, #32
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b088      	sub	sp, #32
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80068fe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006902:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006904:	2308      	movs	r3, #8
 8006906:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006908:	2340      	movs	r3, #64	; 0x40
 800690a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800690c:	2300      	movs	r3, #0
 800690e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006914:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006916:	f107 0308 	add.w	r3, r7, #8
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff fe67 	bl	80065f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fb16 	bl	8006f54 <SDMMC_GetCmdResp7>
 8006928:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800692a:	69fb      	ldr	r3, [r7, #28]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3720      	adds	r7, #32
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006942:	2337      	movs	r3, #55	; 0x37
 8006944:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006946:	2340      	movs	r3, #64	; 0x40
 8006948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800694e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006952:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006954:	f107 0308 	add.w	r3, r7, #8
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff fe48 	bl	80065f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006960:	f241 3288 	movw	r2, #5000	; 0x1388
 8006964:	2137      	movs	r1, #55	; 0x37
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f914 	bl	8006b94 <SDMMC_GetCmdResp1>
 800696c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800696e:	69fb      	ldr	r3, [r7, #28]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3720      	adds	r7, #32
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006988:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800698c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800698e:	2329      	movs	r3, #41	; 0x29
 8006990:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006992:	2340      	movs	r3, #64	; 0x40
 8006994:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800699a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800699e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069a0:	f107 0308 	add.w	r3, r7, #8
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7ff fe22 	bl	80065f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fa23 	bl	8006df8 <SDMMC_GetCmdResp3>
 80069b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069b4:	69fb      	ldr	r3, [r7, #28]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3720      	adds	r7, #32
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b088      	sub	sp, #32
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80069cc:	2306      	movs	r3, #6
 80069ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80069d0:	2340      	movs	r3, #64	; 0x40
 80069d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069d4:	2300      	movs	r3, #0
 80069d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069de:	f107 0308 	add.w	r3, r7, #8
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff fe03 	bl	80065f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80069ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ee:	2106      	movs	r1, #6
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f8cf 	bl	8006b94 <SDMMC_GetCmdResp1>
 80069f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069f8:	69fb      	ldr	r3, [r7, #28]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3720      	adds	r7, #32
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b088      	sub	sp, #32
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006a0e:	2333      	movs	r3, #51	; 0x33
 8006a10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a12:	2340      	movs	r3, #64	; 0x40
 8006a14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a16:	2300      	movs	r3, #0
 8006a18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a20:	f107 0308 	add.w	r3, r7, #8
 8006a24:	4619      	mov	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff fde2 	bl	80065f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a30:	2133      	movs	r1, #51	; 0x33
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f8ae 	bl	8006b94 <SDMMC_GetCmdResp1>
 8006a38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a3a:	69fb      	ldr	r3, [r7, #28]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3720      	adds	r7, #32
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006a50:	2302      	movs	r3, #2
 8006a52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006a54:	23c0      	movs	r3, #192	; 0xc0
 8006a56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a62:	f107 0308 	add.w	r3, r7, #8
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff fdc1 	bl	80065f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f97c 	bl	8006d6c <SDMMC_GetCmdResp2>
 8006a74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a76:	69fb      	ldr	r3, [r7, #28]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3720      	adds	r7, #32
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006a8e:	2309      	movs	r3, #9
 8006a90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006a92:	23c0      	movs	r3, #192	; 0xc0
 8006a94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a96:	2300      	movs	r3, #0
 8006a98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006aa0:	f107 0308 	add.w	r3, r7, #8
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7ff fda2 	bl	80065f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f95d 	bl	8006d6c <SDMMC_GetCmdResp2>
 8006ab2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3720      	adds	r7, #32
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b088      	sub	sp, #32
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006acc:	2303      	movs	r3, #3
 8006ace:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ad0:	2340      	movs	r3, #64	; 0x40
 8006ad2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006adc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ade:	f107 0308 	add.w	r3, r7, #8
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff fd83 	bl	80065f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	2103      	movs	r1, #3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f9bc 	bl	8006e6c <SDMMC_GetCmdResp6>
 8006af4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006af6:	69fb      	ldr	r3, [r7, #28]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3720      	adds	r7, #32
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006b0e:	230d      	movs	r3, #13
 8006b10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b12:	2340      	movs	r3, #64	; 0x40
 8006b14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b16:	2300      	movs	r3, #0
 8006b18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b20:	f107 0308 	add.w	r3, r7, #8
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7ff fd62 	bl	80065f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b30:	210d      	movs	r1, #13
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f82e 	bl	8006b94 <SDMMC_GetCmdResp1>
 8006b38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b3a:	69fb      	ldr	r3, [r7, #28]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3720      	adds	r7, #32
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006b44:	b490      	push	{r4, r7}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006b4c:	4b0f      	ldr	r3, [pc, #60]	; (8006b8c <SDMMC_GetCmdError+0x48>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a0f      	ldr	r2, [pc, #60]	; (8006b90 <SDMMC_GetCmdError+0x4c>)
 8006b52:	fba2 2303 	umull	r2, r3, r2, r3
 8006b56:	0a5b      	lsrs	r3, r3, #9
 8006b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b5c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006b60:	4623      	mov	r3, r4
 8006b62:	1e5c      	subs	r4, r3, #1
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d102      	bne.n	8006b6e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006b68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b6c:	e009      	b.n	8006b82 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0f2      	beq.n	8006b60 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	22c5      	movs	r2, #197	; 0xc5
 8006b7e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc90      	pop	{r4, r7}
 8006b8a:	4770      	bx	lr
 8006b8c:	20000000 	.word	0x20000000
 8006b90:	10624dd3 	.word	0x10624dd3

08006b94 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006b94:	b590      	push	{r4, r7, lr}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	607a      	str	r2, [r7, #4]
 8006ba0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006ba2:	4b6f      	ldr	r3, [pc, #444]	; (8006d60 <SDMMC_GetCmdResp1+0x1cc>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a6f      	ldr	r2, [pc, #444]	; (8006d64 <SDMMC_GetCmdResp1+0x1d0>)
 8006ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bac:	0a5b      	lsrs	r3, r3, #9
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006bb4:	4623      	mov	r3, r4
 8006bb6:	1e5c      	subs	r4, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d102      	bne.n	8006bc2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006bbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006bc0:	e0c9      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d0f0      	beq.n	8006bb4 <SDMMC_GetCmdResp1+0x20>
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1eb      	bne.n	8006bb4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d004      	beq.n	8006bf2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2204      	movs	r2, #4
 8006bec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006bee:	2304      	movs	r3, #4
 8006bf0:	e0b1      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e0a6      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	22c5      	movs	r2, #197	; 0xc5
 8006c0c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f7ff fd18 	bl	8006644 <SDIO_GetCommandResponse>
 8006c14:	4603      	mov	r3, r0
 8006c16:	461a      	mov	r2, r3
 8006c18:	7afb      	ldrb	r3, [r7, #11]
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d001      	beq.n	8006c22 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e099      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006c22:	2100      	movs	r1, #0
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f7ff fd1a 	bl	800665e <SDIO_GetResponse>
 8006c2a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	4b4e      	ldr	r3, [pc, #312]	; (8006d68 <SDMMC_GetCmdResp1+0x1d4>)
 8006c30:	4013      	ands	r3, r2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8006c36:	2300      	movs	r3, #0
 8006c38:	e08d      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	da02      	bge.n	8006c46 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006c40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c44:	e087      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006c50:	2340      	movs	r3, #64	; 0x40
 8006c52:	e080      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006c5e:	2380      	movs	r3, #128	; 0x80
 8006c60:	e079      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d002      	beq.n	8006c72 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c70:	e071      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c80:	e069      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c90:	e061      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006c9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ca0:	e059      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cb0:	e051      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d002      	beq.n	8006cc2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cc0:	e049      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006ccc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006cd0:	e041      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006cdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ce0:	e039      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cf0:	e031      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006cfc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006d00:	e029      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006d0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006d10:	e021      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006d1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006d20:	e019      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006d2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006d30:	e011      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d002      	beq.n	8006d42 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006d3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006d40:	e009      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f003 0308 	and.w	r3, r3, #8
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006d4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006d50:	e001      	b.n	8006d56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd90      	pop	{r4, r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000000 	.word	0x20000000
 8006d64:	10624dd3 	.word	0x10624dd3
 8006d68:	fdffe008 	.word	0xfdffe008

08006d6c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006d6c:	b490      	push	{r4, r7}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d74:	4b1e      	ldr	r3, [pc, #120]	; (8006df0 <SDMMC_GetCmdResp2+0x84>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a1e      	ldr	r2, [pc, #120]	; (8006df4 <SDMMC_GetCmdResp2+0x88>)
 8006d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7e:	0a5b      	lsrs	r3, r3, #9
 8006d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d84:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006d88:	4623      	mov	r3, r4
 8006d8a:	1e5c      	subs	r4, r3, #1
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d102      	bne.n	8006d96 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d94:	e026      	b.n	8006de4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d9a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d0f0      	beq.n	8006d88 <SDMMC_GetCmdResp2+0x1c>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1eb      	bne.n	8006d88 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db4:	f003 0304 	and.w	r3, r3, #4
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d004      	beq.n	8006dc6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2204      	movs	r2, #4
 8006dc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006dc2:	2304      	movs	r3, #4
 8006dc4:	e00e      	b.n	8006de4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d004      	beq.n	8006ddc <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e003      	b.n	8006de4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	22c5      	movs	r2, #197	; 0xc5
 8006de0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc90      	pop	{r4, r7}
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	20000000 	.word	0x20000000
 8006df4:	10624dd3 	.word	0x10624dd3

08006df8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006df8:	b490      	push	{r4, r7}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e00:	4b18      	ldr	r3, [pc, #96]	; (8006e64 <SDMMC_GetCmdResp3+0x6c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a18      	ldr	r2, [pc, #96]	; (8006e68 <SDMMC_GetCmdResp3+0x70>)
 8006e06:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0a:	0a5b      	lsrs	r3, r3, #9
 8006e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006e14:	4623      	mov	r3, r4
 8006e16:	1e5c      	subs	r4, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d102      	bne.n	8006e22 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e20:	e01b      	b.n	8006e5a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e26:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0f0      	beq.n	8006e14 <SDMMC_GetCmdResp3+0x1c>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1eb      	bne.n	8006e14 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d004      	beq.n	8006e52 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2204      	movs	r2, #4
 8006e4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e4e:	2304      	movs	r3, #4
 8006e50:	e003      	b.n	8006e5a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	22c5      	movs	r2, #197	; 0xc5
 8006e56:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bc90      	pop	{r4, r7}
 8006e62:	4770      	bx	lr
 8006e64:	20000000 	.word	0x20000000
 8006e68:	10624dd3 	.word	0x10624dd3

08006e6c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006e6c:	b590      	push	{r4, r7, lr}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	460b      	mov	r3, r1
 8006e76:	607a      	str	r2, [r7, #4]
 8006e78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e7a:	4b34      	ldr	r3, [pc, #208]	; (8006f4c <SDMMC_GetCmdResp6+0xe0>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a34      	ldr	r2, [pc, #208]	; (8006f50 <SDMMC_GetCmdResp6+0xe4>)
 8006e80:	fba2 2303 	umull	r2, r3, r2, r3
 8006e84:	0a5b      	lsrs	r3, r3, #9
 8006e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e8a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006e8e:	4623      	mov	r3, r4
 8006e90:	1e5c      	subs	r4, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d102      	bne.n	8006e9c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e9a:	e052      	b.n	8006f42 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d0f0      	beq.n	8006e8e <SDMMC_GetCmdResp6+0x22>
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1eb      	bne.n	8006e8e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eba:	f003 0304 	and.w	r3, r3, #4
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d004      	beq.n	8006ecc <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2204      	movs	r2, #4
 8006ec6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ec8:	2304      	movs	r3, #4
 8006eca:	e03a      	b.n	8006f42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d004      	beq.n	8006ee2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2201      	movs	r2, #1
 8006edc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e02f      	b.n	8006f42 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f7ff fbae 	bl	8006644 <SDIO_GetCommandResponse>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	461a      	mov	r2, r3
 8006eec:	7afb      	ldrb	r3, [r7, #11]
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d001      	beq.n	8006ef6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e025      	b.n	8006f42 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	22c5      	movs	r2, #197	; 0xc5
 8006efa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006efc:	2100      	movs	r1, #0
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f7ff fbad 	bl	800665e <SDIO_GetResponse>
 8006f04:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d106      	bne.n	8006f1e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	0c1b      	lsrs	r3, r3, #16
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	e011      	b.n	8006f42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f2c:	e009      	b.n	8006f42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f3c:	e001      	b.n	8006f42 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006f3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	371c      	adds	r7, #28
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd90      	pop	{r4, r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	20000000 	.word	0x20000000
 8006f50:	10624dd3 	.word	0x10624dd3

08006f54 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006f54:	b490      	push	{r4, r7}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f5c:	4b21      	ldr	r3, [pc, #132]	; (8006fe4 <SDMMC_GetCmdResp7+0x90>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a21      	ldr	r2, [pc, #132]	; (8006fe8 <SDMMC_GetCmdResp7+0x94>)
 8006f62:	fba2 2303 	umull	r2, r3, r2, r3
 8006f66:	0a5b      	lsrs	r3, r3, #9
 8006f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f6c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006f70:	4623      	mov	r3, r4
 8006f72:	1e5c      	subs	r4, r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d102      	bne.n	8006f7e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f7c:	e02c      	b.n	8006fd8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f82:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0f0      	beq.n	8006f70 <SDMMC_GetCmdResp7+0x1c>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1eb      	bne.n	8006f70 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9c:	f003 0304 	and.w	r3, r3, #4
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d004      	beq.n	8006fae <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2204      	movs	r2, #4
 8006fa8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006faa:	2304      	movs	r3, #4
 8006fac:	e014      	b.n	8006fd8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d004      	beq.n	8006fc4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e009      	b.n	8006fd8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2240      	movs	r2, #64	; 0x40
 8006fd4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006fd6:	2300      	movs	r3, #0
  
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bc90      	pop	{r4, r7}
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20000000 	.word	0x20000000
 8006fe8:	10624dd3 	.word	0x10624dd3

08006fec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fec:	b084      	sub	sp, #16
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	f107 001c 	add.w	r0, r7, #28
 8006ffa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007000:	2b01      	cmp	r3, #1
 8007002:	d122      	bne.n	800704a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800702c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800702e:	2b01      	cmp	r3, #1
 8007030:	d105      	bne.n	800703e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f001 fac6 	bl	80085d0 <USB_CoreReset>
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]
 8007048:	e01a      	b.n	8007080 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f001 faba 	bl	80085d0 <USB_CoreReset>
 800705c:	4603      	mov	r3, r0
 800705e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007062:	2b00      	cmp	r3, #0
 8007064:	d106      	bne.n	8007074 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	639a      	str	r2, [r3, #56]	; 0x38
 8007072:	e005      	b.n	8007080 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007078:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	2b01      	cmp	r3, #1
 8007084:	d10b      	bne.n	800709e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f043 0206 	orr.w	r2, r3, #6
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f043 0220 	orr.w	r2, r3, #32
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800709e:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070aa:	b004      	add	sp, #16
 80070ac:	4770      	bx	lr
	...

080070b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	4613      	mov	r3, r2
 80070bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80070be:	79fb      	ldrb	r3, [r7, #7]
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d165      	bne.n	8007190 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	4a41      	ldr	r2, [pc, #260]	; (80071cc <USB_SetTurnaroundTime+0x11c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d906      	bls.n	80070da <USB_SetTurnaroundTime+0x2a>
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	4a40      	ldr	r2, [pc, #256]	; (80071d0 <USB_SetTurnaroundTime+0x120>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d802      	bhi.n	80070da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80070d4:	230f      	movs	r3, #15
 80070d6:	617b      	str	r3, [r7, #20]
 80070d8:	e062      	b.n	80071a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	4a3c      	ldr	r2, [pc, #240]	; (80071d0 <USB_SetTurnaroundTime+0x120>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d906      	bls.n	80070f0 <USB_SetTurnaroundTime+0x40>
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	4a3b      	ldr	r2, [pc, #236]	; (80071d4 <USB_SetTurnaroundTime+0x124>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d802      	bhi.n	80070f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80070ea:	230e      	movs	r3, #14
 80070ec:	617b      	str	r3, [r7, #20]
 80070ee:	e057      	b.n	80071a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	4a38      	ldr	r2, [pc, #224]	; (80071d4 <USB_SetTurnaroundTime+0x124>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d906      	bls.n	8007106 <USB_SetTurnaroundTime+0x56>
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	4a37      	ldr	r2, [pc, #220]	; (80071d8 <USB_SetTurnaroundTime+0x128>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d802      	bhi.n	8007106 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007100:	230d      	movs	r3, #13
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	e04c      	b.n	80071a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	4a33      	ldr	r2, [pc, #204]	; (80071d8 <USB_SetTurnaroundTime+0x128>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d906      	bls.n	800711c <USB_SetTurnaroundTime+0x6c>
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	4a32      	ldr	r2, [pc, #200]	; (80071dc <USB_SetTurnaroundTime+0x12c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d802      	bhi.n	800711c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007116:	230c      	movs	r3, #12
 8007118:	617b      	str	r3, [r7, #20]
 800711a:	e041      	b.n	80071a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4a2f      	ldr	r2, [pc, #188]	; (80071dc <USB_SetTurnaroundTime+0x12c>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d906      	bls.n	8007132 <USB_SetTurnaroundTime+0x82>
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	4a2e      	ldr	r2, [pc, #184]	; (80071e0 <USB_SetTurnaroundTime+0x130>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d802      	bhi.n	8007132 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800712c:	230b      	movs	r3, #11
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	e036      	b.n	80071a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	4a2a      	ldr	r2, [pc, #168]	; (80071e0 <USB_SetTurnaroundTime+0x130>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d906      	bls.n	8007148 <USB_SetTurnaroundTime+0x98>
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	4a29      	ldr	r2, [pc, #164]	; (80071e4 <USB_SetTurnaroundTime+0x134>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d802      	bhi.n	8007148 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007142:	230a      	movs	r3, #10
 8007144:	617b      	str	r3, [r7, #20]
 8007146:	e02b      	b.n	80071a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	4a26      	ldr	r2, [pc, #152]	; (80071e4 <USB_SetTurnaroundTime+0x134>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d906      	bls.n	800715e <USB_SetTurnaroundTime+0xae>
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	4a25      	ldr	r2, [pc, #148]	; (80071e8 <USB_SetTurnaroundTime+0x138>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d802      	bhi.n	800715e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007158:	2309      	movs	r3, #9
 800715a:	617b      	str	r3, [r7, #20]
 800715c:	e020      	b.n	80071a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	4a21      	ldr	r2, [pc, #132]	; (80071e8 <USB_SetTurnaroundTime+0x138>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d906      	bls.n	8007174 <USB_SetTurnaroundTime+0xc4>
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	4a20      	ldr	r2, [pc, #128]	; (80071ec <USB_SetTurnaroundTime+0x13c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d802      	bhi.n	8007174 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800716e:	2308      	movs	r3, #8
 8007170:	617b      	str	r3, [r7, #20]
 8007172:	e015      	b.n	80071a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	4a1d      	ldr	r2, [pc, #116]	; (80071ec <USB_SetTurnaroundTime+0x13c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d906      	bls.n	800718a <USB_SetTurnaroundTime+0xda>
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	4a1c      	ldr	r2, [pc, #112]	; (80071f0 <USB_SetTurnaroundTime+0x140>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d802      	bhi.n	800718a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007184:	2307      	movs	r3, #7
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	e00a      	b.n	80071a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800718a:	2306      	movs	r3, #6
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	e007      	b.n	80071a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d102      	bne.n	800719c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007196:	2309      	movs	r3, #9
 8007198:	617b      	str	r3, [r7, #20]
 800719a:	e001      	b.n	80071a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800719c:	2309      	movs	r3, #9
 800719e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	68da      	ldr	r2, [r3, #12]
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	029b      	lsls	r3, r3, #10
 80071b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80071b8:	431a      	orrs	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	371c      	adds	r7, #28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	00d8acbf 	.word	0x00d8acbf
 80071d0:	00e4e1bf 	.word	0x00e4e1bf
 80071d4:	00f423ff 	.word	0x00f423ff
 80071d8:	0106737f 	.word	0x0106737f
 80071dc:	011a499f 	.word	0x011a499f
 80071e0:	01312cff 	.word	0x01312cff
 80071e4:	014ca43f 	.word	0x014ca43f
 80071e8:	016e35ff 	.word	0x016e35ff
 80071ec:	01a6ab1f 	.word	0x01a6ab1f
 80071f0:	01e847ff 	.word	0x01e847ff

080071f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f043 0201 	orr.w	r2, r3, #1
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f023 0201 	bic.w	r2, r3, #1
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007250:	78fb      	ldrb	r3, [r7, #3]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d106      	bne.n	8007264 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	60da      	str	r2, [r3, #12]
 8007262:	e00b      	b.n	800727c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007264:	78fb      	ldrb	r3, [r7, #3]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d106      	bne.n	8007278 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	60da      	str	r2, [r3, #12]
 8007276:	e001      	b.n	800727c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e003      	b.n	8007284 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800727c:	2032      	movs	r0, #50	; 0x32
 800727e:	f7fa fb3f 	bl	8001900 <HAL_Delay>

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800728c:	b084      	sub	sp, #16
 800728e:	b580      	push	{r7, lr}
 8007290:	b086      	sub	sp, #24
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800729a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80072a6:	2300      	movs	r3, #0
 80072a8:	613b      	str	r3, [r7, #16]
 80072aa:	e009      	b.n	80072c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	3340      	adds	r3, #64	; 0x40
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	2200      	movs	r2, #0
 80072b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	3301      	adds	r3, #1
 80072be:	613b      	str	r3, [r7, #16]
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	2b0e      	cmp	r3, #14
 80072c4:	d9f2      	bls.n	80072ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80072c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d11c      	bne.n	8007306 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072da:	f043 0302 	orr.w	r3, r3, #2
 80072de:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	639a      	str	r2, [r3, #56]	; 0x38
 8007304:	e00b      	b.n	800731e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007316:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007324:	461a      	mov	r2, r3
 8007326:	2300      	movs	r3, #0
 8007328:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007330:	4619      	mov	r1, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007338:	461a      	mov	r2, r3
 800733a:	680b      	ldr	r3, [r1, #0]
 800733c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800733e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007340:	2b01      	cmp	r3, #1
 8007342:	d10c      	bne.n	800735e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	2b00      	cmp	r3, #0
 8007348:	d104      	bne.n	8007354 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800734a:	2100      	movs	r1, #0
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f949 	bl	80075e4 <USB_SetDevSpeed>
 8007352:	e008      	b.n	8007366 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007354:	2101      	movs	r1, #1
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f944 	bl	80075e4 <USB_SetDevSpeed>
 800735c:	e003      	b.n	8007366 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800735e:	2103      	movs	r1, #3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f93f 	bl	80075e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007366:	2110      	movs	r1, #16
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f8f3 	bl	8007554 <USB_FlushTxFifo>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f911 	bl	80075a0 <USB_FlushRxFifo>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800738e:	461a      	mov	r2, r3
 8007390:	2300      	movs	r3, #0
 8007392:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739a:	461a      	mov	r2, r3
 800739c:	2300      	movs	r3, #0
 800739e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a6:	461a      	mov	r2, r3
 80073a8:	2300      	movs	r3, #0
 80073aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073ac:	2300      	movs	r3, #0
 80073ae:	613b      	str	r3, [r7, #16]
 80073b0:	e043      	b.n	800743a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073c8:	d118      	bne.n	80073fc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10a      	bne.n	80073e6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073dc:	461a      	mov	r2, r3
 80073de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073e2:	6013      	str	r3, [r2, #0]
 80073e4:	e013      	b.n	800740e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f2:	461a      	mov	r2, r3
 80073f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	e008      	b.n	800740e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007408:	461a      	mov	r2, r3
 800740a:	2300      	movs	r3, #0
 800740c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4413      	add	r3, r2
 8007416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741a:	461a      	mov	r2, r3
 800741c:	2300      	movs	r3, #0
 800741e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742c:	461a      	mov	r2, r3
 800742e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007432:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	3301      	adds	r3, #1
 8007438:	613b      	str	r3, [r7, #16]
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	429a      	cmp	r2, r3
 8007440:	d3b7      	bcc.n	80073b2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007442:	2300      	movs	r3, #0
 8007444:	613b      	str	r3, [r7, #16]
 8007446:	e043      	b.n	80074d0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800745a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800745e:	d118      	bne.n	8007492 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10a      	bne.n	800747c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	4413      	add	r3, r2
 800746e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007472:	461a      	mov	r2, r3
 8007474:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007478:	6013      	str	r3, [r2, #0]
 800747a:	e013      	b.n	80074a4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4413      	add	r3, r2
 8007484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007488:	461a      	mov	r2, r3
 800748a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800748e:	6013      	str	r3, [r2, #0]
 8007490:	e008      	b.n	80074a4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749e:	461a      	mov	r2, r3
 80074a0:	2300      	movs	r3, #0
 80074a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b0:	461a      	mov	r2, r3
 80074b2:	2300      	movs	r3, #0
 80074b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c2:	461a      	mov	r2, r3
 80074c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	3301      	adds	r3, #1
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d3b7      	bcc.n	8007448 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80074f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d105      	bne.n	800750c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	f043 0210 	orr.w	r2, r3, #16
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699a      	ldr	r2, [r3, #24]
 8007510:	4b0f      	ldr	r3, [pc, #60]	; (8007550 <USB_DevInit+0x2c4>)
 8007512:	4313      	orrs	r3, r2
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800751a:	2b00      	cmp	r3, #0
 800751c:	d005      	beq.n	800752a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	f043 0208 	orr.w	r2, r3, #8
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800752a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800752c:	2b01      	cmp	r3, #1
 800752e:	d107      	bne.n	8007540 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007538:	f043 0304 	orr.w	r3, r3, #4
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007540:	7dfb      	ldrb	r3, [r7, #23]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800754c:	b004      	add	sp, #16
 800754e:	4770      	bx	lr
 8007550:	803c3800 	.word	0x803c3800

08007554 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	019b      	lsls	r3, r3, #6
 8007566:	f043 0220 	orr.w	r2, r3, #32
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3301      	adds	r3, #1
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4a09      	ldr	r2, [pc, #36]	; (800759c <USB_FlushTxFifo+0x48>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d901      	bls.n	8007580 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e006      	b.n	800758e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	f003 0320 	and.w	r3, r3, #32
 8007588:	2b20      	cmp	r3, #32
 800758a:	d0f0      	beq.n	800756e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	00030d40 	.word	0x00030d40

080075a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80075a8:	2300      	movs	r3, #0
 80075aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2210      	movs	r2, #16
 80075b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3301      	adds	r3, #1
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4a09      	ldr	r2, [pc, #36]	; (80075e0 <USB_FlushRxFifo+0x40>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d901      	bls.n	80075c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e006      	b.n	80075d2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	f003 0310 	and.w	r3, r3, #16
 80075cc:	2b10      	cmp	r3, #16
 80075ce:	d0f0      	beq.n	80075b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3714      	adds	r7, #20
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	00030d40 	.word	0x00030d40

080075e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	78fb      	ldrb	r3, [r7, #3]
 80075fe:	68f9      	ldr	r1, [r7, #12]
 8007600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007604:	4313      	orrs	r3, r2
 8007606:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007616:	b480      	push	{r7}
 8007618:	b087      	sub	sp, #28
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f003 0306 	and.w	r3, r3, #6
 800762e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d102      	bne.n	800763c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007636:	2300      	movs	r3, #0
 8007638:	75fb      	strb	r3, [r7, #23]
 800763a:	e00a      	b.n	8007652 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2b02      	cmp	r3, #2
 8007640:	d002      	beq.n	8007648 <USB_GetDevSpeed+0x32>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2b06      	cmp	r3, #6
 8007646:	d102      	bne.n	800764e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007648:	2302      	movs	r3, #2
 800764a:	75fb      	strb	r3, [r7, #23]
 800764c:	e001      	b.n	8007652 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800764e:	230f      	movs	r3, #15
 8007650:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007652:	7dfb      	ldrb	r3, [r7, #23]
}
 8007654:	4618      	mov	r0, r3
 8007656:	371c      	adds	r7, #28
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	785b      	ldrb	r3, [r3, #1]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d13a      	bne.n	80076f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007682:	69da      	ldr	r2, [r3, #28]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	f003 030f 	and.w	r3, r3, #15
 800768c:	2101      	movs	r1, #1
 800768e:	fa01 f303 	lsl.w	r3, r1, r3
 8007692:	b29b      	uxth	r3, r3
 8007694:	68f9      	ldr	r1, [r7, #12]
 8007696:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800769a:	4313      	orrs	r3, r2
 800769c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d155      	bne.n	8007760 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	015a      	lsls	r2, r3, #5
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	4413      	add	r3, r2
 80076bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	78db      	ldrb	r3, [r3, #3]
 80076ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	059b      	lsls	r3, r3, #22
 80076d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80076d8:	4313      	orrs	r3, r2
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	0151      	lsls	r1, r2, #5
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	440a      	add	r2, r1
 80076e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ee:	6013      	str	r3, [r2, #0]
 80076f0:	e036      	b.n	8007760 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076f8:	69da      	ldr	r2, [r3, #28]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	f003 030f 	and.w	r3, r3, #15
 8007702:	2101      	movs	r1, #1
 8007704:	fa01 f303 	lsl.w	r3, r1, r3
 8007708:	041b      	lsls	r3, r3, #16
 800770a:	68f9      	ldr	r1, [r7, #12]
 800770c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007710:	4313      	orrs	r3, r2
 8007712:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d11a      	bne.n	8007760 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	015a      	lsls	r2, r3, #5
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	4413      	add	r3, r2
 8007732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	78db      	ldrb	r3, [r3, #3]
 8007744:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007746:	430b      	orrs	r3, r1
 8007748:	4313      	orrs	r3, r2
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	0151      	lsls	r1, r2, #5
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	440a      	add	r2, r1
 8007752:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800775a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800775e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
	...

08007770 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	785b      	ldrb	r3, [r3, #1]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d161      	bne.n	8007850 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800779e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077a2:	d11f      	bne.n	80077e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	0151      	lsls	r1, r2, #5
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	440a      	add	r2, r1
 80077ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	0151      	lsls	r1, r2, #5
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	440a      	add	r2, r1
 80077da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	f003 030f 	and.w	r3, r3, #15
 80077f4:	2101      	movs	r1, #1
 80077f6:	fa01 f303 	lsl.w	r3, r1, r3
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	43db      	mvns	r3, r3
 80077fe:	68f9      	ldr	r1, [r7, #12]
 8007800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007804:	4013      	ands	r3, r2
 8007806:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800780e:	69da      	ldr	r2, [r3, #28]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	f003 030f 	and.w	r3, r3, #15
 8007818:	2101      	movs	r1, #1
 800781a:	fa01 f303 	lsl.w	r3, r1, r3
 800781e:	b29b      	uxth	r3, r3
 8007820:	43db      	mvns	r3, r3
 8007822:	68f9      	ldr	r1, [r7, #12]
 8007824:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007828:	4013      	ands	r3, r2
 800782a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	0159      	lsls	r1, r3, #5
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	440b      	add	r3, r1
 8007842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007846:	4619      	mov	r1, r3
 8007848:	4b35      	ldr	r3, [pc, #212]	; (8007920 <USB_DeactivateEndpoint+0x1b0>)
 800784a:	4013      	ands	r3, r2
 800784c:	600b      	str	r3, [r1, #0]
 800784e:	e060      	b.n	8007912 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007862:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007866:	d11f      	bne.n	80078a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4413      	add	r3, r2
 8007870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	0151      	lsls	r1, r2, #5
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	440a      	add	r2, r1
 800787e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007882:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007886:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	0151      	lsls	r1, r2, #5
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	440a      	add	r2, r1
 800789e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	f003 030f 	and.w	r3, r3, #15
 80078b8:	2101      	movs	r1, #1
 80078ba:	fa01 f303 	lsl.w	r3, r1, r3
 80078be:	041b      	lsls	r3, r3, #16
 80078c0:	43db      	mvns	r3, r3
 80078c2:	68f9      	ldr	r1, [r7, #12]
 80078c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078c8:	4013      	ands	r3, r2
 80078ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d2:	69da      	ldr	r2, [r3, #28]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	f003 030f 	and.w	r3, r3, #15
 80078dc:	2101      	movs	r1, #1
 80078de:	fa01 f303 	lsl.w	r3, r1, r3
 80078e2:	041b      	lsls	r3, r3, #16
 80078e4:	43db      	mvns	r3, r3
 80078e6:	68f9      	ldr	r1, [r7, #12]
 80078e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078ec:	4013      	ands	r3, r2
 80078ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	0159      	lsls	r1, r3, #5
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	440b      	add	r3, r1
 8007906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790a:	4619      	mov	r1, r3
 800790c:	4b05      	ldr	r3, [pc, #20]	; (8007924 <USB_DeactivateEndpoint+0x1b4>)
 800790e:	4013      	ands	r3, r2
 8007910:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007912:	2300      	movs	r3, #0
}
 8007914:	4618      	mov	r0, r3
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	ec337800 	.word	0xec337800
 8007924:	eff37800 	.word	0xeff37800

08007928 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b08a      	sub	sp, #40	; 0x28
 800792c:	af02      	add	r7, sp, #8
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	4613      	mov	r3, r2
 8007934:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	785b      	ldrb	r3, [r3, #1]
 8007944:	2b01      	cmp	r3, #1
 8007946:	f040 815c 	bne.w	8007c02 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d132      	bne.n	80079b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	0151      	lsls	r1, r2, #5
 8007964:	69fa      	ldr	r2, [r7, #28]
 8007966:	440a      	add	r2, r1
 8007968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800796c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007970:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007974:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	0151      	lsls	r1, r2, #5
 8007988:	69fa      	ldr	r2, [r7, #28]
 800798a:	440a      	add	r2, r1
 800798c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007990:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007994:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	4413      	add	r3, r2
 800799e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	0151      	lsls	r1, r2, #5
 80079a8:	69fa      	ldr	r2, [r7, #28]
 80079aa:	440a      	add	r2, r1
 80079ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079b0:	0cdb      	lsrs	r3, r3, #19
 80079b2:	04db      	lsls	r3, r3, #19
 80079b4:	6113      	str	r3, [r2, #16]
 80079b6:	e074      	b.n	8007aa2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	69ba      	ldr	r2, [r7, #24]
 80079c8:	0151      	lsls	r1, r2, #5
 80079ca:	69fa      	ldr	r2, [r7, #28]
 80079cc:	440a      	add	r2, r1
 80079ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079d2:	0cdb      	lsrs	r3, r3, #19
 80079d4:	04db      	lsls	r3, r3, #19
 80079d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	0151      	lsls	r1, r2, #5
 80079ea:	69fa      	ldr	r2, [r7, #28]
 80079ec:	440a      	add	r2, r1
 80079ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80079f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a08:	691a      	ldr	r2, [r3, #16]
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	6959      	ldr	r1, [r3, #20]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	440b      	add	r3, r1
 8007a14:	1e59      	subs	r1, r3, #1
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a1e:	04d9      	lsls	r1, r3, #19
 8007a20:	4b9d      	ldr	r3, [pc, #628]	; (8007c98 <USB_EPStartXfer+0x370>)
 8007a22:	400b      	ands	r3, r1
 8007a24:	69b9      	ldr	r1, [r7, #24]
 8007a26:	0148      	lsls	r0, r1, #5
 8007a28:	69f9      	ldr	r1, [r7, #28]
 8007a2a:	4401      	add	r1, r0
 8007a2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a30:	4313      	orrs	r3, r2
 8007a32:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a40:	691a      	ldr	r2, [r3, #16]
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a4a:	69b9      	ldr	r1, [r7, #24]
 8007a4c:	0148      	lsls	r0, r1, #5
 8007a4e:	69f9      	ldr	r1, [r7, #28]
 8007a50:	4401      	add	r1, r0
 8007a52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a56:	4313      	orrs	r3, r2
 8007a58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	78db      	ldrb	r3, [r3, #3]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d11f      	bne.n	8007aa2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	015a      	lsls	r2, r3, #5
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	0151      	lsls	r1, r2, #5
 8007a74:	69fa      	ldr	r2, [r7, #28]
 8007a76:	440a      	add	r2, r1
 8007a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007a80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	0151      	lsls	r1, r2, #5
 8007a94:	69fa      	ldr	r2, [r7, #28]
 8007a96:	440a      	add	r2, r1
 8007a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007aa0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007aa2:	79fb      	ldrb	r3, [r7, #7]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d14b      	bne.n	8007b40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d009      	beq.n	8007ac4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007abc:	461a      	mov	r2, r3
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	78db      	ldrb	r3, [r3, #3]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d128      	bne.n	8007b1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d110      	bne.n	8007afe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	0151      	lsls	r1, r2, #5
 8007aee:	69fa      	ldr	r2, [r7, #28]
 8007af0:	440a      	add	r2, r1
 8007af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007af6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	e00f      	b.n	8007b1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	015a      	lsls	r2, r3, #5
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	0151      	lsls	r1, r2, #5
 8007b10:	69fa      	ldr	r2, [r7, #28]
 8007b12:	440a      	add	r2, r1
 8007b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	015a      	lsls	r2, r3, #5
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	4413      	add	r3, r2
 8007b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	0151      	lsls	r1, r2, #5
 8007b30:	69fa      	ldr	r2, [r7, #28]
 8007b32:	440a      	add	r2, r1
 8007b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b3c:	6013      	str	r3, [r2, #0]
 8007b3e:	e12f      	b.n	8007da0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	0151      	lsls	r1, r2, #5
 8007b52:	69fa      	ldr	r2, [r7, #28]
 8007b54:	440a      	add	r2, r1
 8007b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	78db      	ldrb	r3, [r3, #3]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d015      	beq.n	8007b94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 8117 	beq.w	8007da0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	f003 030f 	and.w	r3, r3, #15
 8007b82:	2101      	movs	r1, #1
 8007b84:	fa01 f303 	lsl.w	r3, r1, r3
 8007b88:	69f9      	ldr	r1, [r7, #28]
 8007b8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	634b      	str	r3, [r1, #52]	; 0x34
 8007b92:	e105      	b.n	8007da0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d110      	bne.n	8007bc6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	015a      	lsls	r2, r3, #5
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	4413      	add	r3, r2
 8007bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	0151      	lsls	r1, r2, #5
 8007bb6:	69fa      	ldr	r2, [r7, #28]
 8007bb8:	440a      	add	r2, r1
 8007bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007bc2:	6013      	str	r3, [r2, #0]
 8007bc4:	e00f      	b.n	8007be6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	015a      	lsls	r2, r3, #5
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	0151      	lsls	r1, r2, #5
 8007bd8:	69fa      	ldr	r2, [r7, #28]
 8007bda:	440a      	add	r2, r1
 8007bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007be4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	68d9      	ldr	r1, [r3, #12]
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	781a      	ldrb	r2, [r3, #0]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	b298      	uxth	r0, r3
 8007bf4:	79fb      	ldrb	r3, [r7, #7]
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 fa2b 	bl	8008056 <USB_WritePacket>
 8007c00:	e0ce      	b.n	8007da0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	0151      	lsls	r1, r2, #5
 8007c14:	69fa      	ldr	r2, [r7, #28]
 8007c16:	440a      	add	r2, r1
 8007c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c1c:	0cdb      	lsrs	r3, r3, #19
 8007c1e:	04db      	lsls	r3, r3, #19
 8007c20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	015a      	lsls	r2, r3, #5
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	4413      	add	r3, r2
 8007c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	69ba      	ldr	r2, [r7, #24]
 8007c32:	0151      	lsls	r1, r2, #5
 8007c34:	69fa      	ldr	r2, [r7, #28]
 8007c36:	440a      	add	r2, r1
 8007c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d126      	bne.n	8007c9c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5a:	691a      	ldr	r2, [r3, #16]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c64:	69b9      	ldr	r1, [r7, #24]
 8007c66:	0148      	lsls	r0, r1, #5
 8007c68:	69f9      	ldr	r1, [r7, #28]
 8007c6a:	4401      	add	r1, r0
 8007c6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c70:	4313      	orrs	r3, r2
 8007c72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	69ba      	ldr	r2, [r7, #24]
 8007c84:	0151      	lsls	r1, r2, #5
 8007c86:	69fa      	ldr	r2, [r7, #28]
 8007c88:	440a      	add	r2, r1
 8007c8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c92:	6113      	str	r3, [r2, #16]
 8007c94:	e036      	b.n	8007d04 <USB_EPStartXfer+0x3dc>
 8007c96:	bf00      	nop
 8007c98:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	695a      	ldr	r2, [r3, #20]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	1e5a      	subs	r2, r3, #1
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	015a      	lsls	r2, r3, #5
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cbe:	691a      	ldr	r2, [r3, #16]
 8007cc0:	8afb      	ldrh	r3, [r7, #22]
 8007cc2:	04d9      	lsls	r1, r3, #19
 8007cc4:	4b39      	ldr	r3, [pc, #228]	; (8007dac <USB_EPStartXfer+0x484>)
 8007cc6:	400b      	ands	r3, r1
 8007cc8:	69b9      	ldr	r1, [r7, #24]
 8007cca:	0148      	lsls	r0, r1, #5
 8007ccc:	69f9      	ldr	r1, [r7, #28]
 8007cce:	4401      	add	r1, r0
 8007cd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce4:	691a      	ldr	r2, [r3, #16]
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	8af9      	ldrh	r1, [r7, #22]
 8007cec:	fb01 f303 	mul.w	r3, r1, r3
 8007cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cf4:	69b9      	ldr	r1, [r7, #24]
 8007cf6:	0148      	lsls	r0, r1, #5
 8007cf8:	69f9      	ldr	r1, [r7, #28]
 8007cfa:	4401      	add	r1, r0
 8007cfc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d00:	4313      	orrs	r3, r2
 8007d02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d04:	79fb      	ldrb	r3, [r7, #7]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d10d      	bne.n	8007d26 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d009      	beq.n	8007d26 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	68d9      	ldr	r1, [r3, #12]
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	015a      	lsls	r2, r3, #5
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d22:	460a      	mov	r2, r1
 8007d24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	78db      	ldrb	r3, [r3, #3]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d128      	bne.n	8007d80 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d110      	bne.n	8007d60 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	015a      	lsls	r2, r3, #5
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	69ba      	ldr	r2, [r7, #24]
 8007d4e:	0151      	lsls	r1, r2, #5
 8007d50:	69fa      	ldr	r2, [r7, #28]
 8007d52:	440a      	add	r2, r1
 8007d54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d5c:	6013      	str	r3, [r2, #0]
 8007d5e:	e00f      	b.n	8007d80 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	69ba      	ldr	r2, [r7, #24]
 8007d70:	0151      	lsls	r1, r2, #5
 8007d72:	69fa      	ldr	r2, [r7, #28]
 8007d74:	440a      	add	r2, r1
 8007d76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	015a      	lsls	r2, r3, #5
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	4413      	add	r3, r2
 8007d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	69ba      	ldr	r2, [r7, #24]
 8007d90:	0151      	lsls	r1, r2, #5
 8007d92:	69fa      	ldr	r2, [r7, #28]
 8007d94:	440a      	add	r2, r1
 8007d96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3720      	adds	r7, #32
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	1ff80000 	.word	0x1ff80000

08007db0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b087      	sub	sp, #28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	785b      	ldrb	r3, [r3, #1]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	f040 80cd 	bne.w	8007f6c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d132      	bne.n	8007e40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	015a      	lsls	r2, r3, #5
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	4413      	add	r3, r2
 8007de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	0151      	lsls	r1, r2, #5
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	440a      	add	r2, r1
 8007df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007df4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007df8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007dfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	015a      	lsls	r2, r3, #5
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	4413      	add	r3, r2
 8007e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	0151      	lsls	r1, r2, #5
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	440a      	add	r2, r1
 8007e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	015a      	lsls	r2, r3, #5
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	4413      	add	r3, r2
 8007e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	0151      	lsls	r1, r2, #5
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	440a      	add	r2, r1
 8007e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e38:	0cdb      	lsrs	r3, r3, #19
 8007e3a:	04db      	lsls	r3, r3, #19
 8007e3c:	6113      	str	r3, [r2, #16]
 8007e3e:	e04e      	b.n	8007ede <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	693a      	ldr	r2, [r7, #16]
 8007e50:	0151      	lsls	r1, r2, #5
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	440a      	add	r2, r1
 8007e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e5a:	0cdb      	lsrs	r3, r3, #19
 8007e5c:	04db      	lsls	r3, r3, #19
 8007e5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	015a      	lsls	r2, r3, #5
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	4413      	add	r3, r2
 8007e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	0151      	lsls	r1, r2, #5
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	440a      	add	r2, r1
 8007e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e82:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	695a      	ldr	r2, [r3, #20]
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d903      	bls.n	8007e98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	689a      	ldr	r2, [r3, #8]
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	0151      	lsls	r1, r2, #5
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	440a      	add	r2, r1
 8007eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007eb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec4:	691a      	ldr	r2, [r3, #16]
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ece:	6939      	ldr	r1, [r7, #16]
 8007ed0:	0148      	lsls	r0, r1, #5
 8007ed2:	6979      	ldr	r1, [r7, #20]
 8007ed4:	4401      	add	r1, r0
 8007ed6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007eda:	4313      	orrs	r3, r2
 8007edc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007ede:	79fb      	ldrb	r3, [r7, #7]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d11e      	bne.n	8007f22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d009      	beq.n	8007f00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef8:	461a      	mov	r2, r3
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	0151      	lsls	r1, r2, #5
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	440a      	add	r2, r1
 8007f16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f1e:	6013      	str	r3, [r2, #0]
 8007f20:	e092      	b.n	8008048 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	015a      	lsls	r2, r3, #5
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	4413      	add	r3, r2
 8007f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	0151      	lsls	r1, r2, #5
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	440a      	add	r2, r1
 8007f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d07e      	beq.n	8008048 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	f003 030f 	and.w	r3, r3, #15
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f60:	6979      	ldr	r1, [r7, #20]
 8007f62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f66:	4313      	orrs	r3, r2
 8007f68:	634b      	str	r3, [r1, #52]	; 0x34
 8007f6a:	e06d      	b.n	8008048 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	015a      	lsls	r2, r3, #5
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	0151      	lsls	r1, r2, #5
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	440a      	add	r2, r1
 8007f82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f86:	0cdb      	lsrs	r3, r3, #19
 8007f88:	04db      	lsls	r3, r3, #19
 8007f8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	0151      	lsls	r1, r2, #5
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	440a      	add	r2, r1
 8007fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fa6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007faa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007fae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	695b      	ldr	r3, [r3, #20]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d003      	beq.n	8007fc0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	689a      	ldr	r2, [r3, #8]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	0151      	lsls	r1, r2, #5
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	440a      	add	r2, r1
 8007fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fec:	691a      	ldr	r2, [r3, #16]
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ff6:	6939      	ldr	r1, [r7, #16]
 8007ff8:	0148      	lsls	r0, r1, #5
 8007ffa:	6979      	ldr	r1, [r7, #20]
 8007ffc:	4401      	add	r1, r0
 8007ffe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008002:	4313      	orrs	r3, r2
 8008004:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008006:	79fb      	ldrb	r3, [r7, #7]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d10d      	bne.n	8008028 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d009      	beq.n	8008028 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	68d9      	ldr	r1, [r3, #12]
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008024:	460a      	mov	r2, r1
 8008026:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	4413      	add	r3, r2
 8008030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	0151      	lsls	r1, r2, #5
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	440a      	add	r2, r1
 800803e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008042:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008046:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	371c      	adds	r7, #28
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008056:	b480      	push	{r7}
 8008058:	b089      	sub	sp, #36	; 0x24
 800805a:	af00      	add	r7, sp, #0
 800805c:	60f8      	str	r0, [r7, #12]
 800805e:	60b9      	str	r1, [r7, #8]
 8008060:	4611      	mov	r1, r2
 8008062:	461a      	mov	r2, r3
 8008064:	460b      	mov	r3, r1
 8008066:	71fb      	strb	r3, [r7, #7]
 8008068:	4613      	mov	r3, r2
 800806a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008074:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008078:	2b00      	cmp	r3, #0
 800807a:	d11a      	bne.n	80080b2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800807c:	88bb      	ldrh	r3, [r7, #4]
 800807e:	3303      	adds	r3, #3
 8008080:	089b      	lsrs	r3, r3, #2
 8008082:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008084:	2300      	movs	r3, #0
 8008086:	61bb      	str	r3, [r7, #24]
 8008088:	e00f      	b.n	80080aa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800808a:	79fb      	ldrb	r3, [r7, #7]
 800808c:	031a      	lsls	r2, r3, #12
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	4413      	add	r3, r2
 8008092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008096:	461a      	mov	r2, r3
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	3304      	adds	r3, #4
 80080a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	3301      	adds	r3, #1
 80080a8:	61bb      	str	r3, [r7, #24]
 80080aa:	69ba      	ldr	r2, [r7, #24]
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d3eb      	bcc.n	800808a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3724      	adds	r7, #36	; 0x24
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b089      	sub	sp, #36	; 0x24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	4613      	mov	r3, r2
 80080cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80080d6:	88fb      	ldrh	r3, [r7, #6]
 80080d8:	3303      	adds	r3, #3
 80080da:	089b      	lsrs	r3, r3, #2
 80080dc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80080de:	2300      	movs	r3, #0
 80080e0:	61bb      	str	r3, [r7, #24]
 80080e2:	e00b      	b.n	80080fc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	3304      	adds	r3, #4
 80080f4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	3301      	adds	r3, #1
 80080fa:	61bb      	str	r3, [r7, #24]
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	429a      	cmp	r2, r3
 8008102:	d3ef      	bcc.n	80080e4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008104:	69fb      	ldr	r3, [r7, #28]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3724      	adds	r7, #36	; 0x24
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008112:	b480      	push	{r7}
 8008114:	b085      	sub	sp, #20
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	785b      	ldrb	r3, [r3, #1]
 800812a:	2b01      	cmp	r3, #1
 800812c:	d12c      	bne.n	8008188 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	db12      	blt.n	8008166 <USB_EPSetStall+0x54>
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00f      	beq.n	8008166 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	4413      	add	r3, r2
 800814e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	0151      	lsls	r1, r2, #5
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	440a      	add	r2, r1
 800815c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008160:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008164:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	015a      	lsls	r2, r3, #5
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4413      	add	r3, r2
 800816e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	0151      	lsls	r1, r2, #5
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	440a      	add	r2, r1
 800817c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008180:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	e02b      	b.n	80081e0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	db12      	blt.n	80081c0 <USB_EPSetStall+0xae>
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00f      	beq.n	80081c0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	015a      	lsls	r2, r3, #5
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4413      	add	r3, r2
 80081a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	0151      	lsls	r1, r2, #5
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	440a      	add	r2, r1
 80081b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081be:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	015a      	lsls	r2, r3, #5
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	4413      	add	r3, r2
 80081c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	0151      	lsls	r1, r2, #5
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	440a      	add	r2, r1
 80081d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b085      	sub	sp, #20
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	785b      	ldrb	r3, [r3, #1]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d128      	bne.n	800825c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	015a      	lsls	r2, r3, #5
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	4413      	add	r3, r2
 8008212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	0151      	lsls	r1, r2, #5
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	440a      	add	r2, r1
 8008220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008224:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008228:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	78db      	ldrb	r3, [r3, #3]
 800822e:	2b03      	cmp	r3, #3
 8008230:	d003      	beq.n	800823a <USB_EPClearStall+0x4c>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	78db      	ldrb	r3, [r3, #3]
 8008236:	2b02      	cmp	r3, #2
 8008238:	d138      	bne.n	80082ac <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4413      	add	r3, r2
 8008242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	0151      	lsls	r1, r2, #5
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	440a      	add	r2, r1
 8008250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008258:	6013      	str	r3, [r2, #0]
 800825a:	e027      	b.n	80082ac <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	015a      	lsls	r2, r3, #5
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4413      	add	r3, r2
 8008264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	0151      	lsls	r1, r2, #5
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	440a      	add	r2, r1
 8008272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008276:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800827a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	78db      	ldrb	r3, [r3, #3]
 8008280:	2b03      	cmp	r3, #3
 8008282:	d003      	beq.n	800828c <USB_EPClearStall+0x9e>
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	78db      	ldrb	r3, [r3, #3]
 8008288:	2b02      	cmp	r3, #2
 800828a:	d10f      	bne.n	80082ac <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	4413      	add	r3, r2
 8008294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	0151      	lsls	r1, r2, #5
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	440a      	add	r2, r1
 80082a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082aa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3714      	adds	r7, #20
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b085      	sub	sp, #20
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	460b      	mov	r3, r1
 80082c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80082dc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	78fb      	ldrb	r3, [r7, #3]
 80082e8:	011b      	lsls	r3, r3, #4
 80082ea:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80082ee:	68f9      	ldr	r1, [r7, #12]
 80082f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082f4:	4313      	orrs	r3, r2
 80082f6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008306:	b480      	push	{r7}
 8008308:	b085      	sub	sp, #20
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008320:	f023 0303 	bic.w	r3, r3, #3
 8008324:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008334:	f023 0302 	bic.w	r3, r3, #2
 8008338:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008362:	f023 0303 	bic.w	r3, r3, #3
 8008366:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008376:	f043 0302 	orr.w	r3, r3, #2
 800837a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800838a:	b480      	push	{r7}
 800838c:	b085      	sub	sp, #20
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	4013      	ands	r3, r2
 80083a0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80083a2:	68fb      	ldr	r3, [r7, #12]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3714      	adds	r7, #20
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083cc:	69db      	ldr	r3, [r3, #28]
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	4013      	ands	r3, r2
 80083d2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	0c1b      	lsrs	r3, r3, #16
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008400:	69db      	ldr	r3, [r3, #28]
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	4013      	ands	r3, r2
 8008406:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	b29b      	uxth	r3, r3
}
 800840c:	4618      	mov	r0, r3
 800840e:	3714      	adds	r7, #20
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	460b      	mov	r3, r1
 8008422:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008428:	78fb      	ldrb	r3, [r7, #3]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4413      	add	r3, r2
 8008430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800843e:	695b      	ldr	r3, [r3, #20]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	4013      	ands	r3, r2
 8008444:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008446:	68bb      	ldr	r3, [r7, #8]
}
 8008448:	4618      	mov	r0, r3
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008454:	b480      	push	{r7}
 8008456:	b087      	sub	sp, #28
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008476:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008478:	78fb      	ldrb	r3, [r7, #3]
 800847a:	f003 030f 	and.w	r3, r3, #15
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	fa22 f303 	lsr.w	r3, r2, r3
 8008484:	01db      	lsls	r3, r3, #7
 8008486:	b2db      	uxtb	r3, r3
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	4313      	orrs	r3, r2
 800848c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800848e:	78fb      	ldrb	r3, [r7, #3]
 8008490:	015a      	lsls	r2, r3, #5
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	4413      	add	r3, r2
 8008496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	693a      	ldr	r2, [r7, #16]
 800849e:	4013      	ands	r3, r2
 80084a0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084a2:	68bb      	ldr	r3, [r7, #8]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	371c      	adds	r7, #28
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	f003 0301 	and.w	r3, r3, #1
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80084ea:	f023 0307 	bic.w	r3, r3, #7
 80084ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008502:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
	...

08008514 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	460b      	mov	r3, r1
 800851e:	607a      	str	r2, [r7, #4]
 8008520:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	333c      	adds	r3, #60	; 0x3c
 800852a:	3304      	adds	r3, #4
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	4a26      	ldr	r2, [pc, #152]	; (80085cc <USB_EP0_OutStart+0xb8>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d90a      	bls.n	800854e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008544:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008548:	d101      	bne.n	800854e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	e037      	b.n	80085be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008554:	461a      	mov	r2, r3
 8008556:	2300      	movs	r3, #0
 8008558:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008568:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800856c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800857c:	f043 0318 	orr.w	r3, r3, #24
 8008580:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008590:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008594:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008596:	7afb      	ldrb	r3, [r7, #11]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d10f      	bne.n	80085bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a2:	461a      	mov	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80085ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	371c      	adds	r7, #28
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	4f54300a 	.word	0x4f54300a

080085d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80085d8:	2300      	movs	r3, #0
 80085da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3301      	adds	r3, #1
 80085e0:	60fb      	str	r3, [r7, #12]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	4a13      	ldr	r2, [pc, #76]	; (8008634 <USB_CoreReset+0x64>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d901      	bls.n	80085ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e01b      	b.n	8008626 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	daf2      	bge.n	80085dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80085f6:	2300      	movs	r3, #0
 80085f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	f043 0201 	orr.w	r2, r3, #1
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	3301      	adds	r3, #1
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4a09      	ldr	r2, [pc, #36]	; (8008634 <USB_CoreReset+0x64>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d901      	bls.n	8008618 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008614:	2303      	movs	r3, #3
 8008616:	e006      	b.n	8008626 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	f003 0301 	and.w	r3, r3, #1
 8008620:	2b01      	cmp	r3, #1
 8008622:	d0f0      	beq.n	8008606 <USB_CoreReset+0x36>

  return HAL_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	00030d40 	.word	0x00030d40

08008638 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800863c:	4904      	ldr	r1, [pc, #16]	; (8008650 <MX_FATFS_Init+0x18>)
 800863e:	4805      	ldr	r0, [pc, #20]	; (8008654 <MX_FATFS_Init+0x1c>)
 8008640:	f005 ffd6 	bl	800e5f0 <FATFS_LinkDriver>
 8008644:	4603      	mov	r3, r0
 8008646:	461a      	mov	r2, r3
 8008648:	4b03      	ldr	r3, [pc, #12]	; (8008658 <MX_FATFS_Init+0x20>)
 800864a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800864c:	bf00      	nop
 800864e:	bd80      	pop	{r7, pc}
 8008650:	20000b64 	.word	0x20000b64
 8008654:	08010da0 	.word	0x08010da0
 8008658:	20000b60 	.word	0x20000b60

0800865c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800865c:	b480      	push	{r7}
 800865e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008660:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008662:	4618      	mov	r0, r3
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008676:	f000 f896 	bl	80087a6 <BSP_SD_IsDetected>
 800867a:	4603      	mov	r3, r0
 800867c:	2b01      	cmp	r3, #1
 800867e:	d001      	beq.n	8008684 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e012      	b.n	80086aa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008684:	480b      	ldr	r0, [pc, #44]	; (80086b4 <BSP_SD_Init+0x48>)
 8008686:	f7fc f993 	bl	80049b0 <HAL_SD_Init>
 800868a:	4603      	mov	r3, r0
 800868c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800868e:	79fb      	ldrb	r3, [r7, #7]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d109      	bne.n	80086a8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008698:	4806      	ldr	r0, [pc, #24]	; (80086b4 <BSP_SD_Init+0x48>)
 800869a:	f7fc ff53 	bl	8005544 <HAL_SD_ConfigWideBusOperation>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80086a8:	79fb      	ldrb	r3, [r7, #7]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	2000089c 	.word	0x2000089c

080086b8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b086      	sub	sp, #24
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	68f9      	ldr	r1, [r7, #12]
 80086ce:	4806      	ldr	r0, [pc, #24]	; (80086e8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80086d0:	f7fc f9fe 	bl	8004ad0 <HAL_SD_ReadBlocks_DMA>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80086de:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3718      	adds	r7, #24
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	2000089c 	.word	0x2000089c

080086ec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b086      	sub	sp, #24
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	68f9      	ldr	r1, [r7, #12]
 8008702:	4806      	ldr	r0, [pc, #24]	; (800871c <BSP_SD_WriteBlocks_DMA+0x30>)
 8008704:	f7fc face 	bl	8004ca4 <HAL_SD_WriteBlocks_DMA>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008712:	7dfb      	ldrb	r3, [r7, #23]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	2000089c 	.word	0x2000089c

08008720 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008724:	4805      	ldr	r0, [pc, #20]	; (800873c <BSP_SD_GetCardState+0x1c>)
 8008726:	f7fc ff89 	bl	800563c <HAL_SD_GetCardState>
 800872a:	4603      	mov	r3, r0
 800872c:	2b04      	cmp	r3, #4
 800872e:	bf14      	ite	ne
 8008730:	2301      	movne	r3, #1
 8008732:	2300      	moveq	r3, #0
 8008734:	b2db      	uxtb	r3, r3
}
 8008736:	4618      	mov	r0, r3
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	2000089c 	.word	0x2000089c

08008740 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008748:	6879      	ldr	r1, [r7, #4]
 800874a:	4803      	ldr	r0, [pc, #12]	; (8008758 <BSP_SD_GetCardInfo+0x18>)
 800874c:	f7fc fece 	bl	80054ec <HAL_SD_GetCardInfo>
}
 8008750:	bf00      	nop
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	2000089c 	.word	0x2000089c

0800875c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008764:	f000 f818 	bl	8008798 <BSP_SD_AbortCallback>
}
 8008768:	bf00      	nop
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008778:	f000 f98c 	bl	8008a94 <BSP_SD_WriteCpltCallback>
}
 800877c:	bf00      	nop
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800878c:	f000 f98e 	bl	8008aac <BSP_SD_ReadCpltCallback>
}
 8008790:	bf00      	nop
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008798:	b480      	push	{r7}
 800879a:	af00      	add	r7, sp, #0

}
 800879c:	bf00      	nop
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr

080087a6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80087a6:	b480      	push	{r7}
 80087a8:	b083      	sub	sp, #12
 80087aa:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80087ac:	2301      	movs	r3, #1
 80087ae:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	b2db      	uxtb	r3, r3
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80087c8:	f7f9 f88e 	bl	80018e8 <HAL_GetTick>
 80087cc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80087ce:	e006      	b.n	80087de <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80087d0:	f7ff ffa6 	bl	8008720 <BSP_SD_GetCardState>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80087da:	2300      	movs	r3, #0
 80087dc:	e009      	b.n	80087f2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80087de:	f7f9 f883 	bl	80018e8 <HAL_GetTick>
 80087e2:	4602      	mov	r2, r0
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d8f0      	bhi.n	80087d0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80087ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	4603      	mov	r3, r0
 8008804:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008806:	4b0b      	ldr	r3, [pc, #44]	; (8008834 <SD_CheckStatus+0x38>)
 8008808:	2201      	movs	r2, #1
 800880a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800880c:	f7ff ff88 	bl	8008720 <BSP_SD_GetCardState>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d107      	bne.n	8008826 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008816:	4b07      	ldr	r3, [pc, #28]	; (8008834 <SD_CheckStatus+0x38>)
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	b2db      	uxtb	r3, r3
 800881c:	f023 0301 	bic.w	r3, r3, #1
 8008820:	b2da      	uxtb	r2, r3
 8008822:	4b04      	ldr	r3, [pc, #16]	; (8008834 <SD_CheckStatus+0x38>)
 8008824:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008826:	4b03      	ldr	r3, [pc, #12]	; (8008834 <SD_CheckStatus+0x38>)
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	b2db      	uxtb	r3, r3
}
 800882c:	4618      	mov	r0, r3
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	20000009 	.word	0x20000009

08008838 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	4603      	mov	r3, r0
 8008840:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008842:	f7ff ff13 	bl	800866c <BSP_SD_Init>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d107      	bne.n	800885c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800884c:	79fb      	ldrb	r3, [r7, #7]
 800884e:	4618      	mov	r0, r3
 8008850:	f7ff ffd4 	bl	80087fc <SD_CheckStatus>
 8008854:	4603      	mov	r3, r0
 8008856:	461a      	mov	r2, r3
 8008858:	4b04      	ldr	r3, [pc, #16]	; (800886c <SD_initialize+0x34>)
 800885a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800885c:	4b03      	ldr	r3, [pc, #12]	; (800886c <SD_initialize+0x34>)
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	b2db      	uxtb	r3, r3
}
 8008862:	4618      	mov	r0, r3
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	20000009 	.word	0x20000009

08008870 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	4603      	mov	r3, r0
 8008878:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800887a:	79fb      	ldrb	r3, [r7, #7]
 800887c:	4618      	mov	r0, r3
 800887e:	f7ff ffbd 	bl	80087fc <SD_CheckStatus>
 8008882:	4603      	mov	r3, r0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
 8008892:	60b9      	str	r1, [r7, #8]
 8008894:	607a      	str	r2, [r7, #4]
 8008896:	603b      	str	r3, [r7, #0]
 8008898:	4603      	mov	r3, r0
 800889a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80088a0:	f247 5030 	movw	r0, #30000	; 0x7530
 80088a4:	f7ff ff8c 	bl	80087c0 <SD_CheckStatusWithTimeout>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	da01      	bge.n	80088b2 <SD_read+0x26>
  {
    return res;
 80088ae:	7dfb      	ldrb	r3, [r7, #23]
 80088b0:	e03b      	b.n	800892a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	6879      	ldr	r1, [r7, #4]
 80088b6:	68b8      	ldr	r0, [r7, #8]
 80088b8:	f7ff fefe 	bl	80086b8 <BSP_SD_ReadBlocks_DMA>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d132      	bne.n	8008928 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80088c2:	4b1c      	ldr	r3, [pc, #112]	; (8008934 <SD_read+0xa8>)
 80088c4:	2200      	movs	r2, #0
 80088c6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80088c8:	f7f9 f80e 	bl	80018e8 <HAL_GetTick>
 80088cc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80088ce:	bf00      	nop
 80088d0:	4b18      	ldr	r3, [pc, #96]	; (8008934 <SD_read+0xa8>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d108      	bne.n	80088ea <SD_read+0x5e>
 80088d8:	f7f9 f806 	bl	80018e8 <HAL_GetTick>
 80088dc:	4602      	mov	r2, r0
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	f247 522f 	movw	r2, #29999	; 0x752f
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d9f2      	bls.n	80088d0 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80088ea:	4b12      	ldr	r3, [pc, #72]	; (8008934 <SD_read+0xa8>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d102      	bne.n	80088f8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	75fb      	strb	r3, [r7, #23]
 80088f6:	e017      	b.n	8008928 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80088f8:	4b0e      	ldr	r3, [pc, #56]	; (8008934 <SD_read+0xa8>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80088fe:	f7f8 fff3 	bl	80018e8 <HAL_GetTick>
 8008902:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008904:	e007      	b.n	8008916 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008906:	f7ff ff0b 	bl	8008720 <BSP_SD_GetCardState>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d102      	bne.n	8008916 <SD_read+0x8a>
          {
            res = RES_OK;
 8008910:	2300      	movs	r3, #0
 8008912:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8008914:	e008      	b.n	8008928 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008916:	f7f8 ffe7 	bl	80018e8 <HAL_GetTick>
 800891a:	4602      	mov	r2, r0
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	f247 522f 	movw	r2, #29999	; 0x752f
 8008924:	4293      	cmp	r3, r2
 8008926:	d9ee      	bls.n	8008906 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8008928:	7dfb      	ldrb	r3, [r7, #23]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3718      	adds	r7, #24
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	2000047c 	.word	0x2000047c

08008938 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	60b9      	str	r1, [r7, #8]
 8008940:	607a      	str	r2, [r7, #4]
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800894c:	4b24      	ldr	r3, [pc, #144]	; (80089e0 <SD_write+0xa8>)
 800894e:	2200      	movs	r2, #0
 8008950:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008952:	f247 5030 	movw	r0, #30000	; 0x7530
 8008956:	f7ff ff33 	bl	80087c0 <SD_CheckStatusWithTimeout>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	da01      	bge.n	8008964 <SD_write+0x2c>
  {
    return res;
 8008960:	7dfb      	ldrb	r3, [r7, #23]
 8008962:	e038      	b.n	80089d6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008964:	683a      	ldr	r2, [r7, #0]
 8008966:	6879      	ldr	r1, [r7, #4]
 8008968:	68b8      	ldr	r0, [r7, #8]
 800896a:	f7ff febf 	bl	80086ec <BSP_SD_WriteBlocks_DMA>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d12f      	bne.n	80089d4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8008974:	f7f8 ffb8 	bl	80018e8 <HAL_GetTick>
 8008978:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800897a:	bf00      	nop
 800897c:	4b18      	ldr	r3, [pc, #96]	; (80089e0 <SD_write+0xa8>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d108      	bne.n	8008996 <SD_write+0x5e>
 8008984:	f7f8 ffb0 	bl	80018e8 <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	f247 522f 	movw	r2, #29999	; 0x752f
 8008992:	4293      	cmp	r3, r2
 8008994:	d9f2      	bls.n	800897c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8008996:	4b12      	ldr	r3, [pc, #72]	; (80089e0 <SD_write+0xa8>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d102      	bne.n	80089a4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	75fb      	strb	r3, [r7, #23]
 80089a2:	e017      	b.n	80089d4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80089a4:	4b0e      	ldr	r3, [pc, #56]	; (80089e0 <SD_write+0xa8>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80089aa:	f7f8 ff9d 	bl	80018e8 <HAL_GetTick>
 80089ae:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80089b0:	e007      	b.n	80089c2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80089b2:	f7ff feb5 	bl	8008720 <BSP_SD_GetCardState>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d102      	bne.n	80089c2 <SD_write+0x8a>
          {
            res = RES_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	75fb      	strb	r3, [r7, #23]
            break;
 80089c0:	e008      	b.n	80089d4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80089c2:	f7f8 ff91 	bl	80018e8 <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	f247 522f 	movw	r2, #29999	; 0x752f
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d9ee      	bls.n	80089b2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80089d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3718      	adds	r7, #24
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	20000478 	.word	0x20000478

080089e4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08c      	sub	sp, #48	; 0x30
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	4603      	mov	r3, r0
 80089ec:	603a      	str	r2, [r7, #0]
 80089ee:	71fb      	strb	r3, [r7, #7]
 80089f0:	460b      	mov	r3, r1
 80089f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80089fa:	4b25      	ldr	r3, [pc, #148]	; (8008a90 <SD_ioctl+0xac>)
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	f003 0301 	and.w	r3, r3, #1
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d001      	beq.n	8008a0c <SD_ioctl+0x28>
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e03c      	b.n	8008a86 <SD_ioctl+0xa2>

  switch (cmd)
 8008a0c:	79bb      	ldrb	r3, [r7, #6]
 8008a0e:	2b03      	cmp	r3, #3
 8008a10:	d834      	bhi.n	8008a7c <SD_ioctl+0x98>
 8008a12:	a201      	add	r2, pc, #4	; (adr r2, 8008a18 <SD_ioctl+0x34>)
 8008a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a18:	08008a29 	.word	0x08008a29
 8008a1c:	08008a31 	.word	0x08008a31
 8008a20:	08008a49 	.word	0x08008a49
 8008a24:	08008a63 	.word	0x08008a63
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008a2e:	e028      	b.n	8008a82 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008a30:	f107 030c 	add.w	r3, r7, #12
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7ff fe83 	bl	8008740 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008a46:	e01c      	b.n	8008a82 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008a48:	f107 030c 	add.w	r3, r7, #12
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff fe77 	bl	8008740 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008a60:	e00f      	b.n	8008a82 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008a62:	f107 030c 	add.w	r3, r7, #12
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7ff fe6a 	bl	8008740 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6e:	0a5a      	lsrs	r2, r3, #9
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008a7a:	e002      	b.n	8008a82 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008a7c:	2304      	movs	r3, #4
 8008a7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008a82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3730      	adds	r7, #48	; 0x30
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	20000009 	.word	0x20000009

08008a94 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008a94:	b480      	push	{r7}
 8008a96:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008a98:	4b03      	ldr	r3, [pc, #12]	; (8008aa8 <BSP_SD_WriteCpltCallback+0x14>)
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	601a      	str	r2, [r3, #0]
}
 8008a9e:	bf00      	nop
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	20000478 	.word	0x20000478

08008aac <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008aac:	b480      	push	{r7}
 8008aae:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008ab0:	4b03      	ldr	r3, [pc, #12]	; (8008ac0 <BSP_SD_ReadCpltCallback+0x14>)
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	601a      	str	r2, [r3, #0]
}
 8008ab6:	bf00      	nop
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	2000047c 	.word	0x2000047c

08008ac4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8008ad0:	f44f 701d 	mov.w	r0, #628	; 0x274
 8008ad4:	f006 fb78 	bl	800f1c8 <malloc>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d105      	bne.n	8008aee <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008aea:	2302      	movs	r3, #2
 8008aec:	e034      	b.n	8008b58 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	7c1b      	ldrb	r3, [r3, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d115      	bne.n	8008b2a <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b02:	2202      	movs	r2, #2
 8008b04:	2101      	movs	r1, #1
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f006 f9c5 	bl	800ee96 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8008b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b18:	2202      	movs	r2, #2
 8008b1a:	2181      	movs	r1, #129	; 0x81
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f006 f9ba 	bl	800ee96 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2201      	movs	r2, #1
 8008b26:	871a      	strh	r2, [r3, #56]	; 0x38
 8008b28:	e012      	b.n	8008b50 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008b2a:	2340      	movs	r3, #64	; 0x40
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	2101      	movs	r1, #1
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f006 f9b0 	bl	800ee96 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8008b3e:	2340      	movs	r3, #64	; 0x40
 8008b40:	2202      	movs	r2, #2
 8008b42:	2181      	movs	r1, #129	; 0x81
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f006 f9a6 	bl	800ee96 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f98e 	bl	8008e72 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f006 f9b7 	bl	800eee2 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8008b7c:	2181      	movs	r1, #129	; 0x81
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f006 f9af 	bl	800eee2 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f9c7 	bl	8008f1e <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d009      	beq.n	8008bae <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f006 fb19 	bl	800f1d8 <free>
    pdev->pClassData = NULL;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bc8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d04d      	beq.n	8008c7a <USBD_MSC_Setup+0xc2>
 8008bde:	2b20      	cmp	r3, #32
 8008be0:	f040 80c6 	bne.w	8008d70 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	785b      	ldrb	r3, [r3, #1]
 8008be8:	2bfe      	cmp	r3, #254	; 0xfe
 8008bea:	d002      	beq.n	8008bf2 <USBD_MSC_Setup+0x3a>
 8008bec:	2bff      	cmp	r3, #255	; 0xff
 8008bee:	d024      	beq.n	8008c3a <USBD_MSC_Setup+0x82>
 8008bf0:	e03b      	b.n	8008c6a <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	885b      	ldrh	r3, [r3, #2]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d118      	bne.n	8008c2c <USBD_MSC_Setup+0x74>
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	88db      	ldrh	r3, [r3, #6]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d114      	bne.n	8008c2c <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	da0f      	bge.n	8008c2c <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	4798      	blx	r3
 8008c16:	4603      	mov	r3, r0
 8008c18:	461a      	mov	r2, r3
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	2201      	movs	r2, #1
 8008c22:	4619      	mov	r1, r3
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f002 fc58 	bl	800b4da <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008c2a:	e025      	b.n	8008c78 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f002 fbe2 	bl	800b3f8 <USBD_CtlError>
        ret = USBD_FAIL;
 8008c34:	2303      	movs	r3, #3
 8008c36:	75fb      	strb	r3, [r7, #23]
      break;
 8008c38:	e01e      	b.n	8008c78 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	885b      	ldrh	r3, [r3, #2]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d10c      	bne.n	8008c5c <USBD_MSC_Setup+0xa4>
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	88db      	ldrh	r3, [r3, #6]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d108      	bne.n	8008c5c <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	db03      	blt.n	8008c5c <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f940 	bl	8008eda <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008c5a:	e00d      	b.n	8008c78 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f002 fbca 	bl	800b3f8 <USBD_CtlError>
        ret = USBD_FAIL;
 8008c64:	2303      	movs	r3, #3
 8008c66:	75fb      	strb	r3, [r7, #23]
      break;
 8008c68:	e006      	b.n	8008c78 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f002 fbc3 	bl	800b3f8 <USBD_CtlError>
      ret = USBD_FAIL;
 8008c72:	2303      	movs	r3, #3
 8008c74:	75fb      	strb	r3, [r7, #23]
      break;
 8008c76:	bf00      	nop
    }
    break;
 8008c78:	e081      	b.n	8008d7e <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	785b      	ldrb	r3, [r3, #1]
 8008c7e:	2b0b      	cmp	r3, #11
 8008c80:	d86d      	bhi.n	8008d5e <USBD_MSC_Setup+0x1a6>
 8008c82:	a201      	add	r2, pc, #4	; (adr r2, 8008c88 <USBD_MSC_Setup+0xd0>)
 8008c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c88:	08008cb9 	.word	0x08008cb9
 8008c8c:	08008d2f 	.word	0x08008d2f
 8008c90:	08008d5f 	.word	0x08008d5f
 8008c94:	08008d5f 	.word	0x08008d5f
 8008c98:	08008d5f 	.word	0x08008d5f
 8008c9c:	08008d5f 	.word	0x08008d5f
 8008ca0:	08008d5f 	.word	0x08008d5f
 8008ca4:	08008d5f 	.word	0x08008d5f
 8008ca8:	08008d5f 	.word	0x08008d5f
 8008cac:	08008d5f 	.word	0x08008d5f
 8008cb0:	08008ce1 	.word	0x08008ce1
 8008cb4:	08008d09 	.word	0x08008d09
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d107      	bne.n	8008cd2 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008cc2:	f107 030e 	add.w	r3, r7, #14
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f002 fc05 	bl	800b4da <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008cd0:	e04d      	b.n	8008d6e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f002 fb8f 	bl	800b3f8 <USBD_CtlError>
        ret = USBD_FAIL;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8008cde:	e046      	b.n	8008d6e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d107      	bne.n	8008cfa <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	3304      	adds	r3, #4
 8008cee:	2201      	movs	r2, #1
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f002 fbf1 	bl	800b4da <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008cf8:	e039      	b.n	8008d6e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f002 fb7b 	bl	800b3f8 <USBD_CtlError>
        ret = USBD_FAIL;
 8008d02:	2303      	movs	r3, #3
 8008d04:	75fb      	strb	r3, [r7, #23]
      break;
 8008d06:	e032      	b.n	8008d6e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d106      	bne.n	8008d20 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	885b      	ldrh	r3, [r3, #2]
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	461a      	mov	r2, r3
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008d1e:	e026      	b.n	8008d6e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f002 fb68 	bl	800b3f8 <USBD_CtlError>
        ret = USBD_FAIL;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008d2c:	e01f      	b.n	8008d6e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d34:	2b03      	cmp	r3, #3
 8008d36:	d119      	bne.n	8008d6c <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	885b      	ldrh	r3, [r3, #2]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d115      	bne.n	8008d6c <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	889b      	ldrh	r3, [r3, #4]
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	4619      	mov	r1, r3
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f006 f8e9 	bl	800ef20 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	889b      	ldrh	r3, [r3, #4]
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fa5a 	bl	8009210 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8008d5c:	e006      	b.n	8008d6c <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f002 fb49 	bl	800b3f8 <USBD_CtlError>
      ret = USBD_FAIL;
 8008d66:	2303      	movs	r3, #3
 8008d68:	75fb      	strb	r3, [r7, #23]
      break;
 8008d6a:	e000      	b.n	8008d6e <USBD_MSC_Setup+0x1b6>
      break;
 8008d6c:	bf00      	nop
    }
    break;
 8008d6e:	e006      	b.n	8008d7e <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f002 fb40 	bl	800b3f8 <USBD_CtlError>
    ret = USBD_FAIL;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	75fb      	strb	r3, [r7, #23]
    break;
 8008d7c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8008d94:	78fb      	ldrb	r3, [r7, #3]
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f8d1 	bl	8008f40 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8008db4:	78fb      	ldrb	r3, [r7, #3]
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f8f2 	bl	8008fa2 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2220      	movs	r2, #32
 8008dd4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8008dd6:	4b03      	ldr	r3, [pc, #12]	; (8008de4 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr
 8008de4:	20000044 	.word	0x20000044

08008de8 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2220      	movs	r2, #32
 8008df4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8008df6:	4b03      	ldr	r3, [pc, #12]	; (8008e04 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr
 8008e04:	20000064 	.word	0x20000064

08008e08 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2220      	movs	r2, #32
 8008e14:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8008e16:	4b03      	ldr	r3, [pc, #12]	; (8008e24 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr
 8008e24:	20000084 	.word	0x20000084

08008e28 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	220a      	movs	r2, #10
 8008e34:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8008e36:	4b03      	ldr	r3, [pc, #12]	; (8008e44 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	200000a4 	.word	0x200000a4

08008e48 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d101      	bne.n	8008e5c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e004      	b.n	8008e66 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e80:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2000      	movs	r0, #0
 8008eb0:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8008eb2:	2101      	movs	r1, #1
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f006 f833 	bl	800ef20 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8008eba:	2181      	movs	r1, #129	; 0x81
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f006 f82f 	bl	800ef20 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8008ec8:	231f      	movs	r3, #31
 8008eca:	2101      	movs	r1, #1
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f006 f8f0 	bl	800f0b2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8008ed2:	bf00      	nop
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b084      	sub	sp, #16
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ee8:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8008ef6:	2181      	movs	r1, #129	; 0x81
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f006 f84f 	bl	800ef9c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8008efe:	2101      	movs	r1, #1
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f006 f84b 	bl	800ef9c <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8008f0c:	231f      	movs	r3, #31
 8008f0e:	2101      	movs	r1, #1
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f006 f8ce 	bl	800f0b2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8008f16:	bf00      	nop
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b085      	sub	sp, #20
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f2c:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	721a      	strb	r2, [r3, #8]
}
 8008f34:	bf00      	nop
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f52:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	7a1b      	ldrb	r3, [r3, #8]
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d004      	beq.n	8008f66 <MSC_BOT_DataIn+0x26>
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	db19      	blt.n	8008f94 <MSC_BOT_DataIn+0x54>
 8008f60:	2b04      	cmp	r3, #4
 8008f62:	dc17      	bgt.n	8008f94 <MSC_BOT_DataIn+0x54>
 8008f64:	e011      	b.n	8008f8a <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8008f72:	461a      	mov	r2, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f973 	bl	8009260 <SCSI_ProcessCmd>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	da0b      	bge.n	8008f98 <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008f80:	2101      	movs	r1, #1
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f8ea 	bl	800915c <MSC_BOT_SendCSW>
    }
    break;
 8008f88:	e006      	b.n	8008f98 <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f8e5 	bl	800915c <MSC_BOT_SendCSW>
    break;
 8008f92:	e002      	b.n	8008f9a <MSC_BOT_DataIn+0x5a>

  default:
    break;
 8008f94:	bf00      	nop
 8008f96:	e000      	b.n	8008f9a <MSC_BOT_DataIn+0x5a>
    break;
 8008f98:	bf00      	nop
  }
}
 8008f9a:	bf00      	nop
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b084      	sub	sp, #16
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	460b      	mov	r3, r1
 8008fac:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fb4:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	7a1b      	ldrb	r3, [r3, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d002      	beq.n	8008fc4 <MSC_BOT_DataOut+0x22>
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d004      	beq.n	8008fcc <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8008fc2:	e015      	b.n	8008ff0 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f817 	bl	8008ff8 <MSC_BOT_CBW_Decode>
      break;
 8008fca:	e011      	b.n	8008ff0 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8008fd8:	461a      	mov	r2, r3
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f940 	bl	8009260 <SCSI_ProcessCmd>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	da03      	bge.n	8008fee <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008fe6:	2101      	movs	r1, #1
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f8b7 	bl	800915c <MSC_BOT_SendCSW>
      break;
 8008fee:	bf00      	nop
  }
}
 8008ff0:	bf00      	nop
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009006:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8009020:	2101      	movs	r1, #1
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f006 f866 	bl	800f0f4 <USBD_LL_GetRxDataSize>
 8009028:	4603      	mov	r3, r0
 800902a:	2b1f      	cmp	r3, #31
 800902c:	d114      	bne.n	8009058 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8009034:	4a32      	ldr	r2, [pc, #200]	; (8009100 <MSC_BOT_CBW_Decode+0x108>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d10e      	bne.n	8009058 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8009040:	2b01      	cmp	r3, #1
 8009042:	d809      	bhi.n	8009058 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800904a:	2b00      	cmp	r3, #0
 800904c:	d004      	beq.n	8009058 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8009054:	2b10      	cmp	r3, #16
 8009056:	d90e      	bls.n	8009076 <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800905e:	2320      	movs	r3, #32
 8009060:	2205      	movs	r2, #5
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fcc9 	bl	80099fa <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2202      	movs	r2, #2
 800906c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f8a0 	bl	80091b4 <MSC_BOT_Abort>
 8009074:	e041      	b.n	80090fa <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8009082:	461a      	mov	r2, r3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f8eb 	bl	8009260 <SCSI_ProcessCmd>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	da0c      	bge.n	80090aa <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	7a1b      	ldrb	r3, [r3, #8]
 8009094:	2b05      	cmp	r3, #5
 8009096:	d104      	bne.n	80090a2 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8009098:	2101      	movs	r1, #1
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f85e 	bl	800915c <MSC_BOT_SendCSW>
 80090a0:	e02b      	b.n	80090fa <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f886 	bl	80091b4 <MSC_BOT_Abort>
 80090a8:	e027      	b.n	80090fa <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	7a1b      	ldrb	r3, [r3, #8]
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d022      	beq.n	80090f8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d01e      	beq.n	80090f8 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80090be:	2b03      	cmp	r3, #3
 80090c0:	d01a      	beq.n	80090f8 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d009      	beq.n	80090de <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f103 0110 	add.w	r1, r3, #16
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	461a      	mov	r2, r3
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f814 	bl	8009104 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80090dc:	e00d      	b.n	80090fa <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d104      	bne.n	80090f0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80090e6:	2100      	movs	r1, #0
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f837 	bl	800915c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80090ee:	e004      	b.n	80090fa <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f85f 	bl	80091b4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80090f6:	e000      	b.n	80090fa <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 80090f8:	bf00      	nop
    }
  }
}
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	43425355 	.word	0x43425355

08009104 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009116:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	4293      	cmp	r3, r2
 8009122:	bf28      	it	cs
 8009124:	4613      	movcs	r3, r2
 8009126:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	1ad2      	subs	r2, r2, r3
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	2200      	movs	r2, #0
 800913c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	2204      	movs	r2, #4
 8009144:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	2181      	movs	r1, #129	; 0x81
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f005 ff8f 	bl	800f070 <USBD_LL_Transmit>
}
 8009152:	bf00      	nop
 8009154:	3718      	adds	r7, #24
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
	...

0800915c <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	460b      	mov	r3, r1
 8009166:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800916e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4a0f      	ldr	r2, [pc, #60]	; (80091b0 <MSC_BOT_SendCSW+0x54>)
 8009174:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	78fa      	ldrb	r2, [r7, #3]
 800917c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800918c:	230d      	movs	r3, #13
 800918e:	2181      	movs	r1, #129	; 0x81
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f005 ff6d 	bl	800f070 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800919c:	231f      	movs	r3, #31
 800919e:	2101      	movs	r1, #1
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f005 ff86 	bl	800f0b2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 80091a6:	bf00      	nop
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	53425355 	.word	0x53425355

080091b4 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091c2:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10c      	bne.n	80091e8 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d007      	beq.n	80091e8 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d103      	bne.n	80091e8 <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80091e0:	2101      	movs	r1, #1
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f005 febb 	bl	800ef5e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80091e8:	2181      	movs	r1, #129	; 0x81
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f005 feb7 	bl	800ef5e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	7a5b      	ldrb	r3, [r3, #9]
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d107      	bne.n	8009208 <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80091f8:	2181      	movs	r1, #129	; 0x81
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f005 feaf 	bl	800ef5e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8009200:	2101      	movs	r1, #1
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f005 feab 	bl	800ef5e <USBD_LL_StallEP>
  }
}
 8009208:	bf00      	nop
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009222:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	7a5b      	ldrb	r3, [r3, #9]
 8009228:	2b02      	cmp	r3, #2
 800922a:	d108      	bne.n	800923e <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800922c:	2181      	movs	r1, #129	; 0x81
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f005 fe95 	bl	800ef5e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8009234:	2101      	movs	r1, #1
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f005 fe91 	bl	800ef5e <USBD_LL_StallEP>
 800923c:	e00d      	b.n	800925a <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800923e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009242:	2b00      	cmp	r3, #0
 8009244:	da08      	bge.n	8009258 <MSC_BOT_CplClrFeature+0x48>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	7a5b      	ldrb	r3, [r3, #9]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d004      	beq.n	8009258 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800924e:	2101      	movs	r1, #1
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7ff ff83 	bl	800915c <MSC_BOT_SendCSW>
 8009256:	e000      	b.n	800925a <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8009258:	bf00      	nop
  }
}
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	460b      	mov	r3, r1
 800926a:	607a      	str	r2, [r7, #4]
 800926c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009274:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	2b25      	cmp	r3, #37	; 0x25
 800927c:	d06e      	beq.n	800935c <SCSI_ProcessCmd+0xfc>
 800927e:	2b25      	cmp	r3, #37	; 0x25
 8009280:	dc11      	bgt.n	80092a6 <SCSI_ProcessCmd+0x46>
 8009282:	2b1a      	cmp	r3, #26
 8009284:	d04f      	beq.n	8009326 <SCSI_ProcessCmd+0xc6>
 8009286:	2b1a      	cmp	r3, #26
 8009288:	dc06      	bgt.n	8009298 <SCSI_ProcessCmd+0x38>
 800928a:	2b03      	cmp	r3, #3
 800928c:	d027      	beq.n	80092de <SCSI_ProcessCmd+0x7e>
 800928e:	2b12      	cmp	r3, #18
 8009290:	d02e      	beq.n	80092f0 <SCSI_ProcessCmd+0x90>
 8009292:	2b00      	cmp	r3, #0
 8009294:	d01a      	beq.n	80092cc <SCSI_ProcessCmd+0x6c>
 8009296:	e0a0      	b.n	80093da <SCSI_ProcessCmd+0x17a>
 8009298:	2b1e      	cmp	r3, #30
 800929a:	d03b      	beq.n	8009314 <SCSI_ProcessCmd+0xb4>
 800929c:	2b23      	cmp	r3, #35	; 0x23
 800929e:	d054      	beq.n	800934a <SCSI_ProcessCmd+0xea>
 80092a0:	2b1b      	cmp	r3, #27
 80092a2:	d02e      	beq.n	8009302 <SCSI_ProcessCmd+0xa2>
 80092a4:	e099      	b.n	80093da <SCSI_ProcessCmd+0x17a>
 80092a6:	2b5a      	cmp	r3, #90	; 0x5a
 80092a8:	d046      	beq.n	8009338 <SCSI_ProcessCmd+0xd8>
 80092aa:	2b5a      	cmp	r3, #90	; 0x5a
 80092ac:	dc07      	bgt.n	80092be <SCSI_ProcessCmd+0x5e>
 80092ae:	2b2a      	cmp	r3, #42	; 0x2a
 80092b0:	d078      	beq.n	80093a4 <SCSI_ProcessCmd+0x144>
 80092b2:	2b2f      	cmp	r3, #47	; 0x2f
 80092b4:	f000 8088 	beq.w	80093c8 <SCSI_ProcessCmd+0x168>
 80092b8:	2b28      	cmp	r3, #40	; 0x28
 80092ba:	d061      	beq.n	8009380 <SCSI_ProcessCmd+0x120>
 80092bc:	e08d      	b.n	80093da <SCSI_ProcessCmd+0x17a>
 80092be:	2ba8      	cmp	r3, #168	; 0xa8
 80092c0:	d067      	beq.n	8009392 <SCSI_ProcessCmd+0x132>
 80092c2:	2baa      	cmp	r3, #170	; 0xaa
 80092c4:	d077      	beq.n	80093b6 <SCSI_ProcessCmd+0x156>
 80092c6:	2b9e      	cmp	r3, #158	; 0x9e
 80092c8:	d051      	beq.n	800936e <SCSI_ProcessCmd+0x10e>
 80092ca:	e086      	b.n	80093da <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80092cc:	7afb      	ldrb	r3, [r7, #11]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	4619      	mov	r1, r3
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f000 f893 	bl	80093fe <SCSI_TestUnitReady>
 80092d8:	4603      	mov	r3, r0
 80092da:	75fb      	strb	r3, [r7, #23]
    break;
 80092dc:	e089      	b.n	80093f2 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 80092de:	7afb      	ldrb	r3, [r7, #11]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	4619      	mov	r1, r3
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f000 fb0f 	bl	8009908 <SCSI_RequestSense>
 80092ea:	4603      	mov	r3, r0
 80092ec:	75fb      	strb	r3, [r7, #23]
    break;
 80092ee:	e080      	b.n	80093f2 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 80092f0:	7afb      	ldrb	r3, [r7, #11]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	4619      	mov	r1, r3
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f000 f8cc 	bl	8009494 <SCSI_Inquiry>
 80092fc:	4603      	mov	r3, r0
 80092fe:	75fb      	strb	r3, [r7, #23]
    break;
 8009300:	e077      	b.n	80093f2 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8009302:	7afb      	ldrb	r3, [r7, #11]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	4619      	mov	r1, r3
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f000 fbb9 	bl	8009a80 <SCSI_StartStopUnit>
 800930e:	4603      	mov	r3, r0
 8009310:	75fb      	strb	r3, [r7, #23]
    break;
 8009312:	e06e      	b.n	80093f2 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8009314:	7afb      	ldrb	r3, [r7, #11]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	4619      	mov	r1, r3
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f000 fbfb 	bl	8009b16 <SCSI_AllowPreventRemovable>
 8009320:	4603      	mov	r3, r0
 8009322:	75fb      	strb	r3, [r7, #23]
    break;
 8009324:	e065      	b.n	80093f2 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8009326:	7afb      	ldrb	r3, [r7, #11]
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	4619      	mov	r1, r3
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f000 fa9f 	bl	8009870 <SCSI_ModeSense6>
 8009332:	4603      	mov	r3, r0
 8009334:	75fb      	strb	r3, [r7, #23]
    break;
 8009336:	e05c      	b.n	80093f2 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8009338:	7afb      	ldrb	r3, [r7, #11]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	4619      	mov	r1, r3
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f000 fabc 	bl	80098bc <SCSI_ModeSense10>
 8009344:	4603      	mov	r3, r0
 8009346:	75fb      	strb	r3, [r7, #23]
    break;
 8009348:	e053      	b.n	80093f2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800934a:	7afb      	ldrb	r3, [r7, #11]
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	4619      	mov	r1, r3
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f000 fa20 	bl	8009796 <SCSI_ReadFormatCapacity>
 8009356:	4603      	mov	r3, r0
 8009358:	75fb      	strb	r3, [r7, #23]
    break;
 800935a:	e04a      	b.n	80093f2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800935c:	7afb      	ldrb	r3, [r7, #11]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	4619      	mov	r1, r3
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f000 f904 	bl	8009570 <SCSI_ReadCapacity10>
 8009368:	4603      	mov	r3, r0
 800936a:	75fb      	strb	r3, [r7, #23]
    break;
 800936c:	e041      	b.n	80093f2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800936e:	7afb      	ldrb	r3, [r7, #11]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	4619      	mov	r1, r3
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f000 f96a 	bl	800964e <SCSI_ReadCapacity16>
 800937a:	4603      	mov	r3, r0
 800937c:	75fb      	strb	r3, [r7, #23]
    break;
 800937e:	e038      	b.n	80093f2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 8009380:	7afb      	ldrb	r3, [r7, #11]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	4619      	mov	r1, r3
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f000 fbe8 	bl	8009b5c <SCSI_Read10>
 800938c:	4603      	mov	r3, r0
 800938e:	75fb      	strb	r3, [r7, #23]
    break;
 8009390:	e02f      	b.n	80093f2 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 8009392:	7afb      	ldrb	r3, [r7, #11]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	4619      	mov	r1, r3
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f000 fc79 	bl	8009c90 <SCSI_Read12>
 800939e:	4603      	mov	r3, r0
 80093a0:	75fb      	strb	r3, [r7, #23]
    break;
 80093a2:	e026      	b.n	80093f2 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 80093a4:	7afb      	ldrb	r3, [r7, #11]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	4619      	mov	r1, r3
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f000 fd15 	bl	8009dda <SCSI_Write10>
 80093b0:	4603      	mov	r3, r0
 80093b2:	75fb      	strb	r3, [r7, #23]
    break;
 80093b4:	e01d      	b.n	80093f2 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 80093b6:	7afb      	ldrb	r3, [r7, #11]
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	4619      	mov	r1, r3
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f000 fdcb 	bl	8009f58 <SCSI_Write12>
 80093c2:	4603      	mov	r3, r0
 80093c4:	75fb      	strb	r3, [r7, #23]
    break;
 80093c6:	e014      	b.n	80093f2 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 80093c8:	7afb      	ldrb	r3, [r7, #11]
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	4619      	mov	r1, r3
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f000 fe91 	bl	800a0f6 <SCSI_Verify10>
 80093d4:	4603      	mov	r3, r0
 80093d6:	75fb      	strb	r3, [r7, #23]
    break;
 80093d8:	e00b      	b.n	80093f2 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80093da:	7af9      	ldrb	r1, [r7, #11]
 80093dc:	2320      	movs	r3, #32
 80093de:	2205      	movs	r2, #5
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 fb0a 	bl	80099fa <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	2202      	movs	r2, #2
 80093ea:	725a      	strb	r2, [r3, #9]
    ret = -1;
 80093ec:	23ff      	movs	r3, #255	; 0xff
 80093ee:	75fb      	strb	r3, [r7, #23]
    break;
 80093f0:	bf00      	nop
  }

  return ret;
 80093f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3718      	adds	r7, #24
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b086      	sub	sp, #24
 8009402:	af00      	add	r7, sp, #0
 8009404:	60f8      	str	r0, [r7, #12]
 8009406:	460b      	mov	r3, r1
 8009408:	607a      	str	r2, [r7, #4]
 800940a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009412:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00a      	beq.n	8009434 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009424:	2320      	movs	r3, #32
 8009426:	2205      	movs	r2, #5
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f000 fae6 	bl	80099fa <SCSI_SenseCode>

    return -1;
 800942e:	f04f 33ff 	mov.w	r3, #4294967295
 8009432:	e02a      	b.n	800948a <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800943a:	2b02      	cmp	r3, #2
 800943c:	d10b      	bne.n	8009456 <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800943e:	7af9      	ldrb	r1, [r7, #11]
 8009440:	233a      	movs	r3, #58	; 0x3a
 8009442:	2202      	movs	r2, #2
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f000 fad8 	bl	80099fa <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	2205      	movs	r2, #5
 800944e:	721a      	strb	r2, [r3, #8]
    return -1;
 8009450:	f04f 33ff 	mov.w	r3, #4294967295
 8009454:	e019      	b.n	800948a <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	7afa      	ldrb	r2, [r7, #11]
 8009460:	4610      	mov	r0, r2
 8009462:	4798      	blx	r3
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00b      	beq.n	8009482 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800946a:	7af9      	ldrb	r1, [r7, #11]
 800946c:	233a      	movs	r3, #58	; 0x3a
 800946e:	2202      	movs	r2, #2
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f000 fac2 	bl	80099fa <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	2205      	movs	r2, #5
 800947a:	721a      	strb	r2, [r3, #8]

    return -1;
 800947c:	f04f 33ff 	mov.w	r3, #4294967295
 8009480:	e003      	b.n	800948a <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	2200      	movs	r2, #0
 8009486:	60da      	str	r2, [r3, #12]

  return 0;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3718      	adds	r7, #24
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
	...

08009494 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b088      	sub	sp, #32
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	460b      	mov	r3, r1
 800949e:	607a      	str	r2, [r7, #4]
 80094a0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094a8:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10a      	bne.n	80094ca <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80094ba:	2320      	movs	r3, #32
 80094bc:	2205      	movs	r2, #5
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f000 fa9b 	bl	80099fa <SCSI_SenseCode>
    return -1;
 80094c4:	f04f 33ff 	mov.w	r3, #4294967295
 80094c8:	e04a      	b.n	8009560 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	3301      	adds	r3, #1
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	f003 0301 	and.w	r3, r3, #1
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d020      	beq.n	800951a <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	3302      	adds	r3, #2
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d105      	bne.n	80094ee <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80094e2:	2206      	movs	r2, #6
 80094e4:	4920      	ldr	r1, [pc, #128]	; (8009568 <SCSI_Inquiry+0xd4>)
 80094e6:	69b8      	ldr	r0, [r7, #24]
 80094e8:	f000 ff50 	bl	800a38c <SCSI_UpdateBotData>
 80094ec:	e037      	b.n	800955e <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	3302      	adds	r3, #2
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	2b80      	cmp	r3, #128	; 0x80
 80094f6:	d105      	bne.n	8009504 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80094f8:	2208      	movs	r2, #8
 80094fa:	491c      	ldr	r1, [pc, #112]	; (800956c <SCSI_Inquiry+0xd8>)
 80094fc:	69b8      	ldr	r0, [r7, #24]
 80094fe:	f000 ff45 	bl	800a38c <SCSI_UpdateBotData>
 8009502:	e02c      	b.n	800955e <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800950a:	2324      	movs	r3, #36	; 0x24
 800950c:	2205      	movs	r2, #5
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f000 fa73 	bl	80099fa <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8009514:	f04f 33ff 	mov.w	r3, #4294967295
 8009518:	e022      	b.n	8009560 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009520:	69d9      	ldr	r1, [r3, #28]
 8009522:	7afa      	ldrb	r2, [r7, #11]
 8009524:	4613      	mov	r3, r2
 8009526:	00db      	lsls	r3, r3, #3
 8009528:	4413      	add	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	440b      	add	r3, r1
 800952e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	3304      	adds	r3, #4
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	b29b      	uxth	r3, r3
 8009538:	3305      	adds	r3, #5
 800953a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	3304      	adds	r3, #4
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	b29b      	uxth	r3, r3
 8009544:	8bfa      	ldrh	r2, [r7, #30]
 8009546:	429a      	cmp	r2, r3
 8009548:	d303      	bcc.n	8009552 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	3304      	adds	r3, #4
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8009552:	8bfb      	ldrh	r3, [r7, #30]
 8009554:	461a      	mov	r2, r3
 8009556:	6979      	ldr	r1, [r7, #20]
 8009558:	69b8      	ldr	r0, [r7, #24]
 800955a:	f000 ff17 	bl	800a38c <SCSI_UpdateBotData>
  }

  return 0;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3720      	adds	r7, #32
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	200000b0 	.word	0x200000b0
 800956c:	200000b8 	.word	0x200000b8

08009570 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	460b      	mov	r3, r1
 800957a:	607a      	str	r2, [r7, #4]
 800957c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009584:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800959a:	7af8      	ldrb	r0, [r7, #11]
 800959c:	4798      	blx	r3
 800959e:	4603      	mov	r3, r0
 80095a0:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80095a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d104      	bne.n	80095b4 <SCSI_ReadCapacity10+0x44>
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d108      	bne.n	80095c6 <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80095b4:	7af9      	ldrb	r1, [r7, #11]
 80095b6:	233a      	movs	r3, #58	; 0x3a
 80095b8:	2202      	movs	r2, #2
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f000 fa1d 	bl	80099fa <SCSI_SenseCode>
    return -1;
 80095c0:	f04f 33ff 	mov.w	r3, #4294967295
 80095c4:	e03f      	b.n	8009646 <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80095cc:	3b01      	subs	r3, #1
 80095ce:	0e1b      	lsrs	r3, r3, #24
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80095dc:	3b01      	subs	r3, #1
 80095de:	0c1b      	lsrs	r3, r3, #16
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80095ec:	3b01      	subs	r3, #1
 80095ee:	0a1b      	lsrs	r3, r3, #8
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	3b01      	subs	r3, #1
 8009600:	b2da      	uxtb	r2, r3
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800960c:	161b      	asrs	r3, r3, #24
 800960e:	b2da      	uxtb	r2, r3
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800961a:	141b      	asrs	r3, r3, #16
 800961c:	b2da      	uxtb	r2, r3
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009628:	0a1b      	lsrs	r3, r3, #8
 800962a:	b29b      	uxth	r3, r3
 800962c:	b2da      	uxtb	r2, r3
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009638:	b2da      	uxtb	r2, r3
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	2208      	movs	r2, #8
 8009642:	60da      	str	r2, [r3, #12]

  return 0;
 8009644:	2300      	movs	r3, #0

}
 8009646:	4618      	mov	r0, r3
 8009648:	3718      	adds	r7, #24
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b088      	sub	sp, #32
 8009652:	af00      	add	r7, sp, #0
 8009654:	60f8      	str	r0, [r7, #12]
 8009656:	460b      	mov	r3, r1
 8009658:	607a      	str	r2, [r7, #4]
 800965a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009662:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	69ba      	ldr	r2, [r7, #24]
 800966e:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8009672:	69ba      	ldr	r2, [r7, #24]
 8009674:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8009678:	7af8      	ldrb	r0, [r7, #11]
 800967a:	4798      	blx	r3
 800967c:	4603      	mov	r3, r0
 800967e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8009680:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d104      	bne.n	8009692 <SCSI_ReadCapacity16+0x44>
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800968e:	2b02      	cmp	r3, #2
 8009690:	d108      	bne.n	80096a4 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009692:	7af9      	ldrb	r1, [r7, #11]
 8009694:	233a      	movs	r3, #58	; 0x3a
 8009696:	2202      	movs	r2, #2
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 f9ae 	bl	80099fa <SCSI_SenseCode>
    return -1;
 800969e:	f04f 33ff 	mov.w	r3, #4294967295
 80096a2:	e074      	b.n	800978e <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	330a      	adds	r3, #10
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	330b      	adds	r3, #11
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80096b4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	330c      	adds	r3, #12
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80096be:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	320d      	adds	r2, #13
 80096c4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80096c6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80096cc:	2300      	movs	r3, #0
 80096ce:	77fb      	strb	r3, [r7, #31]
 80096d0:	e007      	b.n	80096e2 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 80096d2:	7ffb      	ldrb	r3, [r7, #31]
 80096d4:	69ba      	ldr	r2, [r7, #24]
 80096d6:	4413      	add	r3, r2
 80096d8:	2200      	movs	r2, #0
 80096da:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80096dc:	7ffb      	ldrb	r3, [r7, #31]
 80096de:	3301      	adds	r3, #1
 80096e0:	77fb      	strb	r3, [r7, #31]
 80096e2:	7ffa      	ldrb	r2, [r7, #31]
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d3f2      	bcc.n	80096d2 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80096f2:	3b01      	subs	r3, #1
 80096f4:	0e1b      	lsrs	r3, r3, #24
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009702:	3b01      	subs	r3, #1
 8009704:	0c1b      	lsrs	r3, r3, #16
 8009706:	b2da      	uxtb	r2, r3
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009712:	3b01      	subs	r3, #1
 8009714:	0a1b      	lsrs	r3, r3, #8
 8009716:	b2da      	uxtb	r2, r3
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009722:	b2db      	uxtb	r3, r3
 8009724:	3b01      	subs	r3, #1
 8009726:	b2da      	uxtb	r2, r3
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009732:	161b      	asrs	r3, r3, #24
 8009734:	b2da      	uxtb	r2, r3
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009740:	141b      	asrs	r3, r3, #16
 8009742:	b2da      	uxtb	r2, r3
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800974e:	0a1b      	lsrs	r3, r3, #8
 8009750:	b29b      	uxth	r3, r3
 8009752:	b2da      	uxtb	r2, r3
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800975e:	b2da      	uxtb	r2, r3
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	330a      	adds	r3, #10
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	330b      	adds	r3, #11
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009774:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	330c      	adds	r3, #12
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800977e:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	320d      	adds	r2, #13
 8009784:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8009786:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	60da      	str	r2, [r3, #12]

  return 0;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3720      	adds	r7, #32
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b088      	sub	sp, #32
 800979a:	af00      	add	r7, sp, #0
 800979c:	60f8      	str	r0, [r7, #12]
 800979e:	460b      	mov	r3, r1
 80097a0:	607a      	str	r2, [r7, #4]
 80097a2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097aa:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	f107 0214 	add.w	r2, r7, #20
 80097b8:	f107 0110 	add.w	r1, r7, #16
 80097bc:	7af8      	ldrb	r0, [r7, #11]
 80097be:	4798      	blx	r3
 80097c0:	4603      	mov	r3, r0
 80097c2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80097c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d104      	bne.n	80097d6 <SCSI_ReadFormatCapacity+0x40>
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d108      	bne.n	80097e8 <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80097d6:	7af9      	ldrb	r1, [r7, #11]
 80097d8:	233a      	movs	r3, #58	; 0x3a
 80097da:	2202      	movs	r2, #2
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f000 f90c 	bl	80099fa <SCSI_SenseCode>
    return -1;
 80097e2:	f04f 33ff 	mov.w	r3, #4294967295
 80097e6:	e03e      	b.n	8009866 <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 80097e8:	2300      	movs	r3, #0
 80097ea:	83fb      	strh	r3, [r7, #30]
 80097ec:	e007      	b.n	80097fe <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 80097ee:	8bfb      	ldrh	r3, [r7, #30]
 80097f0:	69ba      	ldr	r2, [r7, #24]
 80097f2:	4413      	add	r3, r2
 80097f4:	2200      	movs	r2, #0
 80097f6:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80097f8:	8bfb      	ldrh	r3, [r7, #30]
 80097fa:	3301      	adds	r3, #1
 80097fc:	83fb      	strh	r3, [r7, #30]
 80097fe:	8bfb      	ldrh	r3, [r7, #30]
 8009800:	2b0b      	cmp	r3, #11
 8009802:	d9f4      	bls.n	80097ee <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	2208      	movs	r2, #8
 8009808:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	3b01      	subs	r3, #1
 800980e:	0e1b      	lsrs	r3, r3, #24
 8009810:	b2da      	uxtb	r2, r3
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	3b01      	subs	r3, #1
 800981a:	0c1b      	lsrs	r3, r3, #16
 800981c:	b2da      	uxtb	r2, r3
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	3b01      	subs	r3, #1
 8009826:	0a1b      	lsrs	r3, r3, #8
 8009828:	b2da      	uxtb	r2, r3
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	b2db      	uxtb	r3, r3
 8009832:	3b01      	subs	r3, #1
 8009834:	b2da      	uxtb	r2, r3
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	2202      	movs	r2, #2
 800983e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8009840:	8abb      	ldrh	r3, [r7, #20]
 8009842:	141b      	asrs	r3, r3, #16
 8009844:	b2da      	uxtb	r2, r3
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800984a:	8abb      	ldrh	r3, [r7, #20]
 800984c:	0a1b      	lsrs	r3, r3, #8
 800984e:	b29b      	uxth	r3, r3
 8009850:	b2da      	uxtb	r2, r3
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8009856:	8abb      	ldrh	r3, [r7, #20]
 8009858:	b2da      	uxtb	r2, r3
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	220c      	movs	r2, #12
 8009862:	60da      	str	r2, [r3, #12]

  return 0;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3720      	adds	r7, #32
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
	...

08009870 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	460b      	mov	r3, r1
 800987a:	607a      	str	r2, [r7, #4]
 800987c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009884:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8009886:	2317      	movs	r3, #23
 8009888:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	3304      	adds	r3, #4
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	b29b      	uxth	r3, r3
 8009892:	8afa      	ldrh	r2, [r7, #22]
 8009894:	429a      	cmp	r2, r3
 8009896:	d303      	bcc.n	80098a0 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	3304      	adds	r3, #4
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80098a0:	8afb      	ldrh	r3, [r7, #22]
 80098a2:	461a      	mov	r2, r3
 80098a4:	4904      	ldr	r1, [pc, #16]	; (80098b8 <SCSI_ModeSense6+0x48>)
 80098a6:	6938      	ldr	r0, [r7, #16]
 80098a8:	f000 fd70 	bl	800a38c <SCSI_UpdateBotData>

  return 0;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3718      	adds	r7, #24
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	200000c0 	.word	0x200000c0

080098bc <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	460b      	mov	r3, r1
 80098c6:	607a      	str	r2, [r7, #4]
 80098c8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098d0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80098d2:	231b      	movs	r3, #27
 80098d4:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	3308      	adds	r3, #8
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	b29b      	uxth	r3, r3
 80098de:	8afa      	ldrh	r2, [r7, #22]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d303      	bcc.n	80098ec <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	3308      	adds	r3, #8
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80098ec:	8afb      	ldrh	r3, [r7, #22]
 80098ee:	461a      	mov	r2, r3
 80098f0:	4904      	ldr	r1, [pc, #16]	; (8009904 <SCSI_ModeSense10+0x48>)
 80098f2:	6938      	ldr	r0, [r7, #16]
 80098f4:	f000 fd4a 	bl	800a38c <SCSI_UpdateBotData>

  return 0;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3718      	adds	r7, #24
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	200000d8 	.word	0x200000d8

08009908 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	460b      	mov	r3, r1
 8009912:	607a      	str	r2, [r7, #4]
 8009914:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800991c:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10a      	bne.n	800993e <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800992e:	2320      	movs	r3, #32
 8009930:	2205      	movs	r2, #5
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f000 f861 	bl	80099fa <SCSI_SenseCode>
    return -1;
 8009938:	f04f 33ff 	mov.w	r3, #4294967295
 800993c:	e059      	b.n	80099f2 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800993e:	2300      	movs	r3, #0
 8009940:	75fb      	strb	r3, [r7, #23]
 8009942:	e007      	b.n	8009954 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 8009944:	7dfb      	ldrb	r3, [r7, #23]
 8009946:	693a      	ldr	r2, [r7, #16]
 8009948:	4413      	add	r3, r2
 800994a:	2200      	movs	r2, #0
 800994c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800994e:	7dfb      	ldrb	r3, [r7, #23]
 8009950:	3301      	adds	r3, #1
 8009952:	75fb      	strb	r3, [r7, #23]
 8009954:	7dfb      	ldrb	r3, [r7, #23]
 8009956:	2b11      	cmp	r3, #17
 8009958:	d9f4      	bls.n	8009944 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	2270      	movs	r2, #112	; 0x70
 800995e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	220c      	movs	r2, #12
 8009964:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8009972:	429a      	cmp	r2, r3
 8009974:	d02e      	beq.n	80099d4 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800997c:	461a      	mov	r2, r3
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	3248      	adds	r2, #72	; 0x48
 8009982:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8009990:	693a      	ldr	r2, [r7, #16]
 8009992:	3348      	adds	r3, #72	; 0x48
 8009994:	00db      	lsls	r3, r3, #3
 8009996:	4413      	add	r3, r2
 8009998:	791a      	ldrb	r2, [r3, #4]
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	3348      	adds	r3, #72	; 0x48
 80099a8:	00db      	lsls	r3, r3, #3
 80099aa:	4413      	add	r3, r2
 80099ac:	795a      	ldrb	r2, [r3, #5]
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80099b8:	3301      	adds	r3, #1
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80099c8:	2b04      	cmp	r3, #4
 80099ca:	d103      	bne.n	80099d4 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	2212      	movs	r2, #18
 80099d8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	3304      	adds	r3, #4
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	2b12      	cmp	r3, #18
 80099e2:	d805      	bhi.n	80099f0 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	3304      	adds	r3, #4
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	461a      	mov	r2, r3
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3718      	adds	r7, #24
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80099fa:	b480      	push	{r7}
 80099fc:	b085      	sub	sp, #20
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	4608      	mov	r0, r1
 8009a04:	4611      	mov	r1, r2
 8009a06:	461a      	mov	r2, r3
 8009a08:	4603      	mov	r3, r0
 8009a0a:	70fb      	strb	r3, [r7, #3]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	70bb      	strb	r3, [r7, #2]
 8009a10:	4613      	mov	r3, r2
 8009a12:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a1a:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8009a22:	461a      	mov	r2, r3
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	3248      	adds	r2, #72	; 0x48
 8009a28:	78b9      	ldrb	r1, [r7, #2]
 8009a2a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	3348      	adds	r3, #72	; 0x48
 8009a38:	00db      	lsls	r3, r3, #3
 8009a3a:	4413      	add	r3, r2
 8009a3c:	787a      	ldrb	r2, [r7, #1]
 8009a3e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	3348      	adds	r3, #72	; 0x48
 8009a4a:	00db      	lsls	r3, r3, #3
 8009a4c:	4413      	add	r3, r2
 8009a4e:	2200      	movs	r2, #0
 8009a50:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8009a58:	3301      	adds	r3, #1
 8009a5a:	b2da      	uxtb	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8009a68:	2b04      	cmp	r3, #4
 8009a6a:	d103      	bne.n	8009a74 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 8009a74:	bf00      	nop
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b086      	sub	sp, #24
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	607a      	str	r2, [r7, #4]
 8009a8c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a94:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d10f      	bne.n	8009ac0 <SCSI_StartStopUnit+0x40>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	3304      	adds	r3, #4
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	f003 0303 	and.w	r3, r3, #3
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d108      	bne.n	8009ac0 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8009aae:	7af9      	ldrb	r1, [r7, #11]
 8009ab0:	2324      	movs	r3, #36	; 0x24
 8009ab2:	2205      	movs	r2, #5
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f7ff ffa0 	bl	80099fa <SCSI_SenseCode>

    return -1;
 8009aba:	f04f 33ff 	mov.w	r3, #4294967295
 8009abe:	e026      	b.n	8009b0e <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	f003 0303 	and.w	r3, r3, #3
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d104      	bne.n	8009ad8 <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8009ad6:	e016      	b.n	8009b06 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3304      	adds	r3, #4
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	f003 0303 	and.w	r3, r3, #3
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d104      	bne.n	8009af0 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	2202      	movs	r2, #2
 8009aea:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8009aee:	e00a      	b.n	8009b06 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	3304      	adds	r3, #4
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	f003 0303 	and.w	r3, r3, #3
 8009afa:	2b03      	cmp	r3, #3
 8009afc:	d103      	bne.n	8009b06 <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	60da      	str	r2, [r3, #12]

  return 0;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3718      	adds	r7, #24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009b16:	b480      	push	{r7}
 8009b18:	b087      	sub	sp, #28
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	60f8      	str	r0, [r7, #12]
 8009b1e:	460b      	mov	r3, r1
 8009b20:	607a      	str	r2, [r7, #4]
 8009b22:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b2a:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	3304      	adds	r3, #4
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d104      	bne.n	8009b40 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8009b3e:	e003      	b.n	8009b48 <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	60da      	str	r2, [r3, #12]

  return 0;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	371c      	adds	r7, #28
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	460b      	mov	r3, r1
 8009b66:	607a      	str	r2, [r7, #4]
 8009b68:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b70:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	7a1b      	ldrb	r3, [r3, #8]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d17c      	bne.n	8009c74 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8009b80:	b25b      	sxtb	r3, r3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	db0a      	blt.n	8009b9c <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009b8c:	2320      	movs	r3, #32
 8009b8e:	2205      	movs	r2, #5
 8009b90:	68f8      	ldr	r0, [r7, #12]
 8009b92:	f7ff ff32 	bl	80099fa <SCSI_SenseCode>
      return -1;
 8009b96:	f04f 33ff 	mov.w	r3, #4294967295
 8009b9a:	e075      	b.n	8009c88 <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d108      	bne.n	8009bb8 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009ba6:	7af9      	ldrb	r1, [r7, #11]
 8009ba8:	233a      	movs	r3, #58	; 0x3a
 8009baa:	2202      	movs	r2, #2
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f7ff ff24 	bl	80099fa <SCSI_SenseCode>

      return -1;
 8009bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb6:	e067      	b.n	8009c88 <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	7afa      	ldrb	r2, [r7, #11]
 8009bc2:	4610      	mov	r0, r2
 8009bc4:	4798      	blx	r3
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d008      	beq.n	8009bde <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009bcc:	7af9      	ldrb	r1, [r7, #11]
 8009bce:	233a      	movs	r3, #58	; 0x3a
 8009bd0:	2202      	movs	r2, #2
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f7ff ff11 	bl	80099fa <SCSI_SenseCode>
      return -1;
 8009bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bdc:	e054      	b.n	8009c88 <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	3302      	adds	r3, #2
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	3303      	adds	r3, #3
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009bee:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009bf8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	3205      	adds	r2, #5
 8009bfe:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8009c00:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	3307      	adds	r3, #7
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	021b      	lsls	r3, r3, #8
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	3208      	adds	r2, #8
 8009c14:	7812      	ldrb	r2, [r2, #0]
 8009c16:	431a      	orrs	r2, r3
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009c2a:	7af9      	ldrb	r1, [r7, #11]
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f000 fa95 	bl	800a15c <SCSI_CheckAddressRange>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	da02      	bge.n	8009c3e <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8009c38:	f04f 33ff 	mov.w	r3, #4294967295
 8009c3c:	e024      	b.n	8009c88 <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009c4a:	6979      	ldr	r1, [r7, #20]
 8009c4c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8009c50:	fb01 f303 	mul.w	r3, r1, r3
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d00a      	beq.n	8009c6e <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009c5e:	2320      	movs	r3, #32
 8009c60:	2205      	movs	r2, #5
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f7ff fec9 	bl	80099fa <SCSI_SenseCode>
      return -1;
 8009c68:	f04f 33ff 	mov.w	r3, #4294967295
 8009c6c:	e00c      	b.n	8009c88 <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2202      	movs	r2, #2
 8009c72:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c7a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8009c7c:	7afb      	ldrb	r3, [r7, #11]
 8009c7e:	4619      	mov	r1, r3
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f000 fa8d 	bl	800a1a0 <SCSI_ProcessRead>
 8009c86:	4603      	mov	r3, r0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3718      	adds	r7, #24
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	607a      	str	r2, [r7, #4]
 8009c9c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ca4:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	7a1b      	ldrb	r3, [r3, #8]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f040 8087 	bne.w	8009dbe <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8009cb6:	b25b      	sxtb	r3, r3
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	db0a      	blt.n	8009cd2 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009cc2:	2320      	movs	r3, #32
 8009cc4:	2205      	movs	r2, #5
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f7ff fe97 	bl	80099fa <SCSI_SenseCode>
      return -1;
 8009ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8009cd0:	e07f      	b.n	8009dd2 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d108      	bne.n	8009cee <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009cdc:	7af9      	ldrb	r1, [r7, #11]
 8009cde:	233a      	movs	r3, #58	; 0x3a
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f7ff fe89 	bl	80099fa <SCSI_SenseCode>
      return -1;
 8009ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cec:	e071      	b.n	8009dd2 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	7afa      	ldrb	r2, [r7, #11]
 8009cf8:	4610      	mov	r0, r2
 8009cfa:	4798      	blx	r3
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d008      	beq.n	8009d14 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009d02:	7af9      	ldrb	r1, [r7, #11]
 8009d04:	233a      	movs	r3, #58	; 0x3a
 8009d06:	2202      	movs	r2, #2
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f7ff fe76 	bl	80099fa <SCSI_SenseCode>
      return -1;
 8009d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d12:	e05e      	b.n	8009dd2 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	3302      	adds	r3, #2
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	3303      	adds	r3, #3
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009d24:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	3304      	adds	r3, #4
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009d2e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	3205      	adds	r2, #5
 8009d34:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8009d36:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	3306      	adds	r3, #6
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	3307      	adds	r3, #7
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009d4e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	3308      	adds	r3, #8
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8009d58:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	3209      	adds	r2, #9
 8009d5e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8009d60:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009d74:	7af9      	ldrb	r1, [r7, #11]
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f000 f9f0 	bl	800a15c <SCSI_CheckAddressRange>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	da02      	bge.n	8009d88 <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8009d82:	f04f 33ff 	mov.w	r3, #4294967295
 8009d86:	e024      	b.n	8009dd2 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009d94:	6979      	ldr	r1, [r7, #20]
 8009d96:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8009d9a:	fb01 f303 	mul.w	r3, r1, r3
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d00a      	beq.n	8009db8 <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009da8:	2320      	movs	r3, #32
 8009daa:	2205      	movs	r2, #5
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f7ff fe24 	bl	80099fa <SCSI_SenseCode>
      return -1;
 8009db2:	f04f 33ff 	mov.w	r3, #4294967295
 8009db6:	e00c      	b.n	8009dd2 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	2202      	movs	r2, #2
 8009dbc:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009dc4:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8009dc6:	7afb      	ldrb	r3, [r7, #11]
 8009dc8:	4619      	mov	r1, r3
 8009dca:	68f8      	ldr	r0, [r7, #12]
 8009dcc:	f000 f9e8 	bl	800a1a0 <SCSI_ProcessRead>
 8009dd0:	4603      	mov	r3, r0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3718      	adds	r7, #24
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b086      	sub	sp, #24
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	60f8      	str	r0, [r7, #12]
 8009de2:	460b      	mov	r3, r1
 8009de4:	607a      	str	r2, [r7, #4]
 8009de6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dee:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	7a1b      	ldrb	r3, [r3, #8]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f040 80a5 	bne.w	8009f44 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d10a      	bne.n	8009e1a <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009e0a:	2320      	movs	r3, #32
 8009e0c:	2205      	movs	r2, #5
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	f7ff fdf3 	bl	80099fa <SCSI_SenseCode>
      return -1;
 8009e14:	f04f 33ff 	mov.w	r3, #4294967295
 8009e18:	e09a      	b.n	8009f50 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8009e20:	b25b      	sxtb	r3, r3
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	da0a      	bge.n	8009e3c <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009e2c:	2320      	movs	r3, #32
 8009e2e:	2205      	movs	r2, #5
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f7ff fde2 	bl	80099fa <SCSI_SenseCode>
      return -1;
 8009e36:	f04f 33ff 	mov.w	r3, #4294967295
 8009e3a:	e089      	b.n	8009f50 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	7afa      	ldrb	r2, [r7, #11]
 8009e46:	4610      	mov	r0, r2
 8009e48:	4798      	blx	r3
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d008      	beq.n	8009e62 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009e50:	7af9      	ldrb	r1, [r7, #11]
 8009e52:	233a      	movs	r3, #58	; 0x3a
 8009e54:	2202      	movs	r2, #2
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	f7ff fdcf 	bl	80099fa <SCSI_SenseCode>
      return -1;
 8009e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e60:	e076      	b.n	8009f50 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	7afa      	ldrb	r2, [r7, #11]
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	4798      	blx	r3
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d008      	beq.n	8009e88 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8009e76:	7af9      	ldrb	r1, [r7, #11]
 8009e78:	2327      	movs	r3, #39	; 0x27
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f7ff fdbc 	bl	80099fa <SCSI_SenseCode>
      return -1;
 8009e82:	f04f 33ff 	mov.w	r3, #4294967295
 8009e86:	e063      	b.n	8009f50 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	3302      	adds	r3, #2
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	3303      	adds	r3, #3
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009e98:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8009ea2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	3205      	adds	r2, #5
 8009ea8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8009eaa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	3307      	adds	r3, #7
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	3208      	adds	r2, #8
 8009ebe:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8009ec0:	431a      	orrs	r2, r3
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009ed4:	7af9      	ldrb	r1, [r7, #11]
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f000 f940 	bl	800a15c <SCSI_CheckAddressRange>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	da02      	bge.n	8009ee8 <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8009ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee6:	e033      	b.n	8009f50 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009eee:	697a      	ldr	r2, [r7, #20]
 8009ef0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8009ef4:	fb02 f303 	mul.w	r3, r2, r3
 8009ef8:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d00a      	beq.n	8009f1c <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009f0c:	2320      	movs	r3, #32
 8009f0e:	2205      	movs	r2, #5
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f7ff fd72 	bl	80099fa <SCSI_SenseCode>
      return -1;
 8009f16:	f04f 33ff 	mov.w	r3, #4294967295
 8009f1a:	e019      	b.n	8009f50 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f22:	bf28      	it	cs
 8009f24:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8009f28:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	f103 0210 	add.w	r2, r3, #16
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	2101      	movs	r1, #1
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f005 f8b9 	bl	800f0b2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8009f40:	2300      	movs	r3, #0
 8009f42:	e005      	b.n	8009f50 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 8009f44:	7afb      	ldrb	r3, [r7, #11]
 8009f46:	4619      	mov	r1, r3
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f000 f99c 	bl	800a286 <SCSI_ProcessWrite>
 8009f4e:	4603      	mov	r3, r0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3718      	adds	r7, #24
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	460b      	mov	r3, r1
 8009f62:	607a      	str	r2, [r7, #4]
 8009f64:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f6c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	7a1b      	ldrb	r3, [r3, #8]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f040 80b5 	bne.w	800a0e2 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10a      	bne.n	8009f98 <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009f88:	2320      	movs	r3, #32
 8009f8a:	2205      	movs	r2, #5
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f7ff fd34 	bl	80099fa <SCSI_SenseCode>
      return -1;
 8009f92:	f04f 33ff 	mov.w	r3, #4294967295
 8009f96:	e0aa      	b.n	800a0ee <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8009f9e:	b25b      	sxtb	r3, r3
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	da0a      	bge.n	8009fba <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8009faa:	2320      	movs	r3, #32
 8009fac:	2205      	movs	r2, #5
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f7ff fd23 	bl	80099fa <SCSI_SenseCode>
      return -1;
 8009fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8009fb8:	e099      	b.n	800a0ee <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	7afa      	ldrb	r2, [r7, #11]
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	4798      	blx	r3
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00b      	beq.n	8009fe6 <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009fce:	7af9      	ldrb	r1, [r7, #11]
 8009fd0:	233a      	movs	r3, #58	; 0x3a
 8009fd2:	2202      	movs	r2, #2
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f7ff fd10 	bl	80099fa <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	2205      	movs	r2, #5
 8009fde:	721a      	strb	r2, [r3, #8]
      return -1;
 8009fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe4:	e083      	b.n	800a0ee <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	7afa      	ldrb	r2, [r7, #11]
 8009ff0:	4610      	mov	r0, r2
 8009ff2:	4798      	blx	r3
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00b      	beq.n	800a012 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8009ffa:	7af9      	ldrb	r1, [r7, #11]
 8009ffc:	2327      	movs	r3, #39	; 0x27
 8009ffe:	2202      	movs	r2, #2
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f7ff fcfa 	bl	80099fa <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	2205      	movs	r2, #5
 800a00a:	721a      	strb	r2, [r3, #8]
      return -1;
 800a00c:	f04f 33ff 	mov.w	r3, #4294967295
 800a010:	e06d      	b.n	800a0ee <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	3302      	adds	r3, #2
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	3303      	adds	r3, #3
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a022:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	3304      	adds	r3, #4
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800a02c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	3205      	adds	r2, #5
 800a032:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800a034:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	3306      	adds	r3, #6
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3307      	adds	r3, #7
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a04c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	3308      	adds	r3, #8
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800a056:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	3209      	adds	r2, #9
 800a05c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800a05e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a072:	7af9      	ldrb	r1, [r7, #11]
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f000 f871 	bl	800a15c <SCSI_CheckAddressRange>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	da02      	bge.n	800a086 <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800a080:	f04f 33ff 	mov.w	r3, #4294967295
 800a084:	e033      	b.n	800a0ee <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800a092:	fb02 f303 	mul.w	r3, r2, r3
 800a096:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d00a      	beq.n	800a0ba <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800a0aa:	2320      	movs	r3, #32
 800a0ac:	2205      	movs	r2, #5
 800a0ae:	68f8      	ldr	r0, [r7, #12]
 800a0b0:	f7ff fca3 	bl	80099fa <SCSI_SenseCode>
      return -1;
 800a0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b8:	e019      	b.n	800a0ee <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0c0:	bf28      	it	cs
 800a0c2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800a0c6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	f103 0210 	add.w	r2, r3, #16
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	2101      	movs	r1, #1
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f004 ffea 	bl	800f0b2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	e005      	b.n	800a0ee <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 800a0e2:	7afb      	ldrb	r3, [r7, #11]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f000 f8cd 	bl	800a286 <SCSI_ProcessWrite>
 800a0ec:	4603      	mov	r3, r0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3718      	adds	r7, #24
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b086      	sub	sp, #24
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	60f8      	str	r0, [r7, #12]
 800a0fe:	460b      	mov	r3, r1
 800a100:	607a      	str	r2, [r7, #4]
 800a102:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a10a:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	3301      	adds	r3, #1
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	f003 0302 	and.w	r3, r3, #2
 800a116:	2b00      	cmp	r3, #0
 800a118:	d008      	beq.n	800a12c <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800a11a:	7af9      	ldrb	r1, [r7, #11]
 800a11c:	2324      	movs	r3, #36	; 0x24
 800a11e:	2205      	movs	r2, #5
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f7ff fc6a 	bl	80099fa <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800a126:	f04f 33ff 	mov.w	r3, #4294967295
 800a12a:	e013      	b.n	800a154 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a138:	7af9      	ldrb	r1, [r7, #11]
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f000 f80e 	bl	800a15c <SCSI_CheckAddressRange>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	da02      	bge.n	800a14c <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 800a146:	f04f 33ff 	mov.w	r3, #4294967295
 800a14a:	e003      	b.n	800a154 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	2200      	movs	r2, #0
 800a150:	60da      	str	r2, [r3, #12]

  return 0;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3718      	adds	r7, #24
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	607a      	str	r2, [r7, #4]
 800a166:	603b      	str	r3, [r7, #0]
 800a168:	460b      	mov	r3, r1
 800a16a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a172:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	441a      	add	r2, r3
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800a180:	429a      	cmp	r2, r3
 800a182:	d908      	bls.n	800a196 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800a184:	7af9      	ldrb	r1, [r7, #11]
 800a186:	2321      	movs	r3, #33	; 0x21
 800a188:	2205      	movs	r2, #5
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	f7ff fc35 	bl	80099fa <SCSI_SenseCode>
    return -1;
 800a190:	f04f 33ff 	mov.w	r3, #4294967295
 800a194:	e000      	b.n	800a198 <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 800a196:	2300      	movs	r3, #0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3718      	adds	r7, #24
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800a1a0:	b590      	push	{r4, r7, lr}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1b2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800a1c0:	fb02 f303 	mul.w	r3, r2, r3
 800a1c4:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1cc:	bf28      	it	cs
 800a1ce:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800a1d2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1da:	691c      	ldr	r4, [r3, #16]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f103 0110 	add.w	r1, r3, #16
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	78f8      	ldrb	r0, [r7, #3]
 800a1fa:	47a0      	blx	r4
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	da08      	bge.n	800a214 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800a202:	78f9      	ldrb	r1, [r7, #3]
 800a204:	2311      	movs	r3, #17
 800a206:	2204      	movs	r2, #4
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7ff fbf6 	bl	80099fa <SCSI_SenseCode>
    return -1;
 800a20e:	f04f 33ff 	mov.w	r3, #4294967295
 800a212:	e034      	b.n	800a27e <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f103 0210 	add.w	r2, r3, #16
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	2181      	movs	r1, #129	; 0x81
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f004 ff26 	bl	800f070 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a230:	4619      	mov	r1, r3
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	fbb3 f3f1 	udiv	r3, r3, r1
 800a238:	441a      	add	r2, r3
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a24c:	4619      	mov	r1, r3
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	fbb3 f3f1 	udiv	r3, r3, r1
 800a254:	1ad2      	subs	r2, r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	1ad2      	subs	r2, r2, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a272:	2b00      	cmp	r3, #0
 800a274:	d102      	bne.n	800a27c <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2203      	movs	r2, #3
 800a27a:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3714      	adds	r7, #20
 800a282:	46bd      	mov	sp, r7
 800a284:	bd90      	pop	{r4, r7, pc}

0800a286 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800a286:	b590      	push	{r4, r7, lr}
 800a288:	b085      	sub	sp, #20
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
 800a28e:	460b      	mov	r3, r1
 800a290:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a298:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800a2a6:	fb02 f303 	mul.w	r3, r2, r3
 800a2aa:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2b2:	bf28      	it	cs
 800a2b4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800a2b8:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2c0:	695c      	ldr	r4, [r3, #20]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f103 0110 	add.w	r1, r3, #16
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	78f8      	ldrb	r0, [r7, #3]
 800a2e0:	47a0      	blx	r4
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	da08      	bge.n	800a2fa <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800a2e8:	78f9      	ldrb	r1, [r7, #3]
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	2204      	movs	r2, #4
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7ff fb83 	bl	80099fa <SCSI_SenseCode>
    return -1;
 800a2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2f8:	e044      	b.n	800a384 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a306:	4619      	mov	r1, r3
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a30e:	441a      	add	r2, r3
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800a322:	4619      	mov	r1, r3
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	fbb3 f3f1 	udiv	r3, r3, r1
 800a32a:	1ad2      	subs	r2, r2, r3
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	1ad2      	subs	r2, r2, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d104      	bne.n	800a356 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800a34c:	2100      	movs	r1, #0
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7fe ff04 	bl	800915c <MSC_BOT_SendCSW>
 800a354:	e015      	b.n	800a382 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800a362:	fb02 f303 	mul.w	r3, r2, r3
 800a366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a36a:	bf28      	it	cs
 800a36c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800a370:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f103 0210 	add.w	r2, r3, #16
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	2101      	movs	r1, #1
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f004 fe98 	bl	800f0b2 <USBD_LL_PrepareReceive>
  }

  return 0;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	3714      	adds	r7, #20
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd90      	pop	{r4, r7, pc}

0800a38c <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b087      	sub	sp, #28
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	4613      	mov	r3, r2
 800a398:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800a39a:	88fb      	ldrh	r3, [r7, #6]
 800a39c:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800a39e:	8afa      	ldrh	r2, [r7, #22]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800a3a4:	e00b      	b.n	800a3be <SCSI_UpdateBotData+0x32>
  {
    len--;
 800a3a6:	8afb      	ldrh	r3, [r7, #22]
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800a3ac:	8afb      	ldrh	r3, [r7, #22]
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	441a      	add	r2, r3
 800a3b2:	8afb      	ldrh	r3, [r7, #22]
 800a3b4:	7811      	ldrb	r1, [r2, #0]
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	460a      	mov	r2, r1
 800a3bc:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800a3be:	8afb      	ldrh	r3, [r7, #22]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1f0      	bne.n	800a3a6 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	371c      	adds	r7, #28
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b086      	sub	sp, #24
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	60f8      	str	r0, [r7, #12]
 800a3da:	60b9      	str	r1, [r7, #8]
 800a3dc:	4613      	mov	r3, r2
 800a3de:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d101      	bne.n	800a3ea <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	e025      	b.n	800a436 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d003      	beq.n	800a3fc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800a402:	2b00      	cmp	r3, #0
 800a404:	d003      	beq.n	800a40e <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d003      	beq.n	800a41c <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	79fa      	ldrb	r2, [r7, #7]
 800a428:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f004 fccc 	bl	800edc8 <USBD_LL_Init>
 800a430:	4603      	mov	r3, r0
 800a432:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a434:	7dfb      	ldrb	r3, [r7, #23]
}
 800a436:	4618      	mov	r0, r3
 800a438:	3718      	adds	r7, #24
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b084      	sub	sp, #16
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a448:	2300      	movs	r3, #0
 800a44a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d101      	bne.n	800a456 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a452:	2303      	movs	r3, #3
 800a454:	e010      	b.n	800a478 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	683a      	ldr	r2, [r7, #0]
 800a45a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a466:	f107 020e 	add.w	r2, r7, #14
 800a46a:	4610      	mov	r0, r2
 800a46c:	4798      	blx	r3
 800a46e:	4602      	mov	r2, r0
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f004 fce9 	bl	800ee60 <USBD_LL_Start>
 800a48e:	4603      	mov	r3, r0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	370c      	adds	r7, #12
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr

0800a4ae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b084      	sub	sp, #16
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d009      	beq.n	800a4dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	78fa      	ldrb	r2, [r7, #3]
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	4798      	blx	r3
 800a4d8:	4603      	mov	r3, r0
 800a4da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b082      	sub	sp, #8
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d007      	beq.n	800a50c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	78fa      	ldrb	r2, [r7, #3]
 800a506:	4611      	mov	r1, r2
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	4798      	blx	r3
  }

  return USBD_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b084      	sub	sp, #16
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a526:	6839      	ldr	r1, [r7, #0]
 800a528:	4618      	mov	r0, r3
 800a52a:	f000 ff2b 	bl	800b384 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2201      	movs	r2, #1
 800a532:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a53c:	461a      	mov	r2, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a54a:	f003 031f 	and.w	r3, r3, #31
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d00e      	beq.n	800a570 <USBD_LL_SetupStage+0x5a>
 800a552:	2b01      	cmp	r3, #1
 800a554:	d302      	bcc.n	800a55c <USBD_LL_SetupStage+0x46>
 800a556:	2b02      	cmp	r3, #2
 800a558:	d014      	beq.n	800a584 <USBD_LL_SetupStage+0x6e>
 800a55a:	e01d      	b.n	800a598 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a562:	4619      	mov	r1, r3
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 fa17 	bl	800a998 <USBD_StdDevReq>
 800a56a:	4603      	mov	r3, r0
 800a56c:	73fb      	strb	r3, [r7, #15]
      break;
 800a56e:	e020      	b.n	800a5b2 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a576:	4619      	mov	r1, r3
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 fa7b 	bl	800aa74 <USBD_StdItfReq>
 800a57e:	4603      	mov	r3, r0
 800a580:	73fb      	strb	r3, [r7, #15]
      break;
 800a582:	e016      	b.n	800a5b2 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a58a:	4619      	mov	r1, r3
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 fab7 	bl	800ab00 <USBD_StdEPReq>
 800a592:	4603      	mov	r3, r0
 800a594:	73fb      	strb	r3, [r7, #15]
      break;
 800a596:	e00c      	b.n	800a5b2 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a59e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a5a2:	b2db      	uxtb	r3, r3
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f004 fcd9 	bl	800ef5e <USBD_LL_StallEP>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a5b0:	bf00      	nop
  }

  return ret;
 800a5b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b086      	sub	sp, #24
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	607a      	str	r2, [r7, #4]
 800a5c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a5ca:	7afb      	ldrb	r3, [r7, #11]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d137      	bne.n	800a640 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a5d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5de:	2b03      	cmp	r3, #3
 800a5e0:	d14a      	bne.n	800a678 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	689a      	ldr	r2, [r3, #8]
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d913      	bls.n	800a616 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	689a      	ldr	r2, [r3, #8]
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	1ad2      	subs	r2, r2, r3
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	68da      	ldr	r2, [r3, #12]
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	4293      	cmp	r3, r2
 800a606:	bf28      	it	cs
 800a608:	4613      	movcs	r3, r2
 800a60a:	461a      	mov	r2, r3
 800a60c:	6879      	ldr	r1, [r7, #4]
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f000 ff8f 	bl	800b532 <USBD_CtlContinueRx>
 800a614:	e030      	b.n	800a678 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d00a      	beq.n	800a638 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a628:	2b03      	cmp	r3, #3
 800a62a:	d105      	bne.n	800a638 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	68f8      	ldr	r0, [r7, #12]
 800a636:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f000 ff8b 	bl	800b554 <USBD_CtlSendStatus>
 800a63e:	e01b      	b.n	800a678 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a646:	699b      	ldr	r3, [r3, #24]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d013      	beq.n	800a674 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a652:	2b03      	cmp	r3, #3
 800a654:	d10e      	bne.n	800a674 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	7afa      	ldrb	r2, [r7, #11]
 800a660:	4611      	mov	r1, r2
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	4798      	blx	r3
 800a666:	4603      	mov	r3, r0
 800a668:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a66a:	7dfb      	ldrb	r3, [r7, #23]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d003      	beq.n	800a678 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800a670:	7dfb      	ldrb	r3, [r7, #23]
 800a672:	e002      	b.n	800a67a <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a674:	2303      	movs	r3, #3
 800a676:	e000      	b.n	800a67a <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3718      	adds	r7, #24
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b086      	sub	sp, #24
 800a686:	af00      	add	r7, sp, #0
 800a688:	60f8      	str	r0, [r7, #12]
 800a68a:	460b      	mov	r3, r1
 800a68c:	607a      	str	r2, [r7, #4]
 800a68e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a690:	7afb      	ldrb	r3, [r7, #11]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d16a      	bne.n	800a76c <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	3314      	adds	r3, #20
 800a69a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d155      	bne.n	800a752 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	689a      	ldr	r2, [r3, #8]
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d914      	bls.n	800a6dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	689a      	ldr	r2, [r3, #8]
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	1ad2      	subs	r2, r2, r3
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	6879      	ldr	r1, [r7, #4]
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f000 ff21 	bl	800b510 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f004 fcec 	bl	800f0b2 <USBD_LL_PrepareReceive>
 800a6da:	e03a      	b.n	800a752 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	68da      	ldr	r2, [r3, #12]
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d11c      	bne.n	800a722 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d316      	bcc.n	800a722 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	685a      	ldr	r2, [r3, #4]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d20f      	bcs.n	800a722 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a702:	2200      	movs	r2, #0
 800a704:	2100      	movs	r1, #0
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f000 ff02 	bl	800b510 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a714:	2300      	movs	r3, #0
 800a716:	2200      	movs	r2, #0
 800a718:	2100      	movs	r1, #0
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f004 fcc9 	bl	800f0b2 <USBD_LL_PrepareReceive>
 800a720:	e017      	b.n	800a752 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00a      	beq.n	800a744 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a734:	2b03      	cmp	r3, #3
 800a736:	d105      	bne.n	800a744 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a744:	2180      	movs	r1, #128	; 0x80
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f004 fc09 	bl	800ef5e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f000 ff14 	bl	800b57a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d123      	bne.n	800a7a4 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f7ff fe9b 	bl	800a498 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2200      	movs	r2, #0
 800a766:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a76a:	e01b      	b.n	800a7a4 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a772:	695b      	ldr	r3, [r3, #20]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d013      	beq.n	800a7a0 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a77e:	2b03      	cmp	r3, #3
 800a780:	d10e      	bne.n	800a7a0 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	7afa      	ldrb	r2, [r7, #11]
 800a78c:	4611      	mov	r1, r2
 800a78e:	68f8      	ldr	r0, [r7, #12]
 800a790:	4798      	blx	r3
 800a792:	4603      	mov	r3, r0
 800a794:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a796:	7dfb      	ldrb	r3, [r7, #23]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d003      	beq.n	800a7a4 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800a79c:	7dfb      	ldrb	r3, [r7, #23]
 800a79e:	e002      	b.n	800a7a6 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a7a0:	2303      	movs	r3, #3
 800a7a2:	e000      	b.n	800a7a6 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3718      	adds	r7, #24
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b082      	sub	sp, #8
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d009      	beq.n	800a7f2 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	6852      	ldr	r2, [r2, #4]
 800a7ea:	b2d2      	uxtb	r2, r2
 800a7ec:	4611      	mov	r1, r2
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7f2:	2340      	movs	r3, #64	; 0x40
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f004 fb4c 	bl	800ee96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2240      	movs	r2, #64	; 0x40
 800a80a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a80e:	2340      	movs	r3, #64	; 0x40
 800a810:	2200      	movs	r2, #0
 800a812:	2180      	movs	r1, #128	; 0x80
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f004 fb3e 	bl	800ee96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2201      	movs	r2, #1
 800a81e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2240      	movs	r2, #64	; 0x40
 800a824:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	460b      	mov	r3, r1
 800a83a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	78fa      	ldrb	r2, [r7, #3]
 800a840:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a842:	2300      	movs	r3, #0
}
 800a844:	4618      	mov	r0, r3
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2204      	movs	r2, #4
 800a868:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	370c      	adds	r7, #12
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b083      	sub	sp, #12
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a888:	2b04      	cmp	r3, #4
 800a88a:	d105      	bne.n	800a898 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	370c      	adds	r7, #12
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr

0800a8a6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b082      	sub	sp, #8
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8b4:	2b03      	cmp	r3, #3
 800a8b6:	d10b      	bne.n	800a8d0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8be:	69db      	ldr	r3, [r3, #28]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d005      	beq.n	800a8d0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ca:	69db      	ldr	r3, [r3, #28]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a8da:	b480      	push	{r7}
 800a8dc:	b083      	sub	sp, #12
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	370c      	adds	r7, #12
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a90e:	b480      	push	{r7}
 800a910:	b083      	sub	sp, #12
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d009      	beq.n	800a952 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	6852      	ldr	r2, [r2, #4]
 800a94a:	b2d2      	uxtb	r2, r2
 800a94c:	4611      	mov	r1, r2
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	4798      	blx	r3
  }

  return USBD_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b087      	sub	sp, #28
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	3301      	adds	r3, #1
 800a972:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a97a:	8a3b      	ldrh	r3, [r7, #16]
 800a97c:	021b      	lsls	r3, r3, #8
 800a97e:	b21a      	sxth	r2, r3
 800a980:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a984:	4313      	orrs	r3, r2
 800a986:	b21b      	sxth	r3, r3
 800a988:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a98a:	89fb      	ldrh	r3, [r7, #14]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	371c      	adds	r7, #28
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9ae:	2b20      	cmp	r3, #32
 800a9b0:	d004      	beq.n	800a9bc <USBD_StdDevReq+0x24>
 800a9b2:	2b40      	cmp	r3, #64	; 0x40
 800a9b4:	d002      	beq.n	800a9bc <USBD_StdDevReq+0x24>
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00a      	beq.n	800a9d0 <USBD_StdDevReq+0x38>
 800a9ba:	e050      	b.n	800aa5e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	4798      	blx	r3
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ce:	e04b      	b.n	800aa68 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	785b      	ldrb	r3, [r3, #1]
 800a9d4:	2b09      	cmp	r3, #9
 800a9d6:	d83c      	bhi.n	800aa52 <USBD_StdDevReq+0xba>
 800a9d8:	a201      	add	r2, pc, #4	; (adr r2, 800a9e0 <USBD_StdDevReq+0x48>)
 800a9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9de:	bf00      	nop
 800a9e0:	0800aa35 	.word	0x0800aa35
 800a9e4:	0800aa49 	.word	0x0800aa49
 800a9e8:	0800aa53 	.word	0x0800aa53
 800a9ec:	0800aa3f 	.word	0x0800aa3f
 800a9f0:	0800aa53 	.word	0x0800aa53
 800a9f4:	0800aa13 	.word	0x0800aa13
 800a9f8:	0800aa09 	.word	0x0800aa09
 800a9fc:	0800aa53 	.word	0x0800aa53
 800aa00:	0800aa2b 	.word	0x0800aa2b
 800aa04:	0800aa1d 	.word	0x0800aa1d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800aa08:	6839      	ldr	r1, [r7, #0]
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f9ce 	bl	800adac <USBD_GetDescriptor>
      break;
 800aa10:	e024      	b.n	800aa5c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800aa12:	6839      	ldr	r1, [r7, #0]
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 fb33 	bl	800b080 <USBD_SetAddress>
      break;
 800aa1a:	e01f      	b.n	800aa5c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800aa1c:	6839      	ldr	r1, [r7, #0]
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 fb70 	bl	800b104 <USBD_SetConfig>
 800aa24:	4603      	mov	r3, r0
 800aa26:	73fb      	strb	r3, [r7, #15]
      break;
 800aa28:	e018      	b.n	800aa5c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 fc0d 	bl	800b24c <USBD_GetConfig>
      break;
 800aa32:	e013      	b.n	800aa5c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800aa34:	6839      	ldr	r1, [r7, #0]
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 fc3c 	bl	800b2b4 <USBD_GetStatus>
      break;
 800aa3c:	e00e      	b.n	800aa5c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800aa3e:	6839      	ldr	r1, [r7, #0]
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 fc6a 	bl	800b31a <USBD_SetFeature>
      break;
 800aa46:	e009      	b.n	800aa5c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800aa48:	6839      	ldr	r1, [r7, #0]
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fc79 	bl	800b342 <USBD_ClrFeature>
      break;
 800aa50:	e004      	b.n	800aa5c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800aa52:	6839      	ldr	r1, [r7, #0]
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 fccf 	bl	800b3f8 <USBD_CtlError>
      break;
 800aa5a:	bf00      	nop
    }
    break;
 800aa5c:	e004      	b.n	800aa68 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800aa5e:	6839      	ldr	r1, [r7, #0]
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 fcc9 	bl	800b3f8 <USBD_CtlError>
    break;
 800aa66:	bf00      	nop
  }

  return ret;
 800aa68:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3710      	adds	r7, #16
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop

0800aa74 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa8a:	2b20      	cmp	r3, #32
 800aa8c:	d003      	beq.n	800aa96 <USBD_StdItfReq+0x22>
 800aa8e:	2b40      	cmp	r3, #64	; 0x40
 800aa90:	d001      	beq.n	800aa96 <USBD_StdItfReq+0x22>
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d12a      	bne.n	800aaec <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d81d      	bhi.n	800aade <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	889b      	ldrh	r3, [r3, #4]
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d813      	bhi.n	800aad4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	6839      	ldr	r1, [r7, #0]
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	4798      	blx	r3
 800aaba:	4603      	mov	r3, r0
 800aabc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	88db      	ldrh	r3, [r3, #6]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d110      	bne.n	800aae8 <USBD_StdItfReq+0x74>
 800aac6:	7bfb      	ldrb	r3, [r7, #15]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d10d      	bne.n	800aae8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 fd41 	bl	800b554 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800aad2:	e009      	b.n	800aae8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800aad4:	6839      	ldr	r1, [r7, #0]
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 fc8e 	bl	800b3f8 <USBD_CtlError>
      break;
 800aadc:	e004      	b.n	800aae8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800aade:	6839      	ldr	r1, [r7, #0]
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fc89 	bl	800b3f8 <USBD_CtlError>
      break;
 800aae6:	e000      	b.n	800aaea <USBD_StdItfReq+0x76>
      break;
 800aae8:	bf00      	nop
    }
    break;
 800aaea:	e004      	b.n	800aaf6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800aaec:	6839      	ldr	r1, [r7, #0]
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fc82 	bl	800b3f8 <USBD_CtlError>
    break;
 800aaf4:	bf00      	nop
  }

  return ret;
 800aaf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	889b      	ldrh	r3, [r3, #4]
 800ab12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab1c:	2b20      	cmp	r3, #32
 800ab1e:	d004      	beq.n	800ab2a <USBD_StdEPReq+0x2a>
 800ab20:	2b40      	cmp	r3, #64	; 0x40
 800ab22:	d002      	beq.n	800ab2a <USBD_StdEPReq+0x2a>
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d00a      	beq.n	800ab3e <USBD_StdEPReq+0x3e>
 800ab28:	e135      	b.n	800ad96 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	6839      	ldr	r1, [r7, #0]
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	4798      	blx	r3
 800ab38:	4603      	mov	r3, r0
 800ab3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab3c:	e130      	b.n	800ada0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	785b      	ldrb	r3, [r3, #1]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d03e      	beq.n	800abc4 <USBD_StdEPReq+0xc4>
 800ab46:	2b03      	cmp	r3, #3
 800ab48:	d002      	beq.n	800ab50 <USBD_StdEPReq+0x50>
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d077      	beq.n	800ac3e <USBD_StdEPReq+0x13e>
 800ab4e:	e11c      	b.n	800ad8a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	d002      	beq.n	800ab60 <USBD_StdEPReq+0x60>
 800ab5a:	2b03      	cmp	r3, #3
 800ab5c:	d015      	beq.n	800ab8a <USBD_StdEPReq+0x8a>
 800ab5e:	e02b      	b.n	800abb8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab60:	7bbb      	ldrb	r3, [r7, #14]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00c      	beq.n	800ab80 <USBD_StdEPReq+0x80>
 800ab66:	7bbb      	ldrb	r3, [r7, #14]
 800ab68:	2b80      	cmp	r3, #128	; 0x80
 800ab6a:	d009      	beq.n	800ab80 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab6c:	7bbb      	ldrb	r3, [r7, #14]
 800ab6e:	4619      	mov	r1, r3
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f004 f9f4 	bl	800ef5e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab76:	2180      	movs	r1, #128	; 0x80
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f004 f9f0 	bl	800ef5e <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ab7e:	e020      	b.n	800abc2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800ab80:	6839      	ldr	r1, [r7, #0]
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 fc38 	bl	800b3f8 <USBD_CtlError>
        break;
 800ab88:	e01b      	b.n	800abc2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	885b      	ldrh	r3, [r3, #2]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d10e      	bne.n	800abb0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ab92:	7bbb      	ldrb	r3, [r7, #14]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00b      	beq.n	800abb0 <USBD_StdEPReq+0xb0>
 800ab98:	7bbb      	ldrb	r3, [r7, #14]
 800ab9a:	2b80      	cmp	r3, #128	; 0x80
 800ab9c:	d008      	beq.n	800abb0 <USBD_StdEPReq+0xb0>
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	88db      	ldrh	r3, [r3, #6]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d104      	bne.n	800abb0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800aba6:	7bbb      	ldrb	r3, [r7, #14]
 800aba8:	4619      	mov	r1, r3
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f004 f9d7 	bl	800ef5e <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 fccf 	bl	800b554 <USBD_CtlSendStatus>

        break;
 800abb6:	e004      	b.n	800abc2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800abb8:	6839      	ldr	r1, [r7, #0]
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 fc1c 	bl	800b3f8 <USBD_CtlError>
        break;
 800abc0:	bf00      	nop
      }
      break;
 800abc2:	e0e7      	b.n	800ad94 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abca:	2b02      	cmp	r3, #2
 800abcc:	d002      	beq.n	800abd4 <USBD_StdEPReq+0xd4>
 800abce:	2b03      	cmp	r3, #3
 800abd0:	d015      	beq.n	800abfe <USBD_StdEPReq+0xfe>
 800abd2:	e02d      	b.n	800ac30 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abd4:	7bbb      	ldrb	r3, [r7, #14]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d00c      	beq.n	800abf4 <USBD_StdEPReq+0xf4>
 800abda:	7bbb      	ldrb	r3, [r7, #14]
 800abdc:	2b80      	cmp	r3, #128	; 0x80
 800abde:	d009      	beq.n	800abf4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800abe0:	7bbb      	ldrb	r3, [r7, #14]
 800abe2:	4619      	mov	r1, r3
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f004 f9ba 	bl	800ef5e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800abea:	2180      	movs	r1, #128	; 0x80
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f004 f9b6 	bl	800ef5e <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800abf2:	e023      	b.n	800ac3c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800abf4:	6839      	ldr	r1, [r7, #0]
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 fbfe 	bl	800b3f8 <USBD_CtlError>
        break;
 800abfc:	e01e      	b.n	800ac3c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	885b      	ldrh	r3, [r3, #2]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d119      	bne.n	800ac3a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ac06:	7bbb      	ldrb	r3, [r7, #14]
 800ac08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d004      	beq.n	800ac1a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ac10:	7bbb      	ldrb	r3, [r7, #14]
 800ac12:	4619      	mov	r1, r3
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f004 f9c1 	bl	800ef9c <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 fc9a 	bl	800b554 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	6839      	ldr	r1, [r7, #0]
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	4798      	blx	r3
        }
        break;
 800ac2e:	e004      	b.n	800ac3a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800ac30:	6839      	ldr	r1, [r7, #0]
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 fbe0 	bl	800b3f8 <USBD_CtlError>
        break;
 800ac38:	e000      	b.n	800ac3c <USBD_StdEPReq+0x13c>
        break;
 800ac3a:	bf00      	nop
      }
      break;
 800ac3c:	e0aa      	b.n	800ad94 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	d002      	beq.n	800ac4e <USBD_StdEPReq+0x14e>
 800ac48:	2b03      	cmp	r3, #3
 800ac4a:	d032      	beq.n	800acb2 <USBD_StdEPReq+0x1b2>
 800ac4c:	e097      	b.n	800ad7e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac4e:	7bbb      	ldrb	r3, [r7, #14]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d007      	beq.n	800ac64 <USBD_StdEPReq+0x164>
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
 800ac56:	2b80      	cmp	r3, #128	; 0x80
 800ac58:	d004      	beq.n	800ac64 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800ac5a:	6839      	ldr	r1, [r7, #0]
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 fbcb 	bl	800b3f8 <USBD_CtlError>
          break;
 800ac62:	e091      	b.n	800ad88 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	da0b      	bge.n	800ac84 <USBD_StdEPReq+0x184>
 800ac6c:	7bbb      	ldrb	r3, [r7, #14]
 800ac6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac72:	4613      	mov	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	3310      	adds	r3, #16
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	4413      	add	r3, r2
 800ac80:	3304      	adds	r3, #4
 800ac82:	e00b      	b.n	800ac9c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ac84:	7bbb      	ldrb	r3, [r7, #14]
 800ac86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	4413      	add	r3, r2
 800ac9a:	3304      	adds	r3, #4
 800ac9c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	2200      	movs	r2, #0
 800aca2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	2202      	movs	r2, #2
 800aca8:	4619      	mov	r1, r3
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 fc15 	bl	800b4da <USBD_CtlSendData>
        break;
 800acb0:	e06a      	b.n	800ad88 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800acb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	da11      	bge.n	800acde <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800acba:	7bbb      	ldrb	r3, [r7, #14]
 800acbc:	f003 020f 	and.w	r2, r3, #15
 800acc0:	6879      	ldr	r1, [r7, #4]
 800acc2:	4613      	mov	r3, r2
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	4413      	add	r3, r2
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	440b      	add	r3, r1
 800accc:	3324      	adds	r3, #36	; 0x24
 800acce:	881b      	ldrh	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d117      	bne.n	800ad04 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800acd4:	6839      	ldr	r1, [r7, #0]
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fb8e 	bl	800b3f8 <USBD_CtlError>
            break;
 800acdc:	e054      	b.n	800ad88 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800acde:	7bbb      	ldrb	r3, [r7, #14]
 800ace0:	f003 020f 	and.w	r2, r3, #15
 800ace4:	6879      	ldr	r1, [r7, #4]
 800ace6:	4613      	mov	r3, r2
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	4413      	add	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	440b      	add	r3, r1
 800acf0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800acf4:	881b      	ldrh	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d104      	bne.n	800ad04 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800acfa:	6839      	ldr	r1, [r7, #0]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 fb7b 	bl	800b3f8 <USBD_CtlError>
            break;
 800ad02:	e041      	b.n	800ad88 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	da0b      	bge.n	800ad24 <USBD_StdEPReq+0x224>
 800ad0c:	7bbb      	ldrb	r3, [r7, #14]
 800ad0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad12:	4613      	mov	r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	4413      	add	r3, r2
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	3310      	adds	r3, #16
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	4413      	add	r3, r2
 800ad20:	3304      	adds	r3, #4
 800ad22:	e00b      	b.n	800ad3c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ad24:	7bbb      	ldrb	r3, [r7, #14]
 800ad26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	4413      	add	r3, r2
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	4413      	add	r3, r2
 800ad3a:	3304      	adds	r3, #4
 800ad3c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad3e:	7bbb      	ldrb	r3, [r7, #14]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d002      	beq.n	800ad4a <USBD_StdEPReq+0x24a>
 800ad44:	7bbb      	ldrb	r3, [r7, #14]
 800ad46:	2b80      	cmp	r3, #128	; 0x80
 800ad48:	d103      	bne.n	800ad52 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	601a      	str	r2, [r3, #0]
 800ad50:	e00e      	b.n	800ad70 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ad52:	7bbb      	ldrb	r3, [r7, #14]
 800ad54:	4619      	mov	r1, r3
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f004 f93f 	bl	800efda <USBD_LL_IsStallEP>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d003      	beq.n	800ad6a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	2201      	movs	r2, #1
 800ad66:	601a      	str	r2, [r3, #0]
 800ad68:	e002      	b.n	800ad70 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	2202      	movs	r2, #2
 800ad74:	4619      	mov	r1, r3
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fbaf 	bl	800b4da <USBD_CtlSendData>
          break;
 800ad7c:	e004      	b.n	800ad88 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800ad7e:	6839      	ldr	r1, [r7, #0]
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 fb39 	bl	800b3f8 <USBD_CtlError>
        break;
 800ad86:	bf00      	nop
      }
      break;
 800ad88:	e004      	b.n	800ad94 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800ad8a:	6839      	ldr	r1, [r7, #0]
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 fb33 	bl	800b3f8 <USBD_CtlError>
      break;
 800ad92:	bf00      	nop
    }
    break;
 800ad94:	e004      	b.n	800ada0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800ad96:	6839      	ldr	r1, [r7, #0]
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fb2d 	bl	800b3f8 <USBD_CtlError>
    break;
 800ad9e:	bf00      	nop
  }

  return ret;
 800ada0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
	...

0800adac <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800adb6:	2300      	movs	r3, #0
 800adb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800adba:	2300      	movs	r3, #0
 800adbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800adbe:	2300      	movs	r3, #0
 800adc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	885b      	ldrh	r3, [r3, #2]
 800adc6:	0a1b      	lsrs	r3, r3, #8
 800adc8:	b29b      	uxth	r3, r3
 800adca:	3b01      	subs	r3, #1
 800adcc:	2b06      	cmp	r3, #6
 800adce:	f200 8128 	bhi.w	800b022 <USBD_GetDescriptor+0x276>
 800add2:	a201      	add	r2, pc, #4	; (adr r2, 800add8 <USBD_GetDescriptor+0x2c>)
 800add4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add8:	0800adf5 	.word	0x0800adf5
 800addc:	0800ae0d 	.word	0x0800ae0d
 800ade0:	0800ae4d 	.word	0x0800ae4d
 800ade4:	0800b023 	.word	0x0800b023
 800ade8:	0800b023 	.word	0x0800b023
 800adec:	0800afc3 	.word	0x0800afc3
 800adf0:	0800afef 	.word	0x0800afef
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	7c12      	ldrb	r2, [r2, #16]
 800ae00:	f107 0108 	add.w	r1, r7, #8
 800ae04:	4610      	mov	r0, r2
 800ae06:	4798      	blx	r3
 800ae08:	60f8      	str	r0, [r7, #12]
    break;
 800ae0a:	e112      	b.n	800b032 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	7c1b      	ldrb	r3, [r3, #16]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d10d      	bne.n	800ae30 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae1c:	f107 0208 	add.w	r2, r7, #8
 800ae20:	4610      	mov	r0, r2
 800ae22:	4798      	blx	r3
 800ae24:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	2202      	movs	r2, #2
 800ae2c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ae2e:	e100      	b.n	800b032 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae38:	f107 0208 	add.w	r2, r7, #8
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	4798      	blx	r3
 800ae40:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	3301      	adds	r3, #1
 800ae46:	2202      	movs	r2, #2
 800ae48:	701a      	strb	r2, [r3, #0]
    break;
 800ae4a:	e0f2      	b.n	800b032 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	885b      	ldrh	r3, [r3, #2]
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	2b05      	cmp	r3, #5
 800ae54:	f200 80ac 	bhi.w	800afb0 <USBD_GetDescriptor+0x204>
 800ae58:	a201      	add	r2, pc, #4	; (adr r2, 800ae60 <USBD_GetDescriptor+0xb4>)
 800ae5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae5e:	bf00      	nop
 800ae60:	0800ae79 	.word	0x0800ae79
 800ae64:	0800aead 	.word	0x0800aead
 800ae68:	0800aee1 	.word	0x0800aee1
 800ae6c:	0800af15 	.word	0x0800af15
 800ae70:	0800af49 	.word	0x0800af49
 800ae74:	0800af7d 	.word	0x0800af7d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00b      	beq.n	800ae9c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	7c12      	ldrb	r2, [r2, #16]
 800ae90:	f107 0108 	add.w	r1, r7, #8
 800ae94:	4610      	mov	r0, r2
 800ae96:	4798      	blx	r3
 800ae98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae9a:	e091      	b.n	800afc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 faaa 	bl	800b3f8 <USBD_CtlError>
        err++;
 800aea4:	7afb      	ldrb	r3, [r7, #11]
 800aea6:	3301      	adds	r3, #1
 800aea8:	72fb      	strb	r3, [r7, #11]
      break;
 800aeaa:	e089      	b.n	800afc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00b      	beq.n	800aed0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	7c12      	ldrb	r2, [r2, #16]
 800aec4:	f107 0108 	add.w	r1, r7, #8
 800aec8:	4610      	mov	r0, r2
 800aeca:	4798      	blx	r3
 800aecc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aece:	e077      	b.n	800afc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800aed0:	6839      	ldr	r1, [r7, #0]
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 fa90 	bl	800b3f8 <USBD_CtlError>
        err++;
 800aed8:	7afb      	ldrb	r3, [r7, #11]
 800aeda:	3301      	adds	r3, #1
 800aedc:	72fb      	strb	r3, [r7, #11]
      break;
 800aede:	e06f      	b.n	800afc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d00b      	beq.n	800af04 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	7c12      	ldrb	r2, [r2, #16]
 800aef8:	f107 0108 	add.w	r1, r7, #8
 800aefc:	4610      	mov	r0, r2
 800aefe:	4798      	blx	r3
 800af00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af02:	e05d      	b.n	800afc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800af04:	6839      	ldr	r1, [r7, #0]
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 fa76 	bl	800b3f8 <USBD_CtlError>
        err++;
 800af0c:	7afb      	ldrb	r3, [r7, #11]
 800af0e:	3301      	adds	r3, #1
 800af10:	72fb      	strb	r3, [r7, #11]
      break;
 800af12:	e055      	b.n	800afc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d00b      	beq.n	800af38 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af26:	691b      	ldr	r3, [r3, #16]
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	7c12      	ldrb	r2, [r2, #16]
 800af2c:	f107 0108 	add.w	r1, r7, #8
 800af30:	4610      	mov	r0, r2
 800af32:	4798      	blx	r3
 800af34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af36:	e043      	b.n	800afc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800af38:	6839      	ldr	r1, [r7, #0]
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fa5c 	bl	800b3f8 <USBD_CtlError>
        err++;
 800af40:	7afb      	ldrb	r3, [r7, #11]
 800af42:	3301      	adds	r3, #1
 800af44:	72fb      	strb	r3, [r7, #11]
      break;
 800af46:	e03b      	b.n	800afc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af4e:	695b      	ldr	r3, [r3, #20]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d00b      	beq.n	800af6c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af5a:	695b      	ldr	r3, [r3, #20]
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	7c12      	ldrb	r2, [r2, #16]
 800af60:	f107 0108 	add.w	r1, r7, #8
 800af64:	4610      	mov	r0, r2
 800af66:	4798      	blx	r3
 800af68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af6a:	e029      	b.n	800afc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 fa42 	bl	800b3f8 <USBD_CtlError>
        err++;
 800af74:	7afb      	ldrb	r3, [r7, #11]
 800af76:	3301      	adds	r3, #1
 800af78:	72fb      	strb	r3, [r7, #11]
      break;
 800af7a:	e021      	b.n	800afc0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af82:	699b      	ldr	r3, [r3, #24]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d00b      	beq.n	800afa0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	7c12      	ldrb	r2, [r2, #16]
 800af94:	f107 0108 	add.w	r1, r7, #8
 800af98:	4610      	mov	r0, r2
 800af9a:	4798      	blx	r3
 800af9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af9e:	e00f      	b.n	800afc0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800afa0:	6839      	ldr	r1, [r7, #0]
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 fa28 	bl	800b3f8 <USBD_CtlError>
        err++;
 800afa8:	7afb      	ldrb	r3, [r7, #11]
 800afaa:	3301      	adds	r3, #1
 800afac:	72fb      	strb	r3, [r7, #11]
      break;
 800afae:	e007      	b.n	800afc0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fa20 	bl	800b3f8 <USBD_CtlError>
      err++;
 800afb8:	7afb      	ldrb	r3, [r7, #11]
 800afba:	3301      	adds	r3, #1
 800afbc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800afbe:	bf00      	nop
    }
    break;
 800afc0:	e037      	b.n	800b032 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	7c1b      	ldrb	r3, [r3, #16]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d109      	bne.n	800afde <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afd2:	f107 0208 	add.w	r2, r7, #8
 800afd6:	4610      	mov	r0, r2
 800afd8:	4798      	blx	r3
 800afda:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800afdc:	e029      	b.n	800b032 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800afde:	6839      	ldr	r1, [r7, #0]
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 fa09 	bl	800b3f8 <USBD_CtlError>
      err++;
 800afe6:	7afb      	ldrb	r3, [r7, #11]
 800afe8:	3301      	adds	r3, #1
 800afea:	72fb      	strb	r3, [r7, #11]
    break;
 800afec:	e021      	b.n	800b032 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	7c1b      	ldrb	r3, [r3, #16]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d10d      	bne.n	800b012 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800affc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affe:	f107 0208 	add.w	r2, r7, #8
 800b002:	4610      	mov	r0, r2
 800b004:	4798      	blx	r3
 800b006:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	3301      	adds	r3, #1
 800b00c:	2207      	movs	r2, #7
 800b00e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b010:	e00f      	b.n	800b032 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b012:	6839      	ldr	r1, [r7, #0]
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f9ef 	bl	800b3f8 <USBD_CtlError>
      err++;
 800b01a:	7afb      	ldrb	r3, [r7, #11]
 800b01c:	3301      	adds	r3, #1
 800b01e:	72fb      	strb	r3, [r7, #11]
    break;
 800b020:	e007      	b.n	800b032 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800b022:	6839      	ldr	r1, [r7, #0]
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f9e7 	bl	800b3f8 <USBD_CtlError>
    err++;
 800b02a:	7afb      	ldrb	r3, [r7, #11]
 800b02c:	3301      	adds	r3, #1
 800b02e:	72fb      	strb	r3, [r7, #11]
    break;
 800b030:	bf00      	nop
  }

  if (err != 0U)
 800b032:	7afb      	ldrb	r3, [r7, #11]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d11e      	bne.n	800b076 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	88db      	ldrh	r3, [r3, #6]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d016      	beq.n	800b06e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800b040:	893b      	ldrh	r3, [r7, #8]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00e      	beq.n	800b064 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	88da      	ldrh	r2, [r3, #6]
 800b04a:	893b      	ldrh	r3, [r7, #8]
 800b04c:	4293      	cmp	r3, r2
 800b04e:	bf28      	it	cs
 800b050:	4613      	movcs	r3, r2
 800b052:	b29b      	uxth	r3, r3
 800b054:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b056:	893b      	ldrh	r3, [r7, #8]
 800b058:	461a      	mov	r2, r3
 800b05a:	68f9      	ldr	r1, [r7, #12]
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 fa3c 	bl	800b4da <USBD_CtlSendData>
 800b062:	e009      	b.n	800b078 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800b064:	6839      	ldr	r1, [r7, #0]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f9c6 	bl	800b3f8 <USBD_CtlError>
 800b06c:	e004      	b.n	800b078 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fa70 	bl	800b554 <USBD_CtlSendStatus>
 800b074:	e000      	b.n	800b078 <USBD_GetDescriptor+0x2cc>
    return;
 800b076:	bf00      	nop
    }
  }
}
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop

0800b080 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	889b      	ldrh	r3, [r3, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d130      	bne.n	800b0f4 <USBD_SetAddress+0x74>
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	88db      	ldrh	r3, [r3, #6]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d12c      	bne.n	800b0f4 <USBD_SetAddress+0x74>
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	885b      	ldrh	r3, [r3, #2]
 800b09e:	2b7f      	cmp	r3, #127	; 0x7f
 800b0a0:	d828      	bhi.n	800b0f4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	885b      	ldrh	r3, [r3, #2]
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0b4:	2b03      	cmp	r3, #3
 800b0b6:	d104      	bne.n	800b0c2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b0b8:	6839      	ldr	r1, [r7, #0]
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 f99c 	bl	800b3f8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0c0:	e01c      	b.n	800b0fc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	7bfa      	ldrb	r2, [r7, #15]
 800b0c6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b0ca:	7bfb      	ldrb	r3, [r7, #15]
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f003 ffaf 	bl	800f032 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fa3d 	bl	800b554 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d004      	beq.n	800b0ea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2202      	movs	r2, #2
 800b0e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0e8:	e008      	b.n	800b0fc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0f2:	e003      	b.n	800b0fc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f97e 	bl	800b3f8 <USBD_CtlError>
  }
}
 800b0fc:	bf00      	nop
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b10e:	2300      	movs	r3, #0
 800b110:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	885b      	ldrh	r3, [r3, #2]
 800b116:	b2da      	uxtb	r2, r3
 800b118:	4b4b      	ldr	r3, [pc, #300]	; (800b248 <USBD_SetConfig+0x144>)
 800b11a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b11c:	4b4a      	ldr	r3, [pc, #296]	; (800b248 <USBD_SetConfig+0x144>)
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d905      	bls.n	800b130 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b124:	6839      	ldr	r1, [r7, #0]
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 f966 	bl	800b3f8 <USBD_CtlError>
    return USBD_FAIL;
 800b12c:	2303      	movs	r3, #3
 800b12e:	e087      	b.n	800b240 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b136:	2b02      	cmp	r3, #2
 800b138:	d002      	beq.n	800b140 <USBD_SetConfig+0x3c>
 800b13a:	2b03      	cmp	r3, #3
 800b13c:	d025      	beq.n	800b18a <USBD_SetConfig+0x86>
 800b13e:	e071      	b.n	800b224 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800b140:	4b41      	ldr	r3, [pc, #260]	; (800b248 <USBD_SetConfig+0x144>)
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d01c      	beq.n	800b182 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800b148:	4b3f      	ldr	r3, [pc, #252]	; (800b248 <USBD_SetConfig+0x144>)
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	461a      	mov	r2, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b152:	4b3d      	ldr	r3, [pc, #244]	; (800b248 <USBD_SetConfig+0x144>)
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	4619      	mov	r1, r3
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f7ff f9a8 	bl	800a4ae <USBD_SetClassConfig>
 800b15e:	4603      	mov	r3, r0
 800b160:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800b162:	7bfb      	ldrb	r3, [r7, #15]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d004      	beq.n	800b172 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800b168:	6839      	ldr	r1, [r7, #0]
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f944 	bl	800b3f8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b170:	e065      	b.n	800b23e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 f9ee 	bl	800b554 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2203      	movs	r2, #3
 800b17c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b180:	e05d      	b.n	800b23e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 f9e6 	bl	800b554 <USBD_CtlSendStatus>
    break;
 800b188:	e059      	b.n	800b23e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800b18a:	4b2f      	ldr	r3, [pc, #188]	; (800b248 <USBD_SetConfig+0x144>)
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d112      	bne.n	800b1b8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2202      	movs	r2, #2
 800b196:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800b19a:	4b2b      	ldr	r3, [pc, #172]	; (800b248 <USBD_SetConfig+0x144>)
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	461a      	mov	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b1a4:	4b28      	ldr	r3, [pc, #160]	; (800b248 <USBD_SetConfig+0x144>)
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f7ff f99b 	bl	800a4e6 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 f9cf 	bl	800b554 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b1b6:	e042      	b.n	800b23e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800b1b8:	4b23      	ldr	r3, [pc, #140]	; (800b248 <USBD_SetConfig+0x144>)
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	461a      	mov	r2, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d02a      	beq.n	800b21c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f7ff f989 	bl	800a4e6 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800b1d4:	4b1c      	ldr	r3, [pc, #112]	; (800b248 <USBD_SetConfig+0x144>)
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	461a      	mov	r2, r3
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b1de:	4b1a      	ldr	r3, [pc, #104]	; (800b248 <USBD_SetConfig+0x144>)
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7ff f962 	bl	800a4ae <USBD_SetClassConfig>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800b1ee:	7bfb      	ldrb	r3, [r7, #15]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00f      	beq.n	800b214 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800b1f4:	6839      	ldr	r1, [r7, #0]
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f8fe 	bl	800b3f8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	b2db      	uxtb	r3, r3
 800b202:	4619      	mov	r1, r3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f7ff f96e 	bl	800a4e6 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2202      	movs	r2, #2
 800b20e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b212:	e014      	b.n	800b23e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f99d 	bl	800b554 <USBD_CtlSendStatus>
    break;
 800b21a:	e010      	b.n	800b23e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 f999 	bl	800b554 <USBD_CtlSendStatus>
    break;
 800b222:	e00c      	b.n	800b23e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800b224:	6839      	ldr	r1, [r7, #0]
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 f8e6 	bl	800b3f8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b22c:	4b06      	ldr	r3, [pc, #24]	; (800b248 <USBD_SetConfig+0x144>)
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	4619      	mov	r1, r3
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f7ff f957 	bl	800a4e6 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b238:	2303      	movs	r3, #3
 800b23a:	73fb      	strb	r3, [r7, #15]
    break;
 800b23c:	bf00      	nop
  }

  return ret;
 800b23e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b240:	4618      	mov	r0, r3
 800b242:	3710      	adds	r7, #16
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	20000480 	.word	0x20000480

0800b24c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	88db      	ldrh	r3, [r3, #6]
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d004      	beq.n	800b268 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b25e:	6839      	ldr	r1, [r7, #0]
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f8c9 	bl	800b3f8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800b266:	e021      	b.n	800b2ac <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b26e:	2b01      	cmp	r3, #1
 800b270:	db17      	blt.n	800b2a2 <USBD_GetConfig+0x56>
 800b272:	2b02      	cmp	r3, #2
 800b274:	dd02      	ble.n	800b27c <USBD_GetConfig+0x30>
 800b276:	2b03      	cmp	r3, #3
 800b278:	d00b      	beq.n	800b292 <USBD_GetConfig+0x46>
 800b27a:	e012      	b.n	800b2a2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	3308      	adds	r3, #8
 800b286:	2201      	movs	r2, #1
 800b288:	4619      	mov	r1, r3
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f925 	bl	800b4da <USBD_CtlSendData>
      break;
 800b290:	e00c      	b.n	800b2ac <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	3304      	adds	r3, #4
 800b296:	2201      	movs	r2, #1
 800b298:	4619      	mov	r1, r3
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 f91d 	bl	800b4da <USBD_CtlSendData>
      break;
 800b2a0:	e004      	b.n	800b2ac <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800b2a2:	6839      	ldr	r1, [r7, #0]
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f8a7 	bl	800b3f8 <USBD_CtlError>
      break;
 800b2aa:	bf00      	nop
}
 800b2ac:	bf00      	nop
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	d81e      	bhi.n	800b308 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	88db      	ldrh	r3, [r3, #6]
 800b2ce:	2b02      	cmp	r3, #2
 800b2d0:	d004      	beq.n	800b2dc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 f88f 	bl	800b3f8 <USBD_CtlError>
      break;
 800b2da:	e01a      	b.n	800b312 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d005      	beq.n	800b2f8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	f043 0202 	orr.w	r2, r3, #2
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	330c      	adds	r3, #12
 800b2fc:	2202      	movs	r2, #2
 800b2fe:	4619      	mov	r1, r3
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f8ea 	bl	800b4da <USBD_CtlSendData>
    break;
 800b306:	e004      	b.n	800b312 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800b308:	6839      	ldr	r1, [r7, #0]
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f874 	bl	800b3f8 <USBD_CtlError>
    break;
 800b310:	bf00      	nop
  }
}
 800b312:	bf00      	nop
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b082      	sub	sp, #8
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
 800b322:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	885b      	ldrh	r3, [r3, #2]
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d106      	bne.n	800b33a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2201      	movs	r2, #1
 800b330:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 f90d 	bl	800b554 <USBD_CtlSendStatus>
  }
}
 800b33a:	bf00      	nop
 800b33c:	3708      	adds	r7, #8
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b082      	sub	sp, #8
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
 800b34a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b352:	3b01      	subs	r3, #1
 800b354:	2b02      	cmp	r3, #2
 800b356:	d80b      	bhi.n	800b370 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	885b      	ldrh	r3, [r3, #2]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d10c      	bne.n	800b37a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 f8f3 	bl	800b554 <USBD_CtlSendStatus>
      }
      break;
 800b36e:	e004      	b.n	800b37a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b370:	6839      	ldr	r1, [r7, #0]
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 f840 	bl	800b3f8 <USBD_CtlError>
      break;
 800b378:	e000      	b.n	800b37c <USBD_ClrFeature+0x3a>
      break;
 800b37a:	bf00      	nop
  }
}
 800b37c:	bf00      	nop
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	781a      	ldrb	r2, [r3, #0]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3301      	adds	r3, #1
 800b39e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	781a      	ldrb	r2, [r3, #0]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f7ff fad4 	bl	800a95c <SWAPBYTE>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b3c8:	68f8      	ldr	r0, [r7, #12]
 800b3ca:	f7ff fac7 	bl	800a95c <SWAPBYTE>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f7ff faba 	bl	800a95c <SWAPBYTE>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	80da      	strh	r2, [r3, #6]
}
 800b3f0:	bf00      	nop
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b402:	2180      	movs	r1, #128	; 0x80
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f003 fdaa 	bl	800ef5e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b40a:	2100      	movs	r1, #0
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f003 fda6 	bl	800ef5e <USBD_LL_StallEP>
}
 800b412:	bf00      	nop
 800b414:	3708      	adds	r7, #8
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b086      	sub	sp, #24
 800b41e:	af00      	add	r7, sp, #0
 800b420:	60f8      	str	r0, [r7, #12]
 800b422:	60b9      	str	r1, [r7, #8]
 800b424:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b426:	2300      	movs	r3, #0
 800b428:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d036      	beq.n	800b49e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b434:	6938      	ldr	r0, [r7, #16]
 800b436:	f000 f836 	bl	800b4a6 <USBD_GetLen>
 800b43a:	4603      	mov	r3, r0
 800b43c:	3301      	adds	r3, #1
 800b43e:	b29b      	uxth	r3, r3
 800b440:	005b      	lsls	r3, r3, #1
 800b442:	b29a      	uxth	r2, r3
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b448:	7dfb      	ldrb	r3, [r7, #23]
 800b44a:	68ba      	ldr	r2, [r7, #8]
 800b44c:	4413      	add	r3, r2
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	7812      	ldrb	r2, [r2, #0]
 800b452:	701a      	strb	r2, [r3, #0]
  idx++;
 800b454:	7dfb      	ldrb	r3, [r7, #23]
 800b456:	3301      	adds	r3, #1
 800b458:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b45a:	7dfb      	ldrb	r3, [r7, #23]
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	4413      	add	r3, r2
 800b460:	2203      	movs	r2, #3
 800b462:	701a      	strb	r2, [r3, #0]
  idx++;
 800b464:	7dfb      	ldrb	r3, [r7, #23]
 800b466:	3301      	adds	r3, #1
 800b468:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b46a:	e013      	b.n	800b494 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b46c:	7dfb      	ldrb	r3, [r7, #23]
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	4413      	add	r3, r2
 800b472:	693a      	ldr	r2, [r7, #16]
 800b474:	7812      	ldrb	r2, [r2, #0]
 800b476:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	3301      	adds	r3, #1
 800b47c:	613b      	str	r3, [r7, #16]
    idx++;
 800b47e:	7dfb      	ldrb	r3, [r7, #23]
 800b480:	3301      	adds	r3, #1
 800b482:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b484:	7dfb      	ldrb	r3, [r7, #23]
 800b486:	68ba      	ldr	r2, [r7, #8]
 800b488:	4413      	add	r3, r2
 800b48a:	2200      	movs	r2, #0
 800b48c:	701a      	strb	r2, [r3, #0]
    idx++;
 800b48e:	7dfb      	ldrb	r3, [r7, #23]
 800b490:	3301      	adds	r3, #1
 800b492:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d1e7      	bne.n	800b46c <USBD_GetString+0x52>
 800b49c:	e000      	b.n	800b4a0 <USBD_GetString+0x86>
    return;
 800b49e:	bf00      	nop
  }
}
 800b4a0:	3718      	adds	r7, #24
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b4a6:	b480      	push	{r7}
 800b4a8:	b085      	sub	sp, #20
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b4b6:	e005      	b.n	800b4c4 <USBD_GetLen+0x1e>
  {
    len++;
 800b4b8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1f5      	bne.n	800b4b8 <USBD_GetLen+0x12>
  }

  return len;
 800b4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3714      	adds	r7, #20
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr

0800b4da <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b084      	sub	sp, #16
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	60f8      	str	r0, [r7, #12]
 800b4e2:	60b9      	str	r1, [r7, #8]
 800b4e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2202      	movs	r2, #2
 800b4ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	2100      	movs	r1, #0
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f003 fdb5 	bl	800f070 <USBD_LL_Transmit>

  return USBD_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3710      	adds	r7, #16
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	2100      	movs	r1, #0
 800b522:	68f8      	ldr	r0, [r7, #12]
 800b524:	f003 fda4 	bl	800f070 <USBD_LL_Transmit>

  return USBD_OK;
 800b528:	2300      	movs	r3, #0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b532:	b580      	push	{r7, lr}
 800b534:	b084      	sub	sp, #16
 800b536:	af00      	add	r7, sp, #0
 800b538:	60f8      	str	r0, [r7, #12]
 800b53a:	60b9      	str	r1, [r7, #8]
 800b53c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	2100      	movs	r1, #0
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f003 fdb4 	bl	800f0b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2204      	movs	r2, #4
 800b560:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b564:	2300      	movs	r3, #0
 800b566:	2200      	movs	r2, #0
 800b568:	2100      	movs	r1, #0
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f003 fd80 	bl	800f070 <USBD_LL_Transmit>

  return USBD_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	4618      	mov	r0, r3
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b082      	sub	sp, #8
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2205      	movs	r2, #5
 800b586:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b58a:	2300      	movs	r3, #0
 800b58c:	2200      	movs	r2, #0
 800b58e:	2100      	movs	r1, #0
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f003 fd8e 	bl	800f0b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b596:	2300      	movs	r3, #0
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3708      	adds	r7, #8
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b5aa:	79fb      	ldrb	r3, [r7, #7]
 800b5ac:	4a08      	ldr	r2, [pc, #32]	; (800b5d0 <disk_status+0x30>)
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4413      	add	r3, r2
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	79fa      	ldrb	r2, [r7, #7]
 800b5b8:	4905      	ldr	r1, [pc, #20]	; (800b5d0 <disk_status+0x30>)
 800b5ba:	440a      	add	r2, r1
 800b5bc:	7a12      	ldrb	r2, [r2, #8]
 800b5be:	4610      	mov	r0, r2
 800b5c0:	4798      	blx	r3
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b5c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3710      	adds	r7, #16
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	200004ac 	.word	0x200004ac

0800b5d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	4603      	mov	r3, r0
 800b5dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b5e2:	79fb      	ldrb	r3, [r7, #7]
 800b5e4:	4a0d      	ldr	r2, [pc, #52]	; (800b61c <disk_initialize+0x48>)
 800b5e6:	5cd3      	ldrb	r3, [r2, r3]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d111      	bne.n	800b610 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b5ec:	79fb      	ldrb	r3, [r7, #7]
 800b5ee:	4a0b      	ldr	r2, [pc, #44]	; (800b61c <disk_initialize+0x48>)
 800b5f0:	2101      	movs	r1, #1
 800b5f2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b5f4:	79fb      	ldrb	r3, [r7, #7]
 800b5f6:	4a09      	ldr	r2, [pc, #36]	; (800b61c <disk_initialize+0x48>)
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	4413      	add	r3, r2
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	79fa      	ldrb	r2, [r7, #7]
 800b602:	4906      	ldr	r1, [pc, #24]	; (800b61c <disk_initialize+0x48>)
 800b604:	440a      	add	r2, r1
 800b606:	7a12      	ldrb	r2, [r2, #8]
 800b608:	4610      	mov	r0, r2
 800b60a:	4798      	blx	r3
 800b60c:	4603      	mov	r3, r0
 800b60e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b610:	7bfb      	ldrb	r3, [r7, #15]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	200004ac 	.word	0x200004ac

0800b620 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b620:	b590      	push	{r4, r7, lr}
 800b622:	b087      	sub	sp, #28
 800b624:	af00      	add	r7, sp, #0
 800b626:	60b9      	str	r1, [r7, #8]
 800b628:	607a      	str	r2, [r7, #4]
 800b62a:	603b      	str	r3, [r7, #0]
 800b62c:	4603      	mov	r3, r0
 800b62e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b630:	7bfb      	ldrb	r3, [r7, #15]
 800b632:	4a0a      	ldr	r2, [pc, #40]	; (800b65c <disk_read+0x3c>)
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	4413      	add	r3, r2
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	689c      	ldr	r4, [r3, #8]
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
 800b63e:	4a07      	ldr	r2, [pc, #28]	; (800b65c <disk_read+0x3c>)
 800b640:	4413      	add	r3, r2
 800b642:	7a18      	ldrb	r0, [r3, #8]
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	68b9      	ldr	r1, [r7, #8]
 800b64a:	47a0      	blx	r4
 800b64c:	4603      	mov	r3, r0
 800b64e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b650:	7dfb      	ldrb	r3, [r7, #23]
}
 800b652:	4618      	mov	r0, r3
 800b654:	371c      	adds	r7, #28
 800b656:	46bd      	mov	sp, r7
 800b658:	bd90      	pop	{r4, r7, pc}
 800b65a:	bf00      	nop
 800b65c:	200004ac 	.word	0x200004ac

0800b660 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b660:	b590      	push	{r4, r7, lr}
 800b662:	b087      	sub	sp, #28
 800b664:	af00      	add	r7, sp, #0
 800b666:	60b9      	str	r1, [r7, #8]
 800b668:	607a      	str	r2, [r7, #4]
 800b66a:	603b      	str	r3, [r7, #0]
 800b66c:	4603      	mov	r3, r0
 800b66e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b670:	7bfb      	ldrb	r3, [r7, #15]
 800b672:	4a0a      	ldr	r2, [pc, #40]	; (800b69c <disk_write+0x3c>)
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	4413      	add	r3, r2
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	68dc      	ldr	r4, [r3, #12]
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
 800b67e:	4a07      	ldr	r2, [pc, #28]	; (800b69c <disk_write+0x3c>)
 800b680:	4413      	add	r3, r2
 800b682:	7a18      	ldrb	r0, [r3, #8]
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	68b9      	ldr	r1, [r7, #8]
 800b68a:	47a0      	blx	r4
 800b68c:	4603      	mov	r3, r0
 800b68e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b690:	7dfb      	ldrb	r3, [r7, #23]
}
 800b692:	4618      	mov	r0, r3
 800b694:	371c      	adds	r7, #28
 800b696:	46bd      	mov	sp, r7
 800b698:	bd90      	pop	{r4, r7, pc}
 800b69a:	bf00      	nop
 800b69c:	200004ac 	.word	0x200004ac

0800b6a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	603a      	str	r2, [r7, #0]
 800b6aa:	71fb      	strb	r3, [r7, #7]
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b6b0:	79fb      	ldrb	r3, [r7, #7]
 800b6b2:	4a09      	ldr	r2, [pc, #36]	; (800b6d8 <disk_ioctl+0x38>)
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	4413      	add	r3, r2
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	691b      	ldr	r3, [r3, #16]
 800b6bc:	79fa      	ldrb	r2, [r7, #7]
 800b6be:	4906      	ldr	r1, [pc, #24]	; (800b6d8 <disk_ioctl+0x38>)
 800b6c0:	440a      	add	r2, r1
 800b6c2:	7a10      	ldrb	r0, [r2, #8]
 800b6c4:	79b9      	ldrb	r1, [r7, #6]
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	4798      	blx	r3
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	73fb      	strb	r3, [r7, #15]
  return res;
 800b6ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3710      	adds	r7, #16
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	200004ac 	.word	0x200004ac

0800b6dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b085      	sub	sp, #20
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b6ec:	89fb      	ldrh	r3, [r7, #14]
 800b6ee:	021b      	lsls	r3, r3, #8
 800b6f0:	b21a      	sxth	r2, r3
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	b21b      	sxth	r3, r3
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	b21b      	sxth	r3, r3
 800b6fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b6fe:	89fb      	ldrh	r3, [r7, #14]
}
 800b700:	4618      	mov	r0, r3
 800b702:	3714      	adds	r7, #20
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b70c:	b480      	push	{r7}
 800b70e:	b085      	sub	sp, #20
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	3303      	adds	r3, #3
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	021b      	lsls	r3, r3, #8
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	3202      	adds	r2, #2
 800b724:	7812      	ldrb	r2, [r2, #0]
 800b726:	4313      	orrs	r3, r2
 800b728:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	021b      	lsls	r3, r3, #8
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	3201      	adds	r2, #1
 800b732:	7812      	ldrb	r2, [r2, #0]
 800b734:	4313      	orrs	r3, r2
 800b736:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	021b      	lsls	r3, r3, #8
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	7812      	ldrb	r2, [r2, #0]
 800b740:	4313      	orrs	r3, r2
 800b742:	60fb      	str	r3, [r7, #12]
	return rv;
 800b744:	68fb      	ldr	r3, [r7, #12]
}
 800b746:	4618      	mov	r0, r3
 800b748:	3714      	adds	r7, #20
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr

0800b752 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b752:	b480      	push	{r7}
 800b754:	b083      	sub	sp, #12
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
 800b75a:	460b      	mov	r3, r1
 800b75c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	1c5a      	adds	r2, r3, #1
 800b762:	607a      	str	r2, [r7, #4]
 800b764:	887a      	ldrh	r2, [r7, #2]
 800b766:	b2d2      	uxtb	r2, r2
 800b768:	701a      	strb	r2, [r3, #0]
 800b76a:	887b      	ldrh	r3, [r7, #2]
 800b76c:	0a1b      	lsrs	r3, r3, #8
 800b76e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	1c5a      	adds	r2, r3, #1
 800b774:	607a      	str	r2, [r7, #4]
 800b776:	887a      	ldrh	r2, [r7, #2]
 800b778:	b2d2      	uxtb	r2, r2
 800b77a:	701a      	strb	r2, [r3, #0]
}
 800b77c:	bf00      	nop
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	1c5a      	adds	r2, r3, #1
 800b796:	607a      	str	r2, [r7, #4]
 800b798:	683a      	ldr	r2, [r7, #0]
 800b79a:	b2d2      	uxtb	r2, r2
 800b79c:	701a      	strb	r2, [r3, #0]
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	0a1b      	lsrs	r3, r3, #8
 800b7a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	1c5a      	adds	r2, r3, #1
 800b7a8:	607a      	str	r2, [r7, #4]
 800b7aa:	683a      	ldr	r2, [r7, #0]
 800b7ac:	b2d2      	uxtb	r2, r2
 800b7ae:	701a      	strb	r2, [r3, #0]
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	0a1b      	lsrs	r3, r3, #8
 800b7b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	1c5a      	adds	r2, r3, #1
 800b7ba:	607a      	str	r2, [r7, #4]
 800b7bc:	683a      	ldr	r2, [r7, #0]
 800b7be:	b2d2      	uxtb	r2, r2
 800b7c0:	701a      	strb	r2, [r3, #0]
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	0a1b      	lsrs	r3, r3, #8
 800b7c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	1c5a      	adds	r2, r3, #1
 800b7cc:	607a      	str	r2, [r7, #4]
 800b7ce:	683a      	ldr	r2, [r7, #0]
 800b7d0:	b2d2      	uxtb	r2, r2
 800b7d2:	701a      	strb	r2, [r3, #0]
}
 800b7d4:	bf00      	nop
 800b7d6:	370c      	adds	r7, #12
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b7e0:	b480      	push	{r7}
 800b7e2:	b087      	sub	sp, #28
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00d      	beq.n	800b816 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b7fa:	693a      	ldr	r2, [r7, #16]
 800b7fc:	1c53      	adds	r3, r2, #1
 800b7fe:	613b      	str	r3, [r7, #16]
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	1c59      	adds	r1, r3, #1
 800b804:	6179      	str	r1, [r7, #20]
 800b806:	7812      	ldrb	r2, [r2, #0]
 800b808:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	3b01      	subs	r3, #1
 800b80e:	607b      	str	r3, [r7, #4]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d1f1      	bne.n	800b7fa <mem_cpy+0x1a>
	}
}
 800b816:	bf00      	nop
 800b818:	371c      	adds	r7, #28
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr

0800b822 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b822:	b480      	push	{r7}
 800b824:	b087      	sub	sp, #28
 800b826:	af00      	add	r7, sp, #0
 800b828:	60f8      	str	r0, [r7, #12]
 800b82a:	60b9      	str	r1, [r7, #8]
 800b82c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	1c5a      	adds	r2, r3, #1
 800b836:	617a      	str	r2, [r7, #20]
 800b838:	68ba      	ldr	r2, [r7, #8]
 800b83a:	b2d2      	uxtb	r2, r2
 800b83c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	3b01      	subs	r3, #1
 800b842:	607b      	str	r3, [r7, #4]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d1f3      	bne.n	800b832 <mem_set+0x10>
}
 800b84a:	bf00      	nop
 800b84c:	371c      	adds	r7, #28
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b856:	b480      	push	{r7}
 800b858:	b089      	sub	sp, #36	; 0x24
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	60f8      	str	r0, [r7, #12]
 800b85e:	60b9      	str	r1, [r7, #8]
 800b860:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	61fb      	str	r3, [r7, #28]
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b86a:	2300      	movs	r3, #0
 800b86c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	1c5a      	adds	r2, r3, #1
 800b872:	61fa      	str	r2, [r7, #28]
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	4619      	mov	r1, r3
 800b878:	69bb      	ldr	r3, [r7, #24]
 800b87a:	1c5a      	adds	r2, r3, #1
 800b87c:	61ba      	str	r2, [r7, #24]
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	1acb      	subs	r3, r1, r3
 800b882:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	3b01      	subs	r3, #1
 800b888:	607b      	str	r3, [r7, #4]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d002      	beq.n	800b896 <mem_cmp+0x40>
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d0eb      	beq.n	800b86e <mem_cmp+0x18>

	return r;
 800b896:	697b      	ldr	r3, [r7, #20]
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3724      	adds	r7, #36	; 0x24
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b8ae:	e002      	b.n	800b8b6 <chk_chr+0x12>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	607b      	str	r3, [r7, #4]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d005      	beq.n	800b8ca <chk_chr+0x26>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d1f2      	bne.n	800b8b0 <chk_chr+0xc>
	return *str;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	781b      	ldrb	r3, [r3, #0]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	370c      	adds	r7, #12
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr
	...

0800b8dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	60bb      	str	r3, [r7, #8]
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	60fb      	str	r3, [r7, #12]
 800b8ee:	e029      	b.n	800b944 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b8f0:	4a27      	ldr	r2, [pc, #156]	; (800b990 <chk_lock+0xb4>)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	011b      	lsls	r3, r3, #4
 800b8f6:	4413      	add	r3, r2
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d01d      	beq.n	800b93a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b8fe:	4a24      	ldr	r2, [pc, #144]	; (800b990 <chk_lock+0xb4>)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	011b      	lsls	r3, r3, #4
 800b904:	4413      	add	r3, r2
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d116      	bne.n	800b93e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b910:	4a1f      	ldr	r2, [pc, #124]	; (800b990 <chk_lock+0xb4>)
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	011b      	lsls	r3, r3, #4
 800b916:	4413      	add	r3, r2
 800b918:	3304      	adds	r3, #4
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b920:	429a      	cmp	r2, r3
 800b922:	d10c      	bne.n	800b93e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b924:	4a1a      	ldr	r2, [pc, #104]	; (800b990 <chk_lock+0xb4>)
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	011b      	lsls	r3, r3, #4
 800b92a:	4413      	add	r3, r2
 800b92c:	3308      	adds	r3, #8
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b934:	429a      	cmp	r2, r3
 800b936:	d102      	bne.n	800b93e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b938:	e007      	b.n	800b94a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b93a:	2301      	movs	r3, #1
 800b93c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	3301      	adds	r3, #1
 800b942:	60fb      	str	r3, [r7, #12]
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d9d2      	bls.n	800b8f0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2b02      	cmp	r3, #2
 800b94e:	d109      	bne.n	800b964 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d102      	bne.n	800b95c <chk_lock+0x80>
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d101      	bne.n	800b960 <chk_lock+0x84>
 800b95c:	2300      	movs	r3, #0
 800b95e:	e010      	b.n	800b982 <chk_lock+0xa6>
 800b960:	2312      	movs	r3, #18
 800b962:	e00e      	b.n	800b982 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d108      	bne.n	800b97c <chk_lock+0xa0>
 800b96a:	4a09      	ldr	r2, [pc, #36]	; (800b990 <chk_lock+0xb4>)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	011b      	lsls	r3, r3, #4
 800b970:	4413      	add	r3, r2
 800b972:	330c      	adds	r3, #12
 800b974:	881b      	ldrh	r3, [r3, #0]
 800b976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b97a:	d101      	bne.n	800b980 <chk_lock+0xa4>
 800b97c:	2310      	movs	r3, #16
 800b97e:	e000      	b.n	800b982 <chk_lock+0xa6>
 800b980:	2300      	movs	r3, #0
}
 800b982:	4618      	mov	r0, r3
 800b984:	3714      	adds	r7, #20
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr
 800b98e:	bf00      	nop
 800b990:	2000048c 	.word	0x2000048c

0800b994 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b99a:	2300      	movs	r3, #0
 800b99c:	607b      	str	r3, [r7, #4]
 800b99e:	e002      	b.n	800b9a6 <enq_lock+0x12>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	607b      	str	r3, [r7, #4]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d806      	bhi.n	800b9ba <enq_lock+0x26>
 800b9ac:	4a09      	ldr	r2, [pc, #36]	; (800b9d4 <enq_lock+0x40>)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	011b      	lsls	r3, r3, #4
 800b9b2:	4413      	add	r3, r2
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d1f2      	bne.n	800b9a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2b02      	cmp	r3, #2
 800b9be:	bf14      	ite	ne
 800b9c0:	2301      	movne	r3, #1
 800b9c2:	2300      	moveq	r3, #0
 800b9c4:	b2db      	uxtb	r3, r3
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	370c      	adds	r7, #12
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop
 800b9d4:	2000048c 	.word	0x2000048c

0800b9d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	60fb      	str	r3, [r7, #12]
 800b9e6:	e01f      	b.n	800ba28 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b9e8:	4a41      	ldr	r2, [pc, #260]	; (800baf0 <inc_lock+0x118>)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	011b      	lsls	r3, r3, #4
 800b9ee:	4413      	add	r3, r2
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d113      	bne.n	800ba22 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b9fa:	4a3d      	ldr	r2, [pc, #244]	; (800baf0 <inc_lock+0x118>)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	011b      	lsls	r3, r3, #4
 800ba00:	4413      	add	r3, r2
 800ba02:	3304      	adds	r3, #4
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d109      	bne.n	800ba22 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ba0e:	4a38      	ldr	r2, [pc, #224]	; (800baf0 <inc_lock+0x118>)
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	011b      	lsls	r3, r3, #4
 800ba14:	4413      	add	r3, r2
 800ba16:	3308      	adds	r3, #8
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d006      	beq.n	800ba30 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	3301      	adds	r3, #1
 800ba26:	60fb      	str	r3, [r7, #12]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d9dc      	bls.n	800b9e8 <inc_lock+0x10>
 800ba2e:	e000      	b.n	800ba32 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ba30:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2b02      	cmp	r3, #2
 800ba36:	d132      	bne.n	800ba9e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	60fb      	str	r3, [r7, #12]
 800ba3c:	e002      	b.n	800ba44 <inc_lock+0x6c>
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	3301      	adds	r3, #1
 800ba42:	60fb      	str	r3, [r7, #12]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d806      	bhi.n	800ba58 <inc_lock+0x80>
 800ba4a:	4a29      	ldr	r2, [pc, #164]	; (800baf0 <inc_lock+0x118>)
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	011b      	lsls	r3, r3, #4
 800ba50:	4413      	add	r3, r2
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d1f2      	bne.n	800ba3e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2b02      	cmp	r3, #2
 800ba5c:	d101      	bne.n	800ba62 <inc_lock+0x8a>
 800ba5e:	2300      	movs	r3, #0
 800ba60:	e040      	b.n	800bae4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	4922      	ldr	r1, [pc, #136]	; (800baf0 <inc_lock+0x118>)
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	011b      	lsls	r3, r3, #4
 800ba6c:	440b      	add	r3, r1
 800ba6e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	689a      	ldr	r2, [r3, #8]
 800ba74:	491e      	ldr	r1, [pc, #120]	; (800baf0 <inc_lock+0x118>)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	011b      	lsls	r3, r3, #4
 800ba7a:	440b      	add	r3, r1
 800ba7c:	3304      	adds	r3, #4
 800ba7e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	695a      	ldr	r2, [r3, #20]
 800ba84:	491a      	ldr	r1, [pc, #104]	; (800baf0 <inc_lock+0x118>)
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	011b      	lsls	r3, r3, #4
 800ba8a:	440b      	add	r3, r1
 800ba8c:	3308      	adds	r3, #8
 800ba8e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ba90:	4a17      	ldr	r2, [pc, #92]	; (800baf0 <inc_lock+0x118>)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	011b      	lsls	r3, r3, #4
 800ba96:	4413      	add	r3, r2
 800ba98:	330c      	adds	r3, #12
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d009      	beq.n	800bab8 <inc_lock+0xe0>
 800baa4:	4a12      	ldr	r2, [pc, #72]	; (800baf0 <inc_lock+0x118>)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	011b      	lsls	r3, r3, #4
 800baaa:	4413      	add	r3, r2
 800baac:	330c      	adds	r3, #12
 800baae:	881b      	ldrh	r3, [r3, #0]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d001      	beq.n	800bab8 <inc_lock+0xe0>
 800bab4:	2300      	movs	r3, #0
 800bab6:	e015      	b.n	800bae4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d108      	bne.n	800bad0 <inc_lock+0xf8>
 800babe:	4a0c      	ldr	r2, [pc, #48]	; (800baf0 <inc_lock+0x118>)
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	011b      	lsls	r3, r3, #4
 800bac4:	4413      	add	r3, r2
 800bac6:	330c      	adds	r3, #12
 800bac8:	881b      	ldrh	r3, [r3, #0]
 800baca:	3301      	adds	r3, #1
 800bacc:	b29a      	uxth	r2, r3
 800bace:	e001      	b.n	800bad4 <inc_lock+0xfc>
 800bad0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bad4:	4906      	ldr	r1, [pc, #24]	; (800baf0 <inc_lock+0x118>)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	011b      	lsls	r3, r3, #4
 800bada:	440b      	add	r3, r1
 800badc:	330c      	adds	r3, #12
 800bade:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	3301      	adds	r3, #1
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3714      	adds	r7, #20
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr
 800baf0:	2000048c 	.word	0x2000048c

0800baf4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b085      	sub	sp, #20
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	3b01      	subs	r3, #1
 800bb00:	607b      	str	r3, [r7, #4]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d825      	bhi.n	800bb54 <dec_lock+0x60>
		n = Files[i].ctr;
 800bb08:	4a17      	ldr	r2, [pc, #92]	; (800bb68 <dec_lock+0x74>)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	011b      	lsls	r3, r3, #4
 800bb0e:	4413      	add	r3, r2
 800bb10:	330c      	adds	r3, #12
 800bb12:	881b      	ldrh	r3, [r3, #0]
 800bb14:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bb16:	89fb      	ldrh	r3, [r7, #14]
 800bb18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb1c:	d101      	bne.n	800bb22 <dec_lock+0x2e>
 800bb1e:	2300      	movs	r3, #0
 800bb20:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bb22:	89fb      	ldrh	r3, [r7, #14]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d002      	beq.n	800bb2e <dec_lock+0x3a>
 800bb28:	89fb      	ldrh	r3, [r7, #14]
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bb2e:	4a0e      	ldr	r2, [pc, #56]	; (800bb68 <dec_lock+0x74>)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	011b      	lsls	r3, r3, #4
 800bb34:	4413      	add	r3, r2
 800bb36:	330c      	adds	r3, #12
 800bb38:	89fa      	ldrh	r2, [r7, #14]
 800bb3a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bb3c:	89fb      	ldrh	r3, [r7, #14]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d105      	bne.n	800bb4e <dec_lock+0x5a>
 800bb42:	4a09      	ldr	r2, [pc, #36]	; (800bb68 <dec_lock+0x74>)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	011b      	lsls	r3, r3, #4
 800bb48:	4413      	add	r3, r2
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	737b      	strb	r3, [r7, #13]
 800bb52:	e001      	b.n	800bb58 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bb54:	2302      	movs	r3, #2
 800bb56:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bb58:	7b7b      	ldrb	r3, [r7, #13]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3714      	adds	r7, #20
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop
 800bb68:	2000048c 	.word	0x2000048c

0800bb6c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b085      	sub	sp, #20
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bb74:	2300      	movs	r3, #0
 800bb76:	60fb      	str	r3, [r7, #12]
 800bb78:	e010      	b.n	800bb9c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bb7a:	4a0d      	ldr	r2, [pc, #52]	; (800bbb0 <clear_lock+0x44>)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	011b      	lsls	r3, r3, #4
 800bb80:	4413      	add	r3, r2
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d105      	bne.n	800bb96 <clear_lock+0x2a>
 800bb8a:	4a09      	ldr	r2, [pc, #36]	; (800bbb0 <clear_lock+0x44>)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	011b      	lsls	r3, r3, #4
 800bb90:	4413      	add	r3, r2
 800bb92:	2200      	movs	r2, #0
 800bb94:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	60fb      	str	r3, [r7, #12]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d9eb      	bls.n	800bb7a <clear_lock+0xe>
	}
}
 800bba2:	bf00      	nop
 800bba4:	3714      	adds	r7, #20
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr
 800bbae:	bf00      	nop
 800bbb0:	2000048c 	.word	0x2000048c

0800bbb4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b086      	sub	sp, #24
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	78db      	ldrb	r3, [r3, #3]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d034      	beq.n	800bc32 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbcc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	7858      	ldrb	r0, [r3, #1]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bbd8:	2301      	movs	r3, #1
 800bbda:	697a      	ldr	r2, [r7, #20]
 800bbdc:	f7ff fd40 	bl	800b660 <disk_write>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d002      	beq.n	800bbec <sync_window+0x38>
			res = FR_DISK_ERR;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	73fb      	strb	r3, [r7, #15]
 800bbea:	e022      	b.n	800bc32 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf6:	697a      	ldr	r2, [r7, #20]
 800bbf8:	1ad2      	subs	r2, r2, r3
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	69db      	ldr	r3, [r3, #28]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d217      	bcs.n	800bc32 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	789b      	ldrb	r3, [r3, #2]
 800bc06:	613b      	str	r3, [r7, #16]
 800bc08:	e010      	b.n	800bc2c <sync_window+0x78>
					wsect += fs->fsize;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	69db      	ldr	r3, [r3, #28]
 800bc0e:	697a      	ldr	r2, [r7, #20]
 800bc10:	4413      	add	r3, r2
 800bc12:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	7858      	ldrb	r0, [r3, #1]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bc1e:	2301      	movs	r3, #1
 800bc20:	697a      	ldr	r2, [r7, #20]
 800bc22:	f7ff fd1d 	bl	800b660 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	3b01      	subs	r3, #1
 800bc2a:	613b      	str	r3, [r7, #16]
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d8eb      	bhi.n	800bc0a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bc32:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3718      	adds	r7, #24
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bc46:	2300      	movs	r3, #0
 800bc48:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc4e:	683a      	ldr	r2, [r7, #0]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d01b      	beq.n	800bc8c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f7ff ffad 	bl	800bbb4 <sync_window>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bc5e:	7bfb      	ldrb	r3, [r7, #15]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d113      	bne.n	800bc8c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	7858      	ldrb	r0, [r3, #1]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bc6e:	2301      	movs	r3, #1
 800bc70:	683a      	ldr	r2, [r7, #0]
 800bc72:	f7ff fcd5 	bl	800b620 <disk_read>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d004      	beq.n	800bc86 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bc7c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc80:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bc82:	2301      	movs	r3, #1
 800bc84:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	683a      	ldr	r2, [r7, #0]
 800bc8a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800bc8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
	...

0800bc98 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f7ff ff87 	bl	800bbb4 <sync_window>
 800bca6:	4603      	mov	r3, r0
 800bca8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bcaa:	7bfb      	ldrb	r3, [r7, #15]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d158      	bne.n	800bd62 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	2b03      	cmp	r3, #3
 800bcb6:	d148      	bne.n	800bd4a <sync_fs+0xb2>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	791b      	ldrb	r3, [r3, #4]
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d144      	bne.n	800bd4a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	3334      	adds	r3, #52	; 0x34
 800bcc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcc8:	2100      	movs	r1, #0
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7ff fda9 	bl	800b822 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	3334      	adds	r3, #52	; 0x34
 800bcd4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bcd8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7ff fd38 	bl	800b752 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	3334      	adds	r3, #52	; 0x34
 800bce6:	4921      	ldr	r1, [pc, #132]	; (800bd6c <sync_fs+0xd4>)
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7ff fd4d 	bl	800b788 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	3334      	adds	r3, #52	; 0x34
 800bcf2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bcf6:	491e      	ldr	r1, [pc, #120]	; (800bd70 <sync_fs+0xd8>)
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7ff fd45 	bl	800b788 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	3334      	adds	r3, #52	; 0x34
 800bd02:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	695b      	ldr	r3, [r3, #20]
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	4610      	mov	r0, r2
 800bd0e:	f7ff fd3b 	bl	800b788 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	3334      	adds	r3, #52	; 0x34
 800bd16:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	4619      	mov	r1, r3
 800bd20:	4610      	mov	r0, r2
 800bd22:	f7ff fd31 	bl	800b788 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6a1b      	ldr	r3, [r3, #32]
 800bd2a:	1c5a      	adds	r2, r3, #1
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	7858      	ldrb	r0, [r3, #1]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd3e:	2301      	movs	r3, #1
 800bd40:	f7ff fc8e 	bl	800b660 <disk_write>
			fs->fsi_flag = 0;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	785b      	ldrb	r3, [r3, #1]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	2100      	movs	r1, #0
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7ff fca4 	bl	800b6a0 <disk_ioctl>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d001      	beq.n	800bd62 <sync_fs+0xca>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bd62:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3710      	adds	r7, #16
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	41615252 	.word	0x41615252
 800bd70:	61417272 	.word	0x61417272

0800bd74 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	3b02      	subs	r3, #2
 800bd82:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	699b      	ldr	r3, [r3, #24]
 800bd88:	3b02      	subs	r3, #2
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d301      	bcc.n	800bd94 <clust2sect+0x20>
 800bd90:	2300      	movs	r3, #0
 800bd92:	e008      	b.n	800bda6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	895b      	ldrh	r3, [r3, #10]
 800bd98:	461a      	mov	r2, r3
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	fb03 f202 	mul.w	r2, r3, r2
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda4:	4413      	add	r3, r2
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	370c      	adds	r7, #12
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr

0800bdb2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b086      	sub	sp, #24
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d904      	bls.n	800bdd2 <get_fat+0x20>
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	699b      	ldr	r3, [r3, #24]
 800bdcc:	683a      	ldr	r2, [r7, #0]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d302      	bcc.n	800bdd8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	617b      	str	r3, [r7, #20]
 800bdd6:	e08c      	b.n	800bef2 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bdd8:	f04f 33ff 	mov.w	r3, #4294967295
 800bddc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	d045      	beq.n	800be72 <get_fat+0xc0>
 800bde6:	2b03      	cmp	r3, #3
 800bde8:	d05d      	beq.n	800bea6 <get_fat+0xf4>
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d177      	bne.n	800bede <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	60fb      	str	r3, [r7, #12]
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	085b      	lsrs	r3, r3, #1
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	0a5b      	lsrs	r3, r3, #9
 800be04:	4413      	add	r3, r2
 800be06:	4619      	mov	r1, r3
 800be08:	6938      	ldr	r0, [r7, #16]
 800be0a:	f7ff ff17 	bl	800bc3c <move_window>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d167      	bne.n	800bee4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	1c5a      	adds	r2, r3, #1
 800be18:	60fa      	str	r2, [r7, #12]
 800be1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be1e:	693a      	ldr	r2, [r7, #16]
 800be20:	4413      	add	r3, r2
 800be22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be26:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	0a5b      	lsrs	r3, r3, #9
 800be30:	4413      	add	r3, r2
 800be32:	4619      	mov	r1, r3
 800be34:	6938      	ldr	r0, [r7, #16]
 800be36:	f7ff ff01 	bl	800bc3c <move_window>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d153      	bne.n	800bee8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be46:	693a      	ldr	r2, [r7, #16]
 800be48:	4413      	add	r3, r2
 800be4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be4e:	021b      	lsls	r3, r3, #8
 800be50:	461a      	mov	r2, r3
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	4313      	orrs	r3, r2
 800be56:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	f003 0301 	and.w	r3, r3, #1
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d002      	beq.n	800be68 <get_fat+0xb6>
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	091b      	lsrs	r3, r3, #4
 800be66:	e002      	b.n	800be6e <get_fat+0xbc>
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be6e:	617b      	str	r3, [r7, #20]
			break;
 800be70:	e03f      	b.n	800bef2 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	0a1b      	lsrs	r3, r3, #8
 800be7a:	4413      	add	r3, r2
 800be7c:	4619      	mov	r1, r3
 800be7e:	6938      	ldr	r0, [r7, #16]
 800be80:	f7ff fedc 	bl	800bc3c <move_window>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d130      	bne.n	800beec <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	005b      	lsls	r3, r3, #1
 800be94:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800be98:	4413      	add	r3, r2
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7ff fc1e 	bl	800b6dc <ld_word>
 800bea0:	4603      	mov	r3, r0
 800bea2:	617b      	str	r3, [r7, #20]
			break;
 800bea4:	e025      	b.n	800bef2 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	09db      	lsrs	r3, r3, #7
 800beae:	4413      	add	r3, r2
 800beb0:	4619      	mov	r1, r3
 800beb2:	6938      	ldr	r0, [r7, #16]
 800beb4:	f7ff fec2 	bl	800bc3c <move_window>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d118      	bne.n	800bef0 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800becc:	4413      	add	r3, r2
 800bece:	4618      	mov	r0, r3
 800bed0:	f7ff fc1c 	bl	800b70c <ld_dword>
 800bed4:	4603      	mov	r3, r0
 800bed6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800beda:	617b      	str	r3, [r7, #20]
			break;
 800bedc:	e009      	b.n	800bef2 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bede:	2301      	movs	r3, #1
 800bee0:	617b      	str	r3, [r7, #20]
 800bee2:	e006      	b.n	800bef2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bee4:	bf00      	nop
 800bee6:	e004      	b.n	800bef2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bee8:	bf00      	nop
 800beea:	e002      	b.n	800bef2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800beec:	bf00      	nop
 800beee:	e000      	b.n	800bef2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bef0:	bf00      	nop
		}
	}

	return val;
 800bef2:	697b      	ldr	r3, [r7, #20]
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3718      	adds	r7, #24
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}

0800befc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800befc:	b590      	push	{r4, r7, lr}
 800befe:	b089      	sub	sp, #36	; 0x24
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bf08:	2302      	movs	r3, #2
 800bf0a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	f240 80d6 	bls.w	800c0c0 <put_fat+0x1c4>
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	699b      	ldr	r3, [r3, #24]
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	f080 80d0 	bcs.w	800c0c0 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	2b02      	cmp	r3, #2
 800bf26:	d073      	beq.n	800c010 <put_fat+0x114>
 800bf28:	2b03      	cmp	r3, #3
 800bf2a:	f000 8091 	beq.w	800c050 <put_fat+0x154>
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	f040 80c6 	bne.w	800c0c0 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	61bb      	str	r3, [r7, #24]
 800bf38:	69bb      	ldr	r3, [r7, #24]
 800bf3a:	085b      	lsrs	r3, r3, #1
 800bf3c:	69ba      	ldr	r2, [r7, #24]
 800bf3e:	4413      	add	r3, r2
 800bf40:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	0a5b      	lsrs	r3, r3, #9
 800bf4a:	4413      	add	r3, r2
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	68f8      	ldr	r0, [r7, #12]
 800bf50:	f7ff fe74 	bl	800bc3c <move_window>
 800bf54:	4603      	mov	r3, r0
 800bf56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf58:	7ffb      	ldrb	r3, [r7, #31]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	f040 80a9 	bne.w	800c0b2 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bf66:	69bb      	ldr	r3, [r7, #24]
 800bf68:	1c59      	adds	r1, r3, #1
 800bf6a:	61b9      	str	r1, [r7, #24]
 800bf6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf70:	4413      	add	r3, r2
 800bf72:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	f003 0301 	and.w	r3, r3, #1
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00d      	beq.n	800bf9a <put_fat+0x9e>
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	b25b      	sxtb	r3, r3
 800bf84:	f003 030f 	and.w	r3, r3, #15
 800bf88:	b25a      	sxtb	r2, r3
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	011b      	lsls	r3, r3, #4
 800bf90:	b25b      	sxtb	r3, r3
 800bf92:	4313      	orrs	r3, r2
 800bf94:	b25b      	sxtb	r3, r3
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	e001      	b.n	800bf9e <put_fat+0xa2>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	697a      	ldr	r2, [r7, #20]
 800bfa0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	0a5b      	lsrs	r3, r3, #9
 800bfb0:	4413      	add	r3, r2
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	68f8      	ldr	r0, [r7, #12]
 800bfb6:	f7ff fe41 	bl	800bc3c <move_window>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bfbe:	7ffb      	ldrb	r3, [r7, #31]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d178      	bne.n	800c0b6 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfd0:	4413      	add	r3, r2
 800bfd2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	f003 0301 	and.w	r3, r3, #1
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d003      	beq.n	800bfe6 <put_fat+0xea>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	091b      	lsrs	r3, r3, #4
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	e00e      	b.n	800c004 <put_fat+0x108>
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	b25b      	sxtb	r3, r3
 800bfec:	f023 030f 	bic.w	r3, r3, #15
 800bff0:	b25a      	sxtb	r2, r3
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	0a1b      	lsrs	r3, r3, #8
 800bff6:	b25b      	sxtb	r3, r3
 800bff8:	f003 030f 	and.w	r3, r3, #15
 800bffc:	b25b      	sxtb	r3, r3
 800bffe:	4313      	orrs	r3, r2
 800c000:	b25b      	sxtb	r3, r3
 800c002:	b2db      	uxtb	r3, r3
 800c004:	697a      	ldr	r2, [r7, #20]
 800c006:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2201      	movs	r2, #1
 800c00c:	70da      	strb	r2, [r3, #3]
			break;
 800c00e:	e057      	b.n	800c0c0 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	0a1b      	lsrs	r3, r3, #8
 800c018:	4413      	add	r3, r2
 800c01a:	4619      	mov	r1, r3
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	f7ff fe0d 	bl	800bc3c <move_window>
 800c022:	4603      	mov	r3, r0
 800c024:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c026:	7ffb      	ldrb	r3, [r7, #31]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d146      	bne.n	800c0ba <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	005b      	lsls	r3, r3, #1
 800c036:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c03a:	4413      	add	r3, r2
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	b292      	uxth	r2, r2
 800c040:	4611      	mov	r1, r2
 800c042:	4618      	mov	r0, r3
 800c044:	f7ff fb85 	bl	800b752 <st_word>
			fs->wflag = 1;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2201      	movs	r2, #1
 800c04c:	70da      	strb	r2, [r3, #3]
			break;
 800c04e:	e037      	b.n	800c0c0 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	09db      	lsrs	r3, r3, #7
 800c058:	4413      	add	r3, r2
 800c05a:	4619      	mov	r1, r3
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	f7ff fded 	bl	800bc3c <move_window>
 800c062:	4603      	mov	r3, r0
 800c064:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c066:	7ffb      	ldrb	r3, [r7, #31]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d128      	bne.n	800c0be <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c080:	4413      	add	r3, r2
 800c082:	4618      	mov	r0, r3
 800c084:	f7ff fb42 	bl	800b70c <ld_dword>
 800c088:	4603      	mov	r3, r0
 800c08a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c08e:	4323      	orrs	r3, r4
 800c090:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c0a0:	4413      	add	r3, r2
 800c0a2:	6879      	ldr	r1, [r7, #4]
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7ff fb6f 	bl	800b788 <st_dword>
			fs->wflag = 1;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	70da      	strb	r2, [r3, #3]
			break;
 800c0b0:	e006      	b.n	800c0c0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c0b2:	bf00      	nop
 800c0b4:	e004      	b.n	800c0c0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c0b6:	bf00      	nop
 800c0b8:	e002      	b.n	800c0c0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c0ba:	bf00      	nop
 800c0bc:	e000      	b.n	800c0c0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c0be:	bf00      	nop
		}
	}
	return res;
 800c0c0:	7ffb      	ldrb	r3, [r7, #31]
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3724      	adds	r7, #36	; 0x24
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd90      	pop	{r4, r7, pc}

0800c0ca <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c0ca:	b580      	push	{r7, lr}
 800c0cc:	b088      	sub	sp, #32
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	60f8      	str	r0, [r7, #12]
 800c0d2:	60b9      	str	r1, [r7, #8]
 800c0d4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d904      	bls.n	800c0f0 <remove_chain+0x26>
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	699b      	ldr	r3, [r3, #24]
 800c0ea:	68ba      	ldr	r2, [r7, #8]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d301      	bcc.n	800c0f4 <remove_chain+0x2a>
 800c0f0:	2302      	movs	r3, #2
 800c0f2:	e04b      	b.n	800c18c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00c      	beq.n	800c114 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c0fe:	6879      	ldr	r1, [r7, #4]
 800c100:	69b8      	ldr	r0, [r7, #24]
 800c102:	f7ff fefb 	bl	800befc <put_fat>
 800c106:	4603      	mov	r3, r0
 800c108:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c10a:	7ffb      	ldrb	r3, [r7, #31]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d001      	beq.n	800c114 <remove_chain+0x4a>
 800c110:	7ffb      	ldrb	r3, [r7, #31]
 800c112:	e03b      	b.n	800c18c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c114:	68b9      	ldr	r1, [r7, #8]
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	f7ff fe4b 	bl	800bdb2 <get_fat>
 800c11c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d031      	beq.n	800c188 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	2b01      	cmp	r3, #1
 800c128:	d101      	bne.n	800c12e <remove_chain+0x64>
 800c12a:	2302      	movs	r3, #2
 800c12c:	e02e      	b.n	800c18c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c134:	d101      	bne.n	800c13a <remove_chain+0x70>
 800c136:	2301      	movs	r3, #1
 800c138:	e028      	b.n	800c18c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c13a:	2200      	movs	r2, #0
 800c13c:	68b9      	ldr	r1, [r7, #8]
 800c13e:	69b8      	ldr	r0, [r7, #24]
 800c140:	f7ff fedc 	bl	800befc <put_fat>
 800c144:	4603      	mov	r3, r0
 800c146:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c148:	7ffb      	ldrb	r3, [r7, #31]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d001      	beq.n	800c152 <remove_chain+0x88>
 800c14e:	7ffb      	ldrb	r3, [r7, #31]
 800c150:	e01c      	b.n	800c18c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	695a      	ldr	r2, [r3, #20]
 800c156:	69bb      	ldr	r3, [r7, #24]
 800c158:	699b      	ldr	r3, [r3, #24]
 800c15a:	3b02      	subs	r3, #2
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d20b      	bcs.n	800c178 <remove_chain+0xae>
			fs->free_clst++;
 800c160:	69bb      	ldr	r3, [r7, #24]
 800c162:	695b      	ldr	r3, [r3, #20]
 800c164:	1c5a      	adds	r2, r3, #1
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c16a:	69bb      	ldr	r3, [r7, #24]
 800c16c:	791b      	ldrb	r3, [r3, #4]
 800c16e:	f043 0301 	orr.w	r3, r3, #1
 800c172:	b2da      	uxtb	r2, r3
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	699b      	ldr	r3, [r3, #24]
 800c180:	68ba      	ldr	r2, [r7, #8]
 800c182:	429a      	cmp	r2, r3
 800c184:	d3c6      	bcc.n	800c114 <remove_chain+0x4a>
 800c186:	e000      	b.n	800c18a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c188:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3720      	adds	r7, #32
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b088      	sub	sp, #32
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d10d      	bne.n	800c1c6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	691b      	ldr	r3, [r3, #16]
 800c1ae:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c1b0:	69bb      	ldr	r3, [r7, #24]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d004      	beq.n	800c1c0 <create_chain+0x2c>
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	699b      	ldr	r3, [r3, #24]
 800c1ba:	69ba      	ldr	r2, [r7, #24]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d31b      	bcc.n	800c1f8 <create_chain+0x64>
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	61bb      	str	r3, [r7, #24]
 800c1c4:	e018      	b.n	800c1f8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c1c6:	6839      	ldr	r1, [r7, #0]
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f7ff fdf2 	bl	800bdb2 <get_fat>
 800c1ce:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	d801      	bhi.n	800c1da <create_chain+0x46>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	e070      	b.n	800c2bc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e0:	d101      	bne.n	800c1e6 <create_chain+0x52>
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	e06a      	b.n	800c2bc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	699b      	ldr	r3, [r3, #24]
 800c1ea:	68fa      	ldr	r2, [r7, #12]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d201      	bcs.n	800c1f4 <create_chain+0x60>
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	e063      	b.n	800c2bc <create_chain+0x128>
		scl = clst;
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	3301      	adds	r3, #1
 800c200:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	699b      	ldr	r3, [r3, #24]
 800c206:	69fa      	ldr	r2, [r7, #28]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d307      	bcc.n	800c21c <create_chain+0x88>
				ncl = 2;
 800c20c:	2302      	movs	r3, #2
 800c20e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c210:	69fa      	ldr	r2, [r7, #28]
 800c212:	69bb      	ldr	r3, [r7, #24]
 800c214:	429a      	cmp	r2, r3
 800c216:	d901      	bls.n	800c21c <create_chain+0x88>
 800c218:	2300      	movs	r3, #0
 800c21a:	e04f      	b.n	800c2bc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c21c:	69f9      	ldr	r1, [r7, #28]
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7ff fdc7 	bl	800bdb2 <get_fat>
 800c224:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00e      	beq.n	800c24a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2b01      	cmp	r3, #1
 800c230:	d003      	beq.n	800c23a <create_chain+0xa6>
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c238:	d101      	bne.n	800c23e <create_chain+0xaa>
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	e03e      	b.n	800c2bc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c23e:	69fa      	ldr	r2, [r7, #28]
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	429a      	cmp	r2, r3
 800c244:	d1da      	bne.n	800c1fc <create_chain+0x68>
 800c246:	2300      	movs	r3, #0
 800c248:	e038      	b.n	800c2bc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c24a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c24c:	f04f 32ff 	mov.w	r2, #4294967295
 800c250:	69f9      	ldr	r1, [r7, #28]
 800c252:	6938      	ldr	r0, [r7, #16]
 800c254:	f7ff fe52 	bl	800befc <put_fat>
 800c258:	4603      	mov	r3, r0
 800c25a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c25c:	7dfb      	ldrb	r3, [r7, #23]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d109      	bne.n	800c276 <create_chain+0xe2>
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d006      	beq.n	800c276 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c268:	69fa      	ldr	r2, [r7, #28]
 800c26a:	6839      	ldr	r1, [r7, #0]
 800c26c:	6938      	ldr	r0, [r7, #16]
 800c26e:	f7ff fe45 	bl	800befc <put_fat>
 800c272:	4603      	mov	r3, r0
 800c274:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c276:	7dfb      	ldrb	r3, [r7, #23]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d116      	bne.n	800c2aa <create_chain+0x116>
		fs->last_clst = ncl;
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	69fa      	ldr	r2, [r7, #28]
 800c280:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	695a      	ldr	r2, [r3, #20]
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	699b      	ldr	r3, [r3, #24]
 800c28a:	3b02      	subs	r3, #2
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d804      	bhi.n	800c29a <create_chain+0x106>
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	695b      	ldr	r3, [r3, #20]
 800c294:	1e5a      	subs	r2, r3, #1
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	791b      	ldrb	r3, [r3, #4]
 800c29e:	f043 0301 	orr.w	r3, r3, #1
 800c2a2:	b2da      	uxtb	r2, r3
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	711a      	strb	r2, [r3, #4]
 800c2a8:	e007      	b.n	800c2ba <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c2aa:	7dfb      	ldrb	r3, [r7, #23]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d102      	bne.n	800c2b6 <create_chain+0x122>
 800c2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2b4:	e000      	b.n	800c2b8 <create_chain+0x124>
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c2ba:	69fb      	ldr	r3, [r7, #28]
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3720      	adds	r7, #32
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b087      	sub	sp, #28
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d8:	3304      	adds	r3, #4
 800c2da:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	0a5b      	lsrs	r3, r3, #9
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	8952      	ldrh	r2, [r2, #10]
 800c2e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2e8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	1d1a      	adds	r2, r3, #4
 800c2ee:	613a      	str	r2, [r7, #16]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d101      	bne.n	800c2fe <clmt_clust+0x3a>
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	e010      	b.n	800c320 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c2fe:	697a      	ldr	r2, [r7, #20]
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	429a      	cmp	r2, r3
 800c304:	d307      	bcc.n	800c316 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c306:	697a      	ldr	r2, [r7, #20]
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	1ad3      	subs	r3, r2, r3
 800c30c:	617b      	str	r3, [r7, #20]
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	3304      	adds	r3, #4
 800c312:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c314:	e7e9      	b.n	800c2ea <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c316:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	681a      	ldr	r2, [r3, #0]
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	4413      	add	r3, r2
}
 800c320:	4618      	mov	r0, r3
 800c322:	371c      	adds	r7, #28
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b086      	sub	sp, #24
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c342:	d204      	bcs.n	800c34e <dir_sdi+0x22>
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	f003 031f 	and.w	r3, r3, #31
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d001      	beq.n	800c352 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c34e:	2302      	movs	r3, #2
 800c350:	e063      	b.n	800c41a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	683a      	ldr	r2, [r7, #0]
 800c356:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d106      	bne.n	800c372 <dir_sdi+0x46>
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	2b02      	cmp	r3, #2
 800c36a:	d902      	bls.n	800c372 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c370:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d10c      	bne.n	800c392 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	095b      	lsrs	r3, r3, #5
 800c37c:	693a      	ldr	r2, [r7, #16]
 800c37e:	8912      	ldrh	r2, [r2, #8]
 800c380:	4293      	cmp	r3, r2
 800c382:	d301      	bcc.n	800c388 <dir_sdi+0x5c>
 800c384:	2302      	movs	r3, #2
 800c386:	e048      	b.n	800c41a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	61da      	str	r2, [r3, #28]
 800c390:	e029      	b.n	800c3e6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	895b      	ldrh	r3, [r3, #10]
 800c396:	025b      	lsls	r3, r3, #9
 800c398:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c39a:	e019      	b.n	800c3d0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6979      	ldr	r1, [r7, #20]
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7ff fd06 	bl	800bdb2 <get_fat>
 800c3a6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ae:	d101      	bne.n	800c3b4 <dir_sdi+0x88>
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e032      	b.n	800c41a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d904      	bls.n	800c3c4 <dir_sdi+0x98>
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	699b      	ldr	r3, [r3, #24]
 800c3be:	697a      	ldr	r2, [r7, #20]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d301      	bcc.n	800c3c8 <dir_sdi+0x9c>
 800c3c4:	2302      	movs	r3, #2
 800c3c6:	e028      	b.n	800c41a <dir_sdi+0xee>
			ofs -= csz;
 800c3c8:	683a      	ldr	r2, [r7, #0]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	1ad3      	subs	r3, r2, r3
 800c3ce:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c3d0:	683a      	ldr	r2, [r7, #0]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d2e1      	bcs.n	800c39c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c3d8:	6979      	ldr	r1, [r7, #20]
 800c3da:	6938      	ldr	r0, [r7, #16]
 800c3dc:	f7ff fcca 	bl	800bd74 <clust2sect>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	697a      	ldr	r2, [r7, #20]
 800c3ea:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	69db      	ldr	r3, [r3, #28]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d101      	bne.n	800c3f8 <dir_sdi+0xcc>
 800c3f4:	2302      	movs	r3, #2
 800c3f6:	e010      	b.n	800c41a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	69da      	ldr	r2, [r3, #28]
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	0a5b      	lsrs	r3, r3, #9
 800c400:	441a      	add	r2, r3
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c412:	441a      	add	r2, r3
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c418:	2300      	movs	r3, #0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3718      	adds	r7, #24
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c422:	b580      	push	{r7, lr}
 800c424:	b086      	sub	sp, #24
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
 800c42a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	695b      	ldr	r3, [r3, #20]
 800c436:	3320      	adds	r3, #32
 800c438:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	69db      	ldr	r3, [r3, #28]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d003      	beq.n	800c44a <dir_next+0x28>
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c448:	d301      	bcc.n	800c44e <dir_next+0x2c>
 800c44a:	2304      	movs	r3, #4
 800c44c:	e0aa      	b.n	800c5a4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c454:	2b00      	cmp	r3, #0
 800c456:	f040 8098 	bne.w	800c58a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	69db      	ldr	r3, [r3, #28]
 800c45e:	1c5a      	adds	r2, r3, #1
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	699b      	ldr	r3, [r3, #24]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d10b      	bne.n	800c484 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	095b      	lsrs	r3, r3, #5
 800c470:	68fa      	ldr	r2, [r7, #12]
 800c472:	8912      	ldrh	r2, [r2, #8]
 800c474:	4293      	cmp	r3, r2
 800c476:	f0c0 8088 	bcc.w	800c58a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2200      	movs	r2, #0
 800c47e:	61da      	str	r2, [r3, #28]
 800c480:	2304      	movs	r3, #4
 800c482:	e08f      	b.n	800c5a4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	0a5b      	lsrs	r3, r3, #9
 800c488:	68fa      	ldr	r2, [r7, #12]
 800c48a:	8952      	ldrh	r2, [r2, #10]
 800c48c:	3a01      	subs	r2, #1
 800c48e:	4013      	ands	r3, r2
 800c490:	2b00      	cmp	r3, #0
 800c492:	d17a      	bne.n	800c58a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	699b      	ldr	r3, [r3, #24]
 800c49a:	4619      	mov	r1, r3
 800c49c:	4610      	mov	r0, r2
 800c49e:	f7ff fc88 	bl	800bdb2 <get_fat>
 800c4a2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d801      	bhi.n	800c4ae <dir_next+0x8c>
 800c4aa:	2302      	movs	r3, #2
 800c4ac:	e07a      	b.n	800c5a4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4b4:	d101      	bne.n	800c4ba <dir_next+0x98>
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	e074      	b.n	800c5a4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	699b      	ldr	r3, [r3, #24]
 800c4be:	697a      	ldr	r2, [r7, #20]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d358      	bcc.n	800c576 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d104      	bne.n	800c4d4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	61da      	str	r2, [r3, #28]
 800c4d0:	2304      	movs	r3, #4
 800c4d2:	e067      	b.n	800c5a4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	699b      	ldr	r3, [r3, #24]
 800c4da:	4619      	mov	r1, r3
 800c4dc:	4610      	mov	r0, r2
 800c4de:	f7ff fe59 	bl	800c194 <create_chain>
 800c4e2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d101      	bne.n	800c4ee <dir_next+0xcc>
 800c4ea:	2307      	movs	r3, #7
 800c4ec:	e05a      	b.n	800c5a4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d101      	bne.n	800c4f8 <dir_next+0xd6>
 800c4f4:	2302      	movs	r3, #2
 800c4f6:	e055      	b.n	800c5a4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4fe:	d101      	bne.n	800c504 <dir_next+0xe2>
 800c500:	2301      	movs	r3, #1
 800c502:	e04f      	b.n	800c5a4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c504:	68f8      	ldr	r0, [r7, #12]
 800c506:	f7ff fb55 	bl	800bbb4 <sync_window>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d001      	beq.n	800c514 <dir_next+0xf2>
 800c510:	2301      	movs	r3, #1
 800c512:	e047      	b.n	800c5a4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	3334      	adds	r3, #52	; 0x34
 800c518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c51c:	2100      	movs	r1, #0
 800c51e:	4618      	mov	r0, r3
 800c520:	f7ff f97f 	bl	800b822 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c524:	2300      	movs	r3, #0
 800c526:	613b      	str	r3, [r7, #16]
 800c528:	6979      	ldr	r1, [r7, #20]
 800c52a:	68f8      	ldr	r0, [r7, #12]
 800c52c:	f7ff fc22 	bl	800bd74 <clust2sect>
 800c530:	4602      	mov	r2, r0
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	631a      	str	r2, [r3, #48]	; 0x30
 800c536:	e012      	b.n	800c55e <dir_next+0x13c>
						fs->wflag = 1;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2201      	movs	r2, #1
 800c53c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c53e:	68f8      	ldr	r0, [r7, #12]
 800c540:	f7ff fb38 	bl	800bbb4 <sync_window>
 800c544:	4603      	mov	r3, r0
 800c546:	2b00      	cmp	r3, #0
 800c548:	d001      	beq.n	800c54e <dir_next+0x12c>
 800c54a:	2301      	movs	r3, #1
 800c54c:	e02a      	b.n	800c5a4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	3301      	adds	r3, #1
 800c552:	613b      	str	r3, [r7, #16]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c558:	1c5a      	adds	r2, r3, #1
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	631a      	str	r2, [r3, #48]	; 0x30
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	895b      	ldrh	r3, [r3, #10]
 800c562:	461a      	mov	r2, r3
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	4293      	cmp	r3, r2
 800c568:	d3e6      	bcc.n	800c538 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	1ad2      	subs	r2, r2, r3
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	697a      	ldr	r2, [r7, #20]
 800c57a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c57c:	6979      	ldr	r1, [r7, #20]
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f7ff fbf8 	bl	800bd74 <clust2sect>
 800c584:	4602      	mov	r2, r0
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	68ba      	ldr	r2, [r7, #8]
 800c58e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c59c:	441a      	add	r2, r3
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c5a2:	2300      	movs	r3, #0
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3718      	adds	r7, #24
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b086      	sub	sp, #24
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c5bc:	2100      	movs	r1, #0
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f7ff feb4 	bl	800c32c <dir_sdi>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c5c8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d12b      	bne.n	800c626 <dir_alloc+0x7a>
		n = 0;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	69db      	ldr	r3, [r3, #28]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f7ff fb2f 	bl	800bc3c <move_window>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c5e2:	7dfb      	ldrb	r3, [r7, #23]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d11d      	bne.n	800c624 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6a1b      	ldr	r3, [r3, #32]
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	2be5      	cmp	r3, #229	; 0xe5
 800c5f0:	d004      	beq.n	800c5fc <dir_alloc+0x50>
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6a1b      	ldr	r3, [r3, #32]
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d107      	bne.n	800c60c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	3301      	adds	r3, #1
 800c600:	613b      	str	r3, [r7, #16]
 800c602:	693a      	ldr	r2, [r7, #16]
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	429a      	cmp	r2, r3
 800c608:	d102      	bne.n	800c610 <dir_alloc+0x64>
 800c60a:	e00c      	b.n	800c626 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c60c:	2300      	movs	r3, #0
 800c60e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c610:	2101      	movs	r1, #1
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f7ff ff05 	bl	800c422 <dir_next>
 800c618:	4603      	mov	r3, r0
 800c61a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c61c:	7dfb      	ldrb	r3, [r7, #23]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d0d7      	beq.n	800c5d2 <dir_alloc+0x26>
 800c622:	e000      	b.n	800c626 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c624:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c626:	7dfb      	ldrb	r3, [r7, #23]
 800c628:	2b04      	cmp	r3, #4
 800c62a:	d101      	bne.n	800c630 <dir_alloc+0x84>
 800c62c:	2307      	movs	r3, #7
 800c62e:	75fb      	strb	r3, [r7, #23]
	return res;
 800c630:	7dfb      	ldrb	r3, [r7, #23]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3718      	adds	r7, #24
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}

0800c63a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c63a:	b580      	push	{r7, lr}
 800c63c:	b084      	sub	sp, #16
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
 800c642:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	331a      	adds	r3, #26
 800c648:	4618      	mov	r0, r3
 800c64a:	f7ff f847 	bl	800b6dc <ld_word>
 800c64e:	4603      	mov	r3, r0
 800c650:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	2b03      	cmp	r3, #3
 800c658:	d109      	bne.n	800c66e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	3314      	adds	r3, #20
 800c65e:	4618      	mov	r0, r3
 800c660:	f7ff f83c 	bl	800b6dc <ld_word>
 800c664:	4603      	mov	r3, r0
 800c666:	041b      	lsls	r3, r3, #16
 800c668:	68fa      	ldr	r2, [r7, #12]
 800c66a:	4313      	orrs	r3, r2
 800c66c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c66e:	68fb      	ldr	r3, [r7, #12]
}
 800c670:	4618      	mov	r0, r3
 800c672:	3710      	adds	r7, #16
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	60f8      	str	r0, [r7, #12]
 800c680:	60b9      	str	r1, [r7, #8]
 800c682:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	331a      	adds	r3, #26
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	b292      	uxth	r2, r2
 800c68c:	4611      	mov	r1, r2
 800c68e:	4618      	mov	r0, r3
 800c690:	f7ff f85f 	bl	800b752 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	2b03      	cmp	r3, #3
 800c69a:	d109      	bne.n	800c6b0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	f103 0214 	add.w	r2, r3, #20
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	0c1b      	lsrs	r3, r3, #16
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	4610      	mov	r0, r2
 800c6ac:	f7ff f851 	bl	800b752 <st_word>
	}
}
 800c6b0:	bf00      	nop
 800c6b2:	3710      	adds	r7, #16
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c6b8:	b590      	push	{r4, r7, lr}
 800c6ba:	b087      	sub	sp, #28
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	331a      	adds	r3, #26
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7ff f808 	bl	800b6dc <ld_word>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d001      	beq.n	800c6d6 <cmp_lfn+0x1e>
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	e059      	b.n	800c78a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6de:	1e5a      	subs	r2, r3, #1
 800c6e0:	4613      	mov	r3, r2
 800c6e2:	005b      	lsls	r3, r3, #1
 800c6e4:	4413      	add	r3, r2
 800c6e6:	009b      	lsls	r3, r3, #2
 800c6e8:	4413      	add	r3, r2
 800c6ea:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	81fb      	strh	r3, [r7, #14]
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	613b      	str	r3, [r7, #16]
 800c6f4:	e033      	b.n	800c75e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c6f6:	4a27      	ldr	r2, [pc, #156]	; (800c794 <cmp_lfn+0xdc>)
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	461a      	mov	r2, r3
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	4413      	add	r3, r2
 800c704:	4618      	mov	r0, r3
 800c706:	f7fe ffe9 	bl	800b6dc <ld_word>
 800c70a:	4603      	mov	r3, r0
 800c70c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c70e:	89fb      	ldrh	r3, [r7, #14]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d01a      	beq.n	800c74a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	2bfe      	cmp	r3, #254	; 0xfe
 800c718:	d812      	bhi.n	800c740 <cmp_lfn+0x88>
 800c71a:	89bb      	ldrh	r3, [r7, #12]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f001 ffb3 	bl	800e688 <ff_wtoupper>
 800c722:	4603      	mov	r3, r0
 800c724:	461c      	mov	r4, r3
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	1c5a      	adds	r2, r3, #1
 800c72a:	617a      	str	r2, [r7, #20]
 800c72c:	005b      	lsls	r3, r3, #1
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	4413      	add	r3, r2
 800c732:	881b      	ldrh	r3, [r3, #0]
 800c734:	4618      	mov	r0, r3
 800c736:	f001 ffa7 	bl	800e688 <ff_wtoupper>
 800c73a:	4603      	mov	r3, r0
 800c73c:	429c      	cmp	r4, r3
 800c73e:	d001      	beq.n	800c744 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c740:	2300      	movs	r3, #0
 800c742:	e022      	b.n	800c78a <cmp_lfn+0xd2>
			}
			wc = uc;
 800c744:	89bb      	ldrh	r3, [r7, #12]
 800c746:	81fb      	strh	r3, [r7, #14]
 800c748:	e006      	b.n	800c758 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c74a:	89bb      	ldrh	r3, [r7, #12]
 800c74c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c750:	4293      	cmp	r3, r2
 800c752:	d001      	beq.n	800c758 <cmp_lfn+0xa0>
 800c754:	2300      	movs	r3, #0
 800c756:	e018      	b.n	800c78a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	3301      	adds	r3, #1
 800c75c:	613b      	str	r3, [r7, #16]
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	2b0c      	cmp	r3, #12
 800c762:	d9c8      	bls.n	800c6f6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d00b      	beq.n	800c788 <cmp_lfn+0xd0>
 800c770:	89fb      	ldrh	r3, [r7, #14]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d008      	beq.n	800c788 <cmp_lfn+0xd0>
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	005b      	lsls	r3, r3, #1
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	4413      	add	r3, r2
 800c77e:	881b      	ldrh	r3, [r3, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d001      	beq.n	800c788 <cmp_lfn+0xd0>
 800c784:	2300      	movs	r3, #0
 800c786:	e000      	b.n	800c78a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c788:	2301      	movs	r3, #1
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	371c      	adds	r7, #28
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd90      	pop	{r4, r7, pc}
 800c792:	bf00      	nop
 800c794:	08010e34 	.word	0x08010e34

0800c798 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b088      	sub	sp, #32
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	4611      	mov	r1, r2
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	71fb      	strb	r3, [r7, #7]
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	330d      	adds	r3, #13
 800c7b2:	79ba      	ldrb	r2, [r7, #6]
 800c7b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	330b      	adds	r3, #11
 800c7ba:	220f      	movs	r2, #15
 800c7bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	330c      	adds	r3, #12
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	331a      	adds	r3, #26
 800c7ca:	2100      	movs	r1, #0
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7fe ffc0 	bl	800b752 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c7d2:	79fb      	ldrb	r3, [r7, #7]
 800c7d4:	1e5a      	subs	r2, r3, #1
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	005b      	lsls	r3, r3, #1
 800c7da:	4413      	add	r3, r2
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	4413      	add	r3, r2
 800c7e0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	82fb      	strh	r3, [r7, #22]
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c7ea:	8afb      	ldrh	r3, [r7, #22]
 800c7ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d007      	beq.n	800c804 <put_lfn+0x6c>
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	1c5a      	adds	r2, r3, #1
 800c7f8:	61fa      	str	r2, [r7, #28]
 800c7fa:	005b      	lsls	r3, r3, #1
 800c7fc:	68fa      	ldr	r2, [r7, #12]
 800c7fe:	4413      	add	r3, r2
 800c800:	881b      	ldrh	r3, [r3, #0]
 800c802:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c804:	4a17      	ldr	r2, [pc, #92]	; (800c864 <put_lfn+0xcc>)
 800c806:	69bb      	ldr	r3, [r7, #24]
 800c808:	4413      	add	r3, r2
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	461a      	mov	r2, r3
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	4413      	add	r3, r2
 800c812:	8afa      	ldrh	r2, [r7, #22]
 800c814:	4611      	mov	r1, r2
 800c816:	4618      	mov	r0, r3
 800c818:	f7fe ff9b 	bl	800b752 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c81c:	8afb      	ldrh	r3, [r7, #22]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d102      	bne.n	800c828 <put_lfn+0x90>
 800c822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c826:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c828:	69bb      	ldr	r3, [r7, #24]
 800c82a:	3301      	adds	r3, #1
 800c82c:	61bb      	str	r3, [r7, #24]
 800c82e:	69bb      	ldr	r3, [r7, #24]
 800c830:	2b0c      	cmp	r3, #12
 800c832:	d9da      	bls.n	800c7ea <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c834:	8afb      	ldrh	r3, [r7, #22]
 800c836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d006      	beq.n	800c84c <put_lfn+0xb4>
 800c83e:	69fb      	ldr	r3, [r7, #28]
 800c840:	005b      	lsls	r3, r3, #1
 800c842:	68fa      	ldr	r2, [r7, #12]
 800c844:	4413      	add	r3, r2
 800c846:	881b      	ldrh	r3, [r3, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d103      	bne.n	800c854 <put_lfn+0xbc>
 800c84c:	79fb      	ldrb	r3, [r7, #7]
 800c84e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c852:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	79fa      	ldrb	r2, [r7, #7]
 800c858:	701a      	strb	r2, [r3, #0]
}
 800c85a:	bf00      	nop
 800c85c:	3720      	adds	r7, #32
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	08010e34 	.word	0x08010e34

0800c868 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b08c      	sub	sp, #48	; 0x30
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	60b9      	str	r1, [r7, #8]
 800c872:	607a      	str	r2, [r7, #4]
 800c874:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c876:	220b      	movs	r2, #11
 800c878:	68b9      	ldr	r1, [r7, #8]
 800c87a:	68f8      	ldr	r0, [r7, #12]
 800c87c:	f7fe ffb0 	bl	800b7e0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	2b05      	cmp	r3, #5
 800c884:	d92b      	bls.n	800c8de <gen_numname+0x76>
		sr = seq;
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c88a:	e022      	b.n	800c8d2 <gen_numname+0x6a>
			wc = *lfn++;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	1c9a      	adds	r2, r3, #2
 800c890:	607a      	str	r2, [r7, #4]
 800c892:	881b      	ldrh	r3, [r3, #0]
 800c894:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c896:	2300      	movs	r3, #0
 800c898:	62bb      	str	r3, [r7, #40]	; 0x28
 800c89a:	e017      	b.n	800c8cc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c89c:	69fb      	ldr	r3, [r7, #28]
 800c89e:	005a      	lsls	r2, r3, #1
 800c8a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8a2:	f003 0301 	and.w	r3, r3, #1
 800c8a6:	4413      	add	r3, r2
 800c8a8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c8aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8ac:	085b      	lsrs	r3, r3, #1
 800c8ae:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d005      	beq.n	800c8c6 <gen_numname+0x5e>
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c8c0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c8c4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ce:	2b0f      	cmp	r3, #15
 800c8d0:	d9e4      	bls.n	800c89c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	881b      	ldrh	r3, [r3, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d1d8      	bne.n	800c88c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c8da:	69fb      	ldr	r3, [r7, #28]
 800c8dc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c8de:	2307      	movs	r3, #7
 800c8e0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	f003 030f 	and.w	r3, r3, #15
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	3330      	adds	r3, #48	; 0x30
 800c8ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c8f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8f6:	2b39      	cmp	r3, #57	; 0x39
 800c8f8:	d904      	bls.n	800c904 <gen_numname+0x9c>
 800c8fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8fe:	3307      	adds	r3, #7
 800c900:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c906:	1e5a      	subs	r2, r3, #1
 800c908:	62ba      	str	r2, [r7, #40]	; 0x28
 800c90a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c90e:	4413      	add	r3, r2
 800c910:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c914:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	091b      	lsrs	r3, r3, #4
 800c91c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d1de      	bne.n	800c8e2 <gen_numname+0x7a>
	ns[i] = '~';
 800c924:	f107 0214 	add.w	r2, r7, #20
 800c928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92a:	4413      	add	r3, r2
 800c92c:	227e      	movs	r2, #126	; 0x7e
 800c92e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c930:	2300      	movs	r3, #0
 800c932:	627b      	str	r3, [r7, #36]	; 0x24
 800c934:	e002      	b.n	800c93c <gen_numname+0xd4>
 800c936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c938:	3301      	adds	r3, #1
 800c93a:	627b      	str	r3, [r7, #36]	; 0x24
 800c93c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c940:	429a      	cmp	r2, r3
 800c942:	d205      	bcs.n	800c950 <gen_numname+0xe8>
 800c944:	68fa      	ldr	r2, [r7, #12]
 800c946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c948:	4413      	add	r3, r2
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	2b20      	cmp	r3, #32
 800c94e:	d1f2      	bne.n	800c936 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c952:	2b07      	cmp	r3, #7
 800c954:	d808      	bhi.n	800c968 <gen_numname+0x100>
 800c956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c958:	1c5a      	adds	r2, r3, #1
 800c95a:	62ba      	str	r2, [r7, #40]	; 0x28
 800c95c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c960:	4413      	add	r3, r2
 800c962:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c966:	e000      	b.n	800c96a <gen_numname+0x102>
 800c968:	2120      	movs	r1, #32
 800c96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96c:	1c5a      	adds	r2, r3, #1
 800c96e:	627a      	str	r2, [r7, #36]	; 0x24
 800c970:	68fa      	ldr	r2, [r7, #12]
 800c972:	4413      	add	r3, r2
 800c974:	460a      	mov	r2, r1
 800c976:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97a:	2b07      	cmp	r3, #7
 800c97c:	d9e8      	bls.n	800c950 <gen_numname+0xe8>
}
 800c97e:	bf00      	nop
 800c980:	3730      	adds	r7, #48	; 0x30
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c986:	b480      	push	{r7}
 800c988:	b085      	sub	sp, #20
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c98e:	2300      	movs	r3, #0
 800c990:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c992:	230b      	movs	r3, #11
 800c994:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c996:	7bfb      	ldrb	r3, [r7, #15]
 800c998:	b2da      	uxtb	r2, r3
 800c99a:	0852      	lsrs	r2, r2, #1
 800c99c:	01db      	lsls	r3, r3, #7
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	b2da      	uxtb	r2, r3
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	1c59      	adds	r1, r3, #1
 800c9a6:	6079      	str	r1, [r7, #4]
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	4413      	add	r3, r2
 800c9ac:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	3b01      	subs	r3, #1
 800c9b2:	60bb      	str	r3, [r7, #8]
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d1ed      	bne.n	800c996 <sum_sfn+0x10>
	return sum;
 800c9ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3714      	adds	r7, #20
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr

0800c9c8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b086      	sub	sp, #24
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c9d6:	2100      	movs	r1, #0
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f7ff fca7 	bl	800c32c <dir_sdi>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c9e2:	7dfb      	ldrb	r3, [r7, #23]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d001      	beq.n	800c9ec <dir_find+0x24>
 800c9e8:	7dfb      	ldrb	r3, [r7, #23]
 800c9ea:	e0a9      	b.n	800cb40 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c9ec:	23ff      	movs	r3, #255	; 0xff
 800c9ee:	753b      	strb	r3, [r7, #20]
 800c9f0:	7d3b      	ldrb	r3, [r7, #20]
 800c9f2:	757b      	strb	r3, [r7, #21]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c9fa:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	69db      	ldr	r3, [r3, #28]
 800ca00:	4619      	mov	r1, r3
 800ca02:	6938      	ldr	r0, [r7, #16]
 800ca04:	f7ff f91a 	bl	800bc3c <move_window>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ca0c:	7dfb      	ldrb	r3, [r7, #23]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	f040 8090 	bne.w	800cb34 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6a1b      	ldr	r3, [r3, #32]
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ca1c:	7dbb      	ldrb	r3, [r7, #22]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d102      	bne.n	800ca28 <dir_find+0x60>
 800ca22:	2304      	movs	r3, #4
 800ca24:	75fb      	strb	r3, [r7, #23]
 800ca26:	e08a      	b.n	800cb3e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6a1b      	ldr	r3, [r3, #32]
 800ca2c:	330b      	adds	r3, #11
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca34:	73fb      	strb	r3, [r7, #15]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	7bfa      	ldrb	r2, [r7, #15]
 800ca3a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ca3c:	7dbb      	ldrb	r3, [r7, #22]
 800ca3e:	2be5      	cmp	r3, #229	; 0xe5
 800ca40:	d007      	beq.n	800ca52 <dir_find+0x8a>
 800ca42:	7bfb      	ldrb	r3, [r7, #15]
 800ca44:	f003 0308 	and.w	r3, r3, #8
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d009      	beq.n	800ca60 <dir_find+0x98>
 800ca4c:	7bfb      	ldrb	r3, [r7, #15]
 800ca4e:	2b0f      	cmp	r3, #15
 800ca50:	d006      	beq.n	800ca60 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ca52:	23ff      	movs	r3, #255	; 0xff
 800ca54:	757b      	strb	r3, [r7, #21]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f04f 32ff 	mov.w	r2, #4294967295
 800ca5c:	631a      	str	r2, [r3, #48]	; 0x30
 800ca5e:	e05e      	b.n	800cb1e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ca60:	7bfb      	ldrb	r3, [r7, #15]
 800ca62:	2b0f      	cmp	r3, #15
 800ca64:	d136      	bne.n	800cad4 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ca6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d154      	bne.n	800cb1e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ca74:	7dbb      	ldrb	r3, [r7, #22]
 800ca76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00d      	beq.n	800ca9a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6a1b      	ldr	r3, [r3, #32]
 800ca82:	7b5b      	ldrb	r3, [r3, #13]
 800ca84:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ca86:	7dbb      	ldrb	r3, [r7, #22]
 800ca88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca8c:	75bb      	strb	r3, [r7, #22]
 800ca8e:	7dbb      	ldrb	r3, [r7, #22]
 800ca90:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	695a      	ldr	r2, [r3, #20]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ca9a:	7dba      	ldrb	r2, [r7, #22]
 800ca9c:	7d7b      	ldrb	r3, [r7, #21]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d115      	bne.n	800cace <dir_find+0x106>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a1b      	ldr	r3, [r3, #32]
 800caa6:	330d      	adds	r3, #13
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	7d3a      	ldrb	r2, [r7, #20]
 800caac:	429a      	cmp	r2, r3
 800caae:	d10e      	bne.n	800cace <dir_find+0x106>
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	68da      	ldr	r2, [r3, #12]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6a1b      	ldr	r3, [r3, #32]
 800cab8:	4619      	mov	r1, r3
 800caba:	4610      	mov	r0, r2
 800cabc:	f7ff fdfc 	bl	800c6b8 <cmp_lfn>
 800cac0:	4603      	mov	r3, r0
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d003      	beq.n	800cace <dir_find+0x106>
 800cac6:	7d7b      	ldrb	r3, [r7, #21]
 800cac8:	3b01      	subs	r3, #1
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	e000      	b.n	800cad0 <dir_find+0x108>
 800cace:	23ff      	movs	r3, #255	; 0xff
 800cad0:	757b      	strb	r3, [r7, #21]
 800cad2:	e024      	b.n	800cb1e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cad4:	7d7b      	ldrb	r3, [r7, #21]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d109      	bne.n	800caee <dir_find+0x126>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6a1b      	ldr	r3, [r3, #32]
 800cade:	4618      	mov	r0, r3
 800cae0:	f7ff ff51 	bl	800c986 <sum_sfn>
 800cae4:	4603      	mov	r3, r0
 800cae6:	461a      	mov	r2, r3
 800cae8:	7d3b      	ldrb	r3, [r7, #20]
 800caea:	4293      	cmp	r3, r2
 800caec:	d024      	beq.n	800cb38 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800caf4:	f003 0301 	and.w	r3, r3, #1
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d10a      	bne.n	800cb12 <dir_find+0x14a>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6a18      	ldr	r0, [r3, #32]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	3324      	adds	r3, #36	; 0x24
 800cb04:	220b      	movs	r2, #11
 800cb06:	4619      	mov	r1, r3
 800cb08:	f7fe fea5 	bl	800b856 <mem_cmp>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d014      	beq.n	800cb3c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cb12:	23ff      	movs	r3, #255	; 0xff
 800cb14:	757b      	strb	r3, [r7, #21]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f04f 32ff 	mov.w	r2, #4294967295
 800cb1c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cb1e:	2100      	movs	r1, #0
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f7ff fc7e 	bl	800c422 <dir_next>
 800cb26:	4603      	mov	r3, r0
 800cb28:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cb2a:	7dfb      	ldrb	r3, [r7, #23]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f43f af65 	beq.w	800c9fc <dir_find+0x34>
 800cb32:	e004      	b.n	800cb3e <dir_find+0x176>
		if (res != FR_OK) break;
 800cb34:	bf00      	nop
 800cb36:	e002      	b.n	800cb3e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cb38:	bf00      	nop
 800cb3a:	e000      	b.n	800cb3e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cb3c:	bf00      	nop

	return res;
 800cb3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3718      	adds	r7, #24
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b08c      	sub	sp, #48	; 0x30
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cb5c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d001      	beq.n	800cb68 <dir_register+0x20>
 800cb64:	2306      	movs	r3, #6
 800cb66:	e0e0      	b.n	800cd2a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cb68:	2300      	movs	r3, #0
 800cb6a:	627b      	str	r3, [r7, #36]	; 0x24
 800cb6c:	e002      	b.n	800cb74 <dir_register+0x2c>
 800cb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb70:	3301      	adds	r3, #1
 800cb72:	627b      	str	r3, [r7, #36]	; 0x24
 800cb74:	69fb      	ldr	r3, [r7, #28]
 800cb76:	68da      	ldr	r2, [r3, #12]
 800cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7a:	005b      	lsls	r3, r3, #1
 800cb7c:	4413      	add	r3, r2
 800cb7e:	881b      	ldrh	r3, [r3, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d1f4      	bne.n	800cb6e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800cb8a:	f107 030c 	add.w	r3, r7, #12
 800cb8e:	220c      	movs	r2, #12
 800cb90:	4618      	mov	r0, r3
 800cb92:	f7fe fe25 	bl	800b7e0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cb96:	7dfb      	ldrb	r3, [r7, #23]
 800cb98:	f003 0301 	and.w	r3, r3, #1
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d032      	beq.n	800cc06 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2240      	movs	r2, #64	; 0x40
 800cba4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800cba8:	2301      	movs	r3, #1
 800cbaa:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbac:	e016      	b.n	800cbdc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	68da      	ldr	r2, [r3, #12]
 800cbb8:	f107 010c 	add.w	r1, r7, #12
 800cbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbbe:	f7ff fe53 	bl	800c868 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f7ff ff00 	bl	800c9c8 <dir_find>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800cbce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d106      	bne.n	800cbe4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800cbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd8:	3301      	adds	r3, #1
 800cbda:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbde:	2b63      	cmp	r3, #99	; 0x63
 800cbe0:	d9e5      	bls.n	800cbae <dir_register+0x66>
 800cbe2:	e000      	b.n	800cbe6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800cbe4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe8:	2b64      	cmp	r3, #100	; 0x64
 800cbea:	d101      	bne.n	800cbf0 <dir_register+0xa8>
 800cbec:	2307      	movs	r3, #7
 800cbee:	e09c      	b.n	800cd2a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800cbf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cbf4:	2b04      	cmp	r3, #4
 800cbf6:	d002      	beq.n	800cbfe <dir_register+0xb6>
 800cbf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cbfc:	e095      	b.n	800cd2a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cbfe:	7dfa      	ldrb	r2, [r7, #23]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cc06:	7dfb      	ldrb	r3, [r7, #23]
 800cc08:	f003 0302 	and.w	r3, r3, #2
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d007      	beq.n	800cc20 <dir_register+0xd8>
 800cc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc12:	330c      	adds	r3, #12
 800cc14:	4a47      	ldr	r2, [pc, #284]	; (800cd34 <dir_register+0x1ec>)
 800cc16:	fba2 2303 	umull	r2, r3, r2, r3
 800cc1a:	089b      	lsrs	r3, r3, #2
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	e000      	b.n	800cc22 <dir_register+0xda>
 800cc20:	2301      	movs	r3, #1
 800cc22:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800cc24:	6a39      	ldr	r1, [r7, #32]
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f7ff fcc0 	bl	800c5ac <dir_alloc>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cc32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d148      	bne.n	800cccc <dir_register+0x184>
 800cc3a:	6a3b      	ldr	r3, [r7, #32]
 800cc3c:	3b01      	subs	r3, #1
 800cc3e:	623b      	str	r3, [r7, #32]
 800cc40:	6a3b      	ldr	r3, [r7, #32]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d042      	beq.n	800cccc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	695a      	ldr	r2, [r3, #20]
 800cc4a:	6a3b      	ldr	r3, [r7, #32]
 800cc4c:	015b      	lsls	r3, r3, #5
 800cc4e:	1ad3      	subs	r3, r2, r3
 800cc50:	4619      	mov	r1, r3
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f7ff fb6a 	bl	800c32c <dir_sdi>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cc5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d132      	bne.n	800cccc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	3324      	adds	r3, #36	; 0x24
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7ff fe8b 	bl	800c986 <sum_sfn>
 800cc70:	4603      	mov	r3, r0
 800cc72:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	69db      	ldr	r3, [r3, #28]
 800cc78:	4619      	mov	r1, r3
 800cc7a:	69f8      	ldr	r0, [r7, #28]
 800cc7c:	f7fe ffde 	bl	800bc3c <move_window>
 800cc80:	4603      	mov	r3, r0
 800cc82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800cc86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d11d      	bne.n	800ccca <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cc8e:	69fb      	ldr	r3, [r7, #28]
 800cc90:	68d8      	ldr	r0, [r3, #12]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6a19      	ldr	r1, [r3, #32]
 800cc96:	6a3b      	ldr	r3, [r7, #32]
 800cc98:	b2da      	uxtb	r2, r3
 800cc9a:	7efb      	ldrb	r3, [r7, #27]
 800cc9c:	f7ff fd7c 	bl	800c798 <put_lfn>
				fs->wflag = 1;
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	2201      	movs	r2, #1
 800cca4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cca6:	2100      	movs	r1, #0
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f7ff fbba 	bl	800c422 <dir_next>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800ccb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d107      	bne.n	800cccc <dir_register+0x184>
 800ccbc:	6a3b      	ldr	r3, [r7, #32]
 800ccbe:	3b01      	subs	r3, #1
 800ccc0:	623b      	str	r3, [r7, #32]
 800ccc2:	6a3b      	ldr	r3, [r7, #32]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1d5      	bne.n	800cc74 <dir_register+0x12c>
 800ccc8:	e000      	b.n	800cccc <dir_register+0x184>
				if (res != FR_OK) break;
 800ccca:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cccc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d128      	bne.n	800cd26 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	69db      	ldr	r3, [r3, #28]
 800ccd8:	4619      	mov	r1, r3
 800ccda:	69f8      	ldr	r0, [r7, #28]
 800ccdc:	f7fe ffae 	bl	800bc3c <move_window>
 800cce0:	4603      	mov	r3, r0
 800cce2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800cce6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d11b      	bne.n	800cd26 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6a1b      	ldr	r3, [r3, #32]
 800ccf2:	2220      	movs	r2, #32
 800ccf4:	2100      	movs	r1, #0
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7fe fd93 	bl	800b822 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6a18      	ldr	r0, [r3, #32]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	3324      	adds	r3, #36	; 0x24
 800cd04:	220b      	movs	r2, #11
 800cd06:	4619      	mov	r1, r3
 800cd08:	f7fe fd6a 	bl	800b7e0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6a1b      	ldr	r3, [r3, #32]
 800cd16:	330c      	adds	r3, #12
 800cd18:	f002 0218 	and.w	r2, r2, #24
 800cd1c:	b2d2      	uxtb	r2, r2
 800cd1e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800cd20:	69fb      	ldr	r3, [r7, #28]
 800cd22:	2201      	movs	r2, #1
 800cd24:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cd26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3730      	adds	r7, #48	; 0x30
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	4ec4ec4f 	.word	0x4ec4ec4f

0800cd38 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b08a      	sub	sp, #40	; 0x28
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	613b      	str	r3, [r7, #16]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	68db      	ldr	r3, [r3, #12]
 800cd4e:	60fb      	str	r3, [r7, #12]
 800cd50:	2300      	movs	r3, #0
 800cd52:	617b      	str	r3, [r7, #20]
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800cd58:	69bb      	ldr	r3, [r7, #24]
 800cd5a:	1c5a      	adds	r2, r3, #1
 800cd5c:	61ba      	str	r2, [r7, #24]
 800cd5e:	693a      	ldr	r2, [r7, #16]
 800cd60:	4413      	add	r3, r2
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800cd66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd68:	2b1f      	cmp	r3, #31
 800cd6a:	d940      	bls.n	800cdee <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800cd6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd6e:	2b2f      	cmp	r3, #47	; 0x2f
 800cd70:	d006      	beq.n	800cd80 <create_name+0x48>
 800cd72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd74:	2b5c      	cmp	r3, #92	; 0x5c
 800cd76:	d110      	bne.n	800cd9a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cd78:	e002      	b.n	800cd80 <create_name+0x48>
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	61bb      	str	r3, [r7, #24]
 800cd80:	693a      	ldr	r2, [r7, #16]
 800cd82:	69bb      	ldr	r3, [r7, #24]
 800cd84:	4413      	add	r3, r2
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	2b2f      	cmp	r3, #47	; 0x2f
 800cd8a:	d0f6      	beq.n	800cd7a <create_name+0x42>
 800cd8c:	693a      	ldr	r2, [r7, #16]
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	4413      	add	r3, r2
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	2b5c      	cmp	r3, #92	; 0x5c
 800cd96:	d0f0      	beq.n	800cd7a <create_name+0x42>
			break;
 800cd98:	e02a      	b.n	800cdf0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	2bfe      	cmp	r3, #254	; 0xfe
 800cd9e:	d901      	bls.n	800cda4 <create_name+0x6c>
 800cda0:	2306      	movs	r3, #6
 800cda2:	e177      	b.n	800d094 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800cda4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800cdaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdac:	2101      	movs	r1, #1
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f001 fc2e 	bl	800e610 <ff_convert>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800cdb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d101      	bne.n	800cdc2 <create_name+0x8a>
 800cdbe:	2306      	movs	r3, #6
 800cdc0:	e168      	b.n	800d094 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800cdc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdc4:	2b7f      	cmp	r3, #127	; 0x7f
 800cdc6:	d809      	bhi.n	800cddc <create_name+0xa4>
 800cdc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdca:	4619      	mov	r1, r3
 800cdcc:	48b3      	ldr	r0, [pc, #716]	; (800d09c <create_name+0x364>)
 800cdce:	f7fe fd69 	bl	800b8a4 <chk_chr>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d001      	beq.n	800cddc <create_name+0xa4>
 800cdd8:	2306      	movs	r3, #6
 800cdda:	e15b      	b.n	800d094 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	1c5a      	adds	r2, r3, #1
 800cde0:	617a      	str	r2, [r7, #20]
 800cde2:	005b      	lsls	r3, r3, #1
 800cde4:	68fa      	ldr	r2, [r7, #12]
 800cde6:	4413      	add	r3, r2
 800cde8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cdea:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800cdec:	e7b4      	b.n	800cd58 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800cdee:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800cdf0:	693a      	ldr	r2, [r7, #16]
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	441a      	add	r2, r3
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cdfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdfc:	2b1f      	cmp	r3, #31
 800cdfe:	d801      	bhi.n	800ce04 <create_name+0xcc>
 800ce00:	2304      	movs	r3, #4
 800ce02:	e000      	b.n	800ce06 <create_name+0xce>
 800ce04:	2300      	movs	r3, #0
 800ce06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ce0a:	e011      	b.n	800ce30 <create_name+0xf8>
		w = lfn[di - 1];
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ce12:	3b01      	subs	r3, #1
 800ce14:	005b      	lsls	r3, r3, #1
 800ce16:	68fa      	ldr	r2, [r7, #12]
 800ce18:	4413      	add	r3, r2
 800ce1a:	881b      	ldrh	r3, [r3, #0]
 800ce1c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ce1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce20:	2b20      	cmp	r3, #32
 800ce22:	d002      	beq.n	800ce2a <create_name+0xf2>
 800ce24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce26:	2b2e      	cmp	r3, #46	; 0x2e
 800ce28:	d106      	bne.n	800ce38 <create_name+0x100>
		di--;
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	3b01      	subs	r3, #1
 800ce2e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d1ea      	bne.n	800ce0c <create_name+0xd4>
 800ce36:	e000      	b.n	800ce3a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ce38:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	005b      	lsls	r3, r3, #1
 800ce3e:	68fa      	ldr	r2, [r7, #12]
 800ce40:	4413      	add	r3, r2
 800ce42:	2200      	movs	r2, #0
 800ce44:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d101      	bne.n	800ce50 <create_name+0x118>
 800ce4c:	2306      	movs	r3, #6
 800ce4e:	e121      	b.n	800d094 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	3324      	adds	r3, #36	; 0x24
 800ce54:	220b      	movs	r2, #11
 800ce56:	2120      	movs	r1, #32
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7fe fce2 	bl	800b822 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ce5e:	2300      	movs	r3, #0
 800ce60:	61bb      	str	r3, [r7, #24]
 800ce62:	e002      	b.n	800ce6a <create_name+0x132>
 800ce64:	69bb      	ldr	r3, [r7, #24]
 800ce66:	3301      	adds	r3, #1
 800ce68:	61bb      	str	r3, [r7, #24]
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	005b      	lsls	r3, r3, #1
 800ce6e:	68fa      	ldr	r2, [r7, #12]
 800ce70:	4413      	add	r3, r2
 800ce72:	881b      	ldrh	r3, [r3, #0]
 800ce74:	2b20      	cmp	r3, #32
 800ce76:	d0f5      	beq.n	800ce64 <create_name+0x12c>
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	005b      	lsls	r3, r3, #1
 800ce7c:	68fa      	ldr	r2, [r7, #12]
 800ce7e:	4413      	add	r3, r2
 800ce80:	881b      	ldrh	r3, [r3, #0]
 800ce82:	2b2e      	cmp	r3, #46	; 0x2e
 800ce84:	d0ee      	beq.n	800ce64 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d009      	beq.n	800cea0 <create_name+0x168>
 800ce8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce90:	f043 0303 	orr.w	r3, r3, #3
 800ce94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ce98:	e002      	b.n	800cea0 <create_name+0x168>
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	3b01      	subs	r3, #1
 800ce9e:	617b      	str	r3, [r7, #20]
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d009      	beq.n	800ceba <create_name+0x182>
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ceac:	3b01      	subs	r3, #1
 800ceae:	005b      	lsls	r3, r3, #1
 800ceb0:	68fa      	ldr	r2, [r7, #12]
 800ceb2:	4413      	add	r3, r2
 800ceb4:	881b      	ldrh	r3, [r3, #0]
 800ceb6:	2b2e      	cmp	r3, #46	; 0x2e
 800ceb8:	d1ef      	bne.n	800ce9a <create_name+0x162>

	i = b = 0; ni = 8;
 800ceba:	2300      	movs	r3, #0
 800cebc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cec0:	2300      	movs	r3, #0
 800cec2:	623b      	str	r3, [r7, #32]
 800cec4:	2308      	movs	r3, #8
 800cec6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cec8:	69bb      	ldr	r3, [r7, #24]
 800ceca:	1c5a      	adds	r2, r3, #1
 800cecc:	61ba      	str	r2, [r7, #24]
 800cece:	005b      	lsls	r3, r3, #1
 800ced0:	68fa      	ldr	r2, [r7, #12]
 800ced2:	4413      	add	r3, r2
 800ced4:	881b      	ldrh	r3, [r3, #0]
 800ced6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ced8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	f000 8090 	beq.w	800d000 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cee0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cee2:	2b20      	cmp	r3, #32
 800cee4:	d006      	beq.n	800cef4 <create_name+0x1bc>
 800cee6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cee8:	2b2e      	cmp	r3, #46	; 0x2e
 800ceea:	d10a      	bne.n	800cf02 <create_name+0x1ca>
 800ceec:	69ba      	ldr	r2, [r7, #24]
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d006      	beq.n	800cf02 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800cef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cef8:	f043 0303 	orr.w	r3, r3, #3
 800cefc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf00:	e07d      	b.n	800cffe <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cf02:	6a3a      	ldr	r2, [r7, #32]
 800cf04:	69fb      	ldr	r3, [r7, #28]
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d203      	bcs.n	800cf12 <create_name+0x1da>
 800cf0a:	69ba      	ldr	r2, [r7, #24]
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d123      	bne.n	800cf5a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800cf12:	69fb      	ldr	r3, [r7, #28]
 800cf14:	2b0b      	cmp	r3, #11
 800cf16:	d106      	bne.n	800cf26 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800cf18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf1c:	f043 0303 	orr.w	r3, r3, #3
 800cf20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf24:	e06f      	b.n	800d006 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cf26:	69ba      	ldr	r2, [r7, #24]
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d005      	beq.n	800cf3a <create_name+0x202>
 800cf2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf32:	f043 0303 	orr.w	r3, r3, #3
 800cf36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800cf3a:	69ba      	ldr	r2, [r7, #24]
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d860      	bhi.n	800d004 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	61bb      	str	r3, [r7, #24]
 800cf46:	2308      	movs	r3, #8
 800cf48:	623b      	str	r3, [r7, #32]
 800cf4a:	230b      	movs	r3, #11
 800cf4c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800cf4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cf58:	e051      	b.n	800cffe <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800cf5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf5c:	2b7f      	cmp	r3, #127	; 0x7f
 800cf5e:	d914      	bls.n	800cf8a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cf60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf62:	2100      	movs	r1, #0
 800cf64:	4618      	mov	r0, r3
 800cf66:	f001 fb53 	bl	800e610 <ff_convert>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cf6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d004      	beq.n	800cf7e <create_name+0x246>
 800cf74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf76:	3b80      	subs	r3, #128	; 0x80
 800cf78:	4a49      	ldr	r2, [pc, #292]	; (800d0a0 <create_name+0x368>)
 800cf7a:	5cd3      	ldrb	r3, [r2, r3]
 800cf7c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800cf7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf82:	f043 0302 	orr.w	r3, r3, #2
 800cf86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cf8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d007      	beq.n	800cfa0 <create_name+0x268>
 800cf90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf92:	4619      	mov	r1, r3
 800cf94:	4843      	ldr	r0, [pc, #268]	; (800d0a4 <create_name+0x36c>)
 800cf96:	f7fe fc85 	bl	800b8a4 <chk_chr>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d008      	beq.n	800cfb2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800cfa0:	235f      	movs	r3, #95	; 0x5f
 800cfa2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cfa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfa8:	f043 0303 	orr.w	r3, r3, #3
 800cfac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cfb0:	e01b      	b.n	800cfea <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800cfb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfb4:	2b40      	cmp	r3, #64	; 0x40
 800cfb6:	d909      	bls.n	800cfcc <create_name+0x294>
 800cfb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfba:	2b5a      	cmp	r3, #90	; 0x5a
 800cfbc:	d806      	bhi.n	800cfcc <create_name+0x294>
					b |= 2;
 800cfbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfc2:	f043 0302 	orr.w	r3, r3, #2
 800cfc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cfca:	e00e      	b.n	800cfea <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800cfcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfce:	2b60      	cmp	r3, #96	; 0x60
 800cfd0:	d90b      	bls.n	800cfea <create_name+0x2b2>
 800cfd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfd4:	2b7a      	cmp	r3, #122	; 0x7a
 800cfd6:	d808      	bhi.n	800cfea <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800cfd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfdc:	f043 0301 	orr.w	r3, r3, #1
 800cfe0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cfe4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cfe6:	3b20      	subs	r3, #32
 800cfe8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800cfea:	6a3b      	ldr	r3, [r7, #32]
 800cfec:	1c5a      	adds	r2, r3, #1
 800cfee:	623a      	str	r2, [r7, #32]
 800cff0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cff2:	b2d1      	uxtb	r1, r2
 800cff4:	687a      	ldr	r2, [r7, #4]
 800cff6:	4413      	add	r3, r2
 800cff8:	460a      	mov	r2, r1
 800cffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800cffe:	e763      	b.n	800cec8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d000:	bf00      	nop
 800d002:	e000      	b.n	800d006 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800d004:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d00c:	2be5      	cmp	r3, #229	; 0xe5
 800d00e:	d103      	bne.n	800d018 <create_name+0x2e0>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2205      	movs	r2, #5
 800d014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d018:	69fb      	ldr	r3, [r7, #28]
 800d01a:	2b08      	cmp	r3, #8
 800d01c:	d104      	bne.n	800d028 <create_name+0x2f0>
 800d01e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d028:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d02c:	f003 030c 	and.w	r3, r3, #12
 800d030:	2b0c      	cmp	r3, #12
 800d032:	d005      	beq.n	800d040 <create_name+0x308>
 800d034:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d038:	f003 0303 	and.w	r3, r3, #3
 800d03c:	2b03      	cmp	r3, #3
 800d03e:	d105      	bne.n	800d04c <create_name+0x314>
 800d040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d044:	f043 0302 	orr.w	r3, r3, #2
 800d048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d04c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d050:	f003 0302 	and.w	r3, r3, #2
 800d054:	2b00      	cmp	r3, #0
 800d056:	d117      	bne.n	800d088 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d058:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d05c:	f003 0303 	and.w	r3, r3, #3
 800d060:	2b01      	cmp	r3, #1
 800d062:	d105      	bne.n	800d070 <create_name+0x338>
 800d064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d068:	f043 0310 	orr.w	r3, r3, #16
 800d06c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d070:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d074:	f003 030c 	and.w	r3, r3, #12
 800d078:	2b04      	cmp	r3, #4
 800d07a:	d105      	bne.n	800d088 <create_name+0x350>
 800d07c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d080:	f043 0308 	orr.w	r3, r3, #8
 800d084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d08e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d092:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d094:	4618      	mov	r0, r3
 800d096:	3728      	adds	r7, #40	; 0x28
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}
 800d09c:	08010cfc 	.word	0x08010cfc
 800d0a0:	08010db4 	.word	0x08010db4
 800d0a4:	08010d08 	.word	0x08010d08

0800d0a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b086      	sub	sp, #24
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d0bc:	e002      	b.n	800d0c4 <follow_path+0x1c>
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	603b      	str	r3, [r7, #0]
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	2b2f      	cmp	r3, #47	; 0x2f
 800d0ca:	d0f8      	beq.n	800d0be <follow_path+0x16>
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	2b5c      	cmp	r3, #92	; 0x5c
 800d0d2:	d0f4      	beq.n	800d0be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	2b1f      	cmp	r3, #31
 800d0e0:	d80a      	bhi.n	800d0f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2280      	movs	r2, #128	; 0x80
 800d0e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d0ea:	2100      	movs	r1, #0
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f7ff f91d 	bl	800c32c <dir_sdi>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	75fb      	strb	r3, [r7, #23]
 800d0f6:	e043      	b.n	800d180 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d0f8:	463b      	mov	r3, r7
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f7ff fe1b 	bl	800cd38 <create_name>
 800d102:	4603      	mov	r3, r0
 800d104:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d106:	7dfb      	ldrb	r3, [r7, #23]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d134      	bne.n	800d176 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f7ff fc5b 	bl	800c9c8 <dir_find>
 800d112:	4603      	mov	r3, r0
 800d114:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d11c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d11e:	7dfb      	ldrb	r3, [r7, #23]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00a      	beq.n	800d13a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d124:	7dfb      	ldrb	r3, [r7, #23]
 800d126:	2b04      	cmp	r3, #4
 800d128:	d127      	bne.n	800d17a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d12a:	7afb      	ldrb	r3, [r7, #11]
 800d12c:	f003 0304 	and.w	r3, r3, #4
 800d130:	2b00      	cmp	r3, #0
 800d132:	d122      	bne.n	800d17a <follow_path+0xd2>
 800d134:	2305      	movs	r3, #5
 800d136:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d138:	e01f      	b.n	800d17a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d13a:	7afb      	ldrb	r3, [r7, #11]
 800d13c:	f003 0304 	and.w	r3, r3, #4
 800d140:	2b00      	cmp	r3, #0
 800d142:	d11c      	bne.n	800d17e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	799b      	ldrb	r3, [r3, #6]
 800d148:	f003 0310 	and.w	r3, r3, #16
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d102      	bne.n	800d156 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d150:	2305      	movs	r3, #5
 800d152:	75fb      	strb	r3, [r7, #23]
 800d154:	e014      	b.n	800d180 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	695b      	ldr	r3, [r3, #20]
 800d160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d164:	4413      	add	r3, r2
 800d166:	4619      	mov	r1, r3
 800d168:	68f8      	ldr	r0, [r7, #12]
 800d16a:	f7ff fa66 	bl	800c63a <ld_clust>
 800d16e:	4602      	mov	r2, r0
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d174:	e7c0      	b.n	800d0f8 <follow_path+0x50>
			if (res != FR_OK) break;
 800d176:	bf00      	nop
 800d178:	e002      	b.n	800d180 <follow_path+0xd8>
				break;
 800d17a:	bf00      	nop
 800d17c:	e000      	b.n	800d180 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d17e:	bf00      	nop
			}
		}
	}

	return res;
 800d180:	7dfb      	ldrb	r3, [r7, #23]
}
 800d182:	4618      	mov	r0, r3
 800d184:	3718      	adds	r7, #24
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}

0800d18a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d18a:	b480      	push	{r7}
 800d18c:	b087      	sub	sp, #28
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d192:	f04f 33ff 	mov.w	r3, #4294967295
 800d196:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d031      	beq.n	800d204 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	617b      	str	r3, [r7, #20]
 800d1a6:	e002      	b.n	800d1ae <get_ldnumber+0x24>
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	617b      	str	r3, [r7, #20]
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	2b1f      	cmp	r3, #31
 800d1b4:	d903      	bls.n	800d1be <get_ldnumber+0x34>
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	2b3a      	cmp	r3, #58	; 0x3a
 800d1bc:	d1f4      	bne.n	800d1a8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	2b3a      	cmp	r3, #58	; 0x3a
 800d1c4:	d11c      	bne.n	800d200 <get_ldnumber+0x76>
			tp = *path;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	1c5a      	adds	r2, r3, #1
 800d1d0:	60fa      	str	r2, [r7, #12]
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	3b30      	subs	r3, #48	; 0x30
 800d1d6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	2b09      	cmp	r3, #9
 800d1dc:	d80e      	bhi.n	800d1fc <get_ldnumber+0x72>
 800d1de:	68fa      	ldr	r2, [r7, #12]
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d10a      	bne.n	800d1fc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d107      	bne.n	800d1fc <get_ldnumber+0x72>
					vol = (int)i;
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	617b      	str	r3, [r7, #20]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	697a      	ldr	r2, [r7, #20]
 800d1fa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	e002      	b.n	800d206 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d200:	2300      	movs	r3, #0
 800d202:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d204:	693b      	ldr	r3, [r7, #16]
}
 800d206:	4618      	mov	r0, r3
 800d208:	371c      	adds	r7, #28
 800d20a:	46bd      	mov	sp, r7
 800d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d210:	4770      	bx	lr
	...

0800d214 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2200      	movs	r2, #0
 800d222:	70da      	strb	r2, [r3, #3]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f04f 32ff 	mov.w	r2, #4294967295
 800d22a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d22c:	6839      	ldr	r1, [r7, #0]
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f7fe fd04 	bl	800bc3c <move_window>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d001      	beq.n	800d23e <check_fs+0x2a>
 800d23a:	2304      	movs	r3, #4
 800d23c:	e038      	b.n	800d2b0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	3334      	adds	r3, #52	; 0x34
 800d242:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d246:	4618      	mov	r0, r3
 800d248:	f7fe fa48 	bl	800b6dc <ld_word>
 800d24c:	4603      	mov	r3, r0
 800d24e:	461a      	mov	r2, r3
 800d250:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d254:	429a      	cmp	r2, r3
 800d256:	d001      	beq.n	800d25c <check_fs+0x48>
 800d258:	2303      	movs	r3, #3
 800d25a:	e029      	b.n	800d2b0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d262:	2be9      	cmp	r3, #233	; 0xe9
 800d264:	d009      	beq.n	800d27a <check_fs+0x66>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d26c:	2beb      	cmp	r3, #235	; 0xeb
 800d26e:	d11e      	bne.n	800d2ae <check_fs+0x9a>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d276:	2b90      	cmp	r3, #144	; 0x90
 800d278:	d119      	bne.n	800d2ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	3334      	adds	r3, #52	; 0x34
 800d27e:	3336      	adds	r3, #54	; 0x36
 800d280:	4618      	mov	r0, r3
 800d282:	f7fe fa43 	bl	800b70c <ld_dword>
 800d286:	4603      	mov	r3, r0
 800d288:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d28c:	4a0a      	ldr	r2, [pc, #40]	; (800d2b8 <check_fs+0xa4>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d101      	bne.n	800d296 <check_fs+0x82>
 800d292:	2300      	movs	r3, #0
 800d294:	e00c      	b.n	800d2b0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	3334      	adds	r3, #52	; 0x34
 800d29a:	3352      	adds	r3, #82	; 0x52
 800d29c:	4618      	mov	r0, r3
 800d29e:	f7fe fa35 	bl	800b70c <ld_dword>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	4b05      	ldr	r3, [pc, #20]	; (800d2bc <check_fs+0xa8>)
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d101      	bne.n	800d2ae <check_fs+0x9a>
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	e000      	b.n	800d2b0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d2ae:	2302      	movs	r3, #2
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3708      	adds	r7, #8
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	00544146 	.word	0x00544146
 800d2bc:	33544146 	.word	0x33544146

0800d2c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b096      	sub	sp, #88	; 0x58
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	4613      	mov	r3, r2
 800d2cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f7ff ff58 	bl	800d18a <get_ldnumber>
 800d2da:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	da01      	bge.n	800d2e6 <find_volume+0x26>
 800d2e2:	230b      	movs	r3, #11
 800d2e4:	e22e      	b.n	800d744 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d2e6:	4aa8      	ldr	r2, [pc, #672]	; (800d588 <find_volume+0x2c8>)
 800d2e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2ee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d101      	bne.n	800d2fa <find_volume+0x3a>
 800d2f6:	230c      	movs	r3, #12
 800d2f8:	e224      	b.n	800d744 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2fe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d300:	79fb      	ldrb	r3, [r7, #7]
 800d302:	f023 0301 	bic.w	r3, r3, #1
 800d306:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d01a      	beq.n	800d346 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d312:	785b      	ldrb	r3, [r3, #1]
 800d314:	4618      	mov	r0, r3
 800d316:	f7fe f943 	bl	800b5a0 <disk_status>
 800d31a:	4603      	mov	r3, r0
 800d31c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d320:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d324:	f003 0301 	and.w	r3, r3, #1
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10c      	bne.n	800d346 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d32c:	79fb      	ldrb	r3, [r7, #7]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d007      	beq.n	800d342 <find_volume+0x82>
 800d332:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d336:	f003 0304 	and.w	r3, r3, #4
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d001      	beq.n	800d342 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d33e:	230a      	movs	r3, #10
 800d340:	e200      	b.n	800d744 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800d342:	2300      	movs	r3, #0
 800d344:	e1fe      	b.n	800d744 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d348:	2200      	movs	r2, #0
 800d34a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d34e:	b2da      	uxtb	r2, r3
 800d350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d352:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d356:	785b      	ldrb	r3, [r3, #1]
 800d358:	4618      	mov	r0, r3
 800d35a:	f7fe f93b 	bl	800b5d4 <disk_initialize>
 800d35e:	4603      	mov	r3, r0
 800d360:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d364:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d368:	f003 0301 	and.w	r3, r3, #1
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d001      	beq.n	800d374 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d370:	2303      	movs	r3, #3
 800d372:	e1e7      	b.n	800d744 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d374:	79fb      	ldrb	r3, [r7, #7]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d007      	beq.n	800d38a <find_volume+0xca>
 800d37a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d37e:	f003 0304 	and.w	r3, r3, #4
 800d382:	2b00      	cmp	r3, #0
 800d384:	d001      	beq.n	800d38a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d386:	230a      	movs	r3, #10
 800d388:	e1dc      	b.n	800d744 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d38a:	2300      	movs	r3, #0
 800d38c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d38e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d390:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d392:	f7ff ff3f 	bl	800d214 <check_fs>
 800d396:	4603      	mov	r3, r0
 800d398:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d39c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d3a0:	2b02      	cmp	r3, #2
 800d3a2:	d14b      	bne.n	800d43c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	643b      	str	r3, [r7, #64]	; 0x40
 800d3a8:	e01f      	b.n	800d3ea <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d3b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3b2:	011b      	lsls	r3, r3, #4
 800d3b4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d3b8:	4413      	add	r3, r2
 800d3ba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3be:	3304      	adds	r3, #4
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d006      	beq.n	800d3d4 <find_volume+0x114>
 800d3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c8:	3308      	adds	r3, #8
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7fe f99e 	bl	800b70c <ld_dword>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	e000      	b.n	800d3d6 <find_volume+0x116>
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3d8:	009b      	lsls	r3, r3, #2
 800d3da:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d3de:	440b      	add	r3, r1
 800d3e0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d3e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	643b      	str	r3, [r7, #64]	; 0x40
 800d3ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3ec:	2b03      	cmp	r3, #3
 800d3ee:	d9dc      	bls.n	800d3aa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d3f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d002      	beq.n	800d400 <find_volume+0x140>
 800d3fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3fc:	3b01      	subs	r3, #1
 800d3fe:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d408:	4413      	add	r3, r2
 800d40a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d40e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d412:	2b00      	cmp	r3, #0
 800d414:	d005      	beq.n	800d422 <find_volume+0x162>
 800d416:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d418:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d41a:	f7ff fefb 	bl	800d214 <check_fs>
 800d41e:	4603      	mov	r3, r0
 800d420:	e000      	b.n	800d424 <find_volume+0x164>
 800d422:	2303      	movs	r3, #3
 800d424:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d428:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d905      	bls.n	800d43c <find_volume+0x17c>
 800d430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d432:	3301      	adds	r3, #1
 800d434:	643b      	str	r3, [r7, #64]	; 0x40
 800d436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d438:	2b03      	cmp	r3, #3
 800d43a:	d9e1      	bls.n	800d400 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d43c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d440:	2b04      	cmp	r3, #4
 800d442:	d101      	bne.n	800d448 <find_volume+0x188>
 800d444:	2301      	movs	r3, #1
 800d446:	e17d      	b.n	800d744 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d448:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d901      	bls.n	800d454 <find_volume+0x194>
 800d450:	230d      	movs	r3, #13
 800d452:	e177      	b.n	800d744 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d456:	3334      	adds	r3, #52	; 0x34
 800d458:	330b      	adds	r3, #11
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7fe f93e 	bl	800b6dc <ld_word>
 800d460:	4603      	mov	r3, r0
 800d462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d466:	d001      	beq.n	800d46c <find_volume+0x1ac>
 800d468:	230d      	movs	r3, #13
 800d46a:	e16b      	b.n	800d744 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46e:	3334      	adds	r3, #52	; 0x34
 800d470:	3316      	adds	r3, #22
 800d472:	4618      	mov	r0, r3
 800d474:	f7fe f932 	bl	800b6dc <ld_word>
 800d478:	4603      	mov	r3, r0
 800d47a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d47c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d106      	bne.n	800d490 <find_volume+0x1d0>
 800d482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d484:	3334      	adds	r3, #52	; 0x34
 800d486:	3324      	adds	r3, #36	; 0x24
 800d488:	4618      	mov	r0, r3
 800d48a:	f7fe f93f 	bl	800b70c <ld_dword>
 800d48e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d492:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d494:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d498:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d49e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a2:	789b      	ldrb	r3, [r3, #2]
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d005      	beq.n	800d4b4 <find_volume+0x1f4>
 800d4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4aa:	789b      	ldrb	r3, [r3, #2]
 800d4ac:	2b02      	cmp	r3, #2
 800d4ae:	d001      	beq.n	800d4b4 <find_volume+0x1f4>
 800d4b0:	230d      	movs	r3, #13
 800d4b2:	e147      	b.n	800d744 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b6:	789b      	ldrb	r3, [r3, #2]
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4bc:	fb02 f303 	mul.w	r3, r2, r3
 800d4c0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4c8:	b29a      	uxth	r2, r3
 800d4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d0:	895b      	ldrh	r3, [r3, #10]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d008      	beq.n	800d4e8 <find_volume+0x228>
 800d4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d8:	895b      	ldrh	r3, [r3, #10]
 800d4da:	461a      	mov	r2, r3
 800d4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4de:	895b      	ldrh	r3, [r3, #10]
 800d4e0:	3b01      	subs	r3, #1
 800d4e2:	4013      	ands	r3, r2
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d001      	beq.n	800d4ec <find_volume+0x22c>
 800d4e8:	230d      	movs	r3, #13
 800d4ea:	e12b      	b.n	800d744 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ee:	3334      	adds	r3, #52	; 0x34
 800d4f0:	3311      	adds	r3, #17
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7fe f8f2 	bl	800b6dc <ld_word>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d502:	891b      	ldrh	r3, [r3, #8]
 800d504:	f003 030f 	and.w	r3, r3, #15
 800d508:	b29b      	uxth	r3, r3
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d001      	beq.n	800d512 <find_volume+0x252>
 800d50e:	230d      	movs	r3, #13
 800d510:	e118      	b.n	800d744 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d514:	3334      	adds	r3, #52	; 0x34
 800d516:	3313      	adds	r3, #19
 800d518:	4618      	mov	r0, r3
 800d51a:	f7fe f8df 	bl	800b6dc <ld_word>
 800d51e:	4603      	mov	r3, r0
 800d520:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d524:	2b00      	cmp	r3, #0
 800d526:	d106      	bne.n	800d536 <find_volume+0x276>
 800d528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d52a:	3334      	adds	r3, #52	; 0x34
 800d52c:	3320      	adds	r3, #32
 800d52e:	4618      	mov	r0, r3
 800d530:	f7fe f8ec 	bl	800b70c <ld_dword>
 800d534:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d538:	3334      	adds	r3, #52	; 0x34
 800d53a:	330e      	adds	r3, #14
 800d53c:	4618      	mov	r0, r3
 800d53e:	f7fe f8cd 	bl	800b6dc <ld_word>
 800d542:	4603      	mov	r3, r0
 800d544:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d546:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d101      	bne.n	800d550 <find_volume+0x290>
 800d54c:	230d      	movs	r3, #13
 800d54e:	e0f9      	b.n	800d744 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d550:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d554:	4413      	add	r3, r2
 800d556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d558:	8912      	ldrh	r2, [r2, #8]
 800d55a:	0912      	lsrs	r2, r2, #4
 800d55c:	b292      	uxth	r2, r2
 800d55e:	4413      	add	r3, r2
 800d560:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d566:	429a      	cmp	r2, r3
 800d568:	d201      	bcs.n	800d56e <find_volume+0x2ae>
 800d56a:	230d      	movs	r3, #13
 800d56c:	e0ea      	b.n	800d744 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d56e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d572:	1ad3      	subs	r3, r2, r3
 800d574:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d576:	8952      	ldrh	r2, [r2, #10]
 800d578:	fbb3 f3f2 	udiv	r3, r3, r2
 800d57c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d580:	2b00      	cmp	r3, #0
 800d582:	d103      	bne.n	800d58c <find_volume+0x2cc>
 800d584:	230d      	movs	r3, #13
 800d586:	e0dd      	b.n	800d744 <find_volume+0x484>
 800d588:	20000484 	.word	0x20000484
		fmt = FS_FAT32;
 800d58c:	2303      	movs	r3, #3
 800d58e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d594:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d598:	4293      	cmp	r3, r2
 800d59a:	d802      	bhi.n	800d5a2 <find_volume+0x2e2>
 800d59c:	2302      	movs	r3, #2
 800d59e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d802      	bhi.n	800d5b2 <find_volume+0x2f2>
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b4:	1c9a      	adds	r2, r3, #2
 800d5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d5be:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d5c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d5c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5c4:	441a      	add	r2, r3
 800d5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d5ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ce:	441a      	add	r2, r3
 800d5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800d5d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d5d8:	2b03      	cmp	r3, #3
 800d5da:	d11e      	bne.n	800d61a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5de:	3334      	adds	r3, #52	; 0x34
 800d5e0:	332a      	adds	r3, #42	; 0x2a
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7fe f87a 	bl	800b6dc <ld_word>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d001      	beq.n	800d5f2 <find_volume+0x332>
 800d5ee:	230d      	movs	r3, #13
 800d5f0:	e0a8      	b.n	800d744 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f4:	891b      	ldrh	r3, [r3, #8]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d001      	beq.n	800d5fe <find_volume+0x33e>
 800d5fa:	230d      	movs	r3, #13
 800d5fc:	e0a2      	b.n	800d744 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d600:	3334      	adds	r3, #52	; 0x34
 800d602:	332c      	adds	r3, #44	; 0x2c
 800d604:	4618      	mov	r0, r3
 800d606:	f7fe f881 	bl	800b70c <ld_dword>
 800d60a:	4602      	mov	r2, r0
 800d60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d612:	699b      	ldr	r3, [r3, #24]
 800d614:	009b      	lsls	r3, r3, #2
 800d616:	647b      	str	r3, [r7, #68]	; 0x44
 800d618:	e01f      	b.n	800d65a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61c:	891b      	ldrh	r3, [r3, #8]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d101      	bne.n	800d626 <find_volume+0x366>
 800d622:	230d      	movs	r3, #13
 800d624:	e08e      	b.n	800d744 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d62a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d62c:	441a      	add	r2, r3
 800d62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d630:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d632:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d636:	2b02      	cmp	r3, #2
 800d638:	d103      	bne.n	800d642 <find_volume+0x382>
 800d63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63c:	699b      	ldr	r3, [r3, #24]
 800d63e:	005b      	lsls	r3, r3, #1
 800d640:	e00a      	b.n	800d658 <find_volume+0x398>
 800d642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d644:	699a      	ldr	r2, [r3, #24]
 800d646:	4613      	mov	r3, r2
 800d648:	005b      	lsls	r3, r3, #1
 800d64a:	4413      	add	r3, r2
 800d64c:	085a      	lsrs	r2, r3, #1
 800d64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d650:	699b      	ldr	r3, [r3, #24]
 800d652:	f003 0301 	and.w	r3, r3, #1
 800d656:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d658:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65c:	69da      	ldr	r2, [r3, #28]
 800d65e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d660:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d664:	0a5b      	lsrs	r3, r3, #9
 800d666:	429a      	cmp	r2, r3
 800d668:	d201      	bcs.n	800d66e <find_volume+0x3ae>
 800d66a:	230d      	movs	r3, #13
 800d66c:	e06a      	b.n	800d744 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d670:	f04f 32ff 	mov.w	r2, #4294967295
 800d674:	615a      	str	r2, [r3, #20]
 800d676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d678:	695a      	ldr	r2, [r3, #20]
 800d67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d680:	2280      	movs	r2, #128	; 0x80
 800d682:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d684:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d688:	2b03      	cmp	r3, #3
 800d68a:	d149      	bne.n	800d720 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68e:	3334      	adds	r3, #52	; 0x34
 800d690:	3330      	adds	r3, #48	; 0x30
 800d692:	4618      	mov	r0, r3
 800d694:	f7fe f822 	bl	800b6dc <ld_word>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d140      	bne.n	800d720 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d69e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d6a6:	f7fe fac9 	bl	800bc3c <move_window>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d137      	bne.n	800d720 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800d6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b8:	3334      	adds	r3, #52	; 0x34
 800d6ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7fe f80c 	bl	800b6dc <ld_word>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d127      	bne.n	800d720 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d2:	3334      	adds	r3, #52	; 0x34
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7fe f819 	bl	800b70c <ld_dword>
 800d6da:	4602      	mov	r2, r0
 800d6dc:	4b1b      	ldr	r3, [pc, #108]	; (800d74c <find_volume+0x48c>)
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d11e      	bne.n	800d720 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e4:	3334      	adds	r3, #52	; 0x34
 800d6e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7fe f80e 	bl	800b70c <ld_dword>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	4b17      	ldr	r3, [pc, #92]	; (800d750 <find_volume+0x490>)
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	d113      	bne.n	800d720 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fa:	3334      	adds	r3, #52	; 0x34
 800d6fc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d700:	4618      	mov	r0, r3
 800d702:	f7fe f803 	bl	800b70c <ld_dword>
 800d706:	4602      	mov	r2, r0
 800d708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d70a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d70e:	3334      	adds	r3, #52	; 0x34
 800d710:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d714:	4618      	mov	r0, r3
 800d716:	f7fd fff9 	bl	800b70c <ld_dword>
 800d71a:	4602      	mov	r2, r0
 800d71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d71e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d722:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d726:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d728:	4b0a      	ldr	r3, [pc, #40]	; (800d754 <find_volume+0x494>)
 800d72a:	881b      	ldrh	r3, [r3, #0]
 800d72c:	3301      	adds	r3, #1
 800d72e:	b29a      	uxth	r2, r3
 800d730:	4b08      	ldr	r3, [pc, #32]	; (800d754 <find_volume+0x494>)
 800d732:	801a      	strh	r2, [r3, #0]
 800d734:	4b07      	ldr	r3, [pc, #28]	; (800d754 <find_volume+0x494>)
 800d736:	881a      	ldrh	r2, [r3, #0]
 800d738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d73c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d73e:	f7fe fa15 	bl	800bb6c <clear_lock>
#endif
	return FR_OK;
 800d742:	2300      	movs	r3, #0
}
 800d744:	4618      	mov	r0, r3
 800d746:	3758      	adds	r7, #88	; 0x58
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	41615252 	.word	0x41615252
 800d750:	61417272 	.word	0x61417272
 800d754:	20000488 	.word	0x20000488

0800d758 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d762:	2309      	movs	r3, #9
 800d764:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d01c      	beq.n	800d7a6 <validate+0x4e>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d018      	beq.n	800d7a6 <validate+0x4e>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d013      	beq.n	800d7a6 <validate+0x4e>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	889a      	ldrh	r2, [r3, #4]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	88db      	ldrh	r3, [r3, #6]
 800d788:	429a      	cmp	r2, r3
 800d78a:	d10c      	bne.n	800d7a6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	785b      	ldrb	r3, [r3, #1]
 800d792:	4618      	mov	r0, r3
 800d794:	f7fd ff04 	bl	800b5a0 <disk_status>
 800d798:	4603      	mov	r3, r0
 800d79a:	f003 0301 	and.w	r3, r3, #1
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d101      	bne.n	800d7a6 <validate+0x4e>
			res = FR_OK;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d7a6:	7bfb      	ldrb	r3, [r7, #15]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d102      	bne.n	800d7b2 <validate+0x5a>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	e000      	b.n	800d7b4 <validate+0x5c>
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	683a      	ldr	r2, [r7, #0]
 800d7b6:	6013      	str	r3, [r2, #0]
	return res;
 800d7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3710      	adds	r7, #16
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
	...

0800d7c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b088      	sub	sp, #32
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d7d6:	f107 0310 	add.w	r3, r7, #16
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7ff fcd5 	bl	800d18a <get_ldnumber>
 800d7e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d7e2:	69fb      	ldr	r3, [r7, #28]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	da01      	bge.n	800d7ec <f_mount+0x28>
 800d7e8:	230b      	movs	r3, #11
 800d7ea:	e02b      	b.n	800d844 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d7ec:	4a17      	ldr	r2, [pc, #92]	; (800d84c <f_mount+0x88>)
 800d7ee:	69fb      	ldr	r3, [r7, #28]
 800d7f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d7f6:	69bb      	ldr	r3, [r7, #24]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d005      	beq.n	800d808 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d7fc:	69b8      	ldr	r0, [r7, #24]
 800d7fe:	f7fe f9b5 	bl	800bb6c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d802:	69bb      	ldr	r3, [r7, #24]
 800d804:	2200      	movs	r2, #0
 800d806:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d002      	beq.n	800d814 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	2200      	movs	r2, #0
 800d812:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d814:	68fa      	ldr	r2, [r7, #12]
 800d816:	490d      	ldr	r1, [pc, #52]	; (800d84c <f_mount+0x88>)
 800d818:	69fb      	ldr	r3, [r7, #28]
 800d81a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d002      	beq.n	800d82a <f_mount+0x66>
 800d824:	79fb      	ldrb	r3, [r7, #7]
 800d826:	2b01      	cmp	r3, #1
 800d828:	d001      	beq.n	800d82e <f_mount+0x6a>
 800d82a:	2300      	movs	r3, #0
 800d82c:	e00a      	b.n	800d844 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d82e:	f107 010c 	add.w	r1, r7, #12
 800d832:	f107 0308 	add.w	r3, r7, #8
 800d836:	2200      	movs	r2, #0
 800d838:	4618      	mov	r0, r3
 800d83a:	f7ff fd41 	bl	800d2c0 <find_volume>
 800d83e:	4603      	mov	r3, r0
 800d840:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d842:	7dfb      	ldrb	r3, [r7, #23]
}
 800d844:	4618      	mov	r0, r3
 800d846:	3720      	adds	r7, #32
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	20000484 	.word	0x20000484

0800d850 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b09a      	sub	sp, #104	; 0x68
 800d854:	af00      	add	r7, sp, #0
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	4613      	mov	r3, r2
 800d85c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d101      	bne.n	800d868 <f_open+0x18>
 800d864:	2309      	movs	r3, #9
 800d866:	e1bd      	b.n	800dbe4 <f_open+0x394>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d868:	79fb      	ldrb	r3, [r7, #7]
 800d86a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d86e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d870:	79fa      	ldrb	r2, [r7, #7]
 800d872:	f107 0110 	add.w	r1, r7, #16
 800d876:	f107 0308 	add.w	r3, r7, #8
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7ff fd20 	bl	800d2c0 <find_volume>
 800d880:	4603      	mov	r3, r0
 800d882:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d886:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	f040 81a1 	bne.w	800dbd2 <f_open+0x382>
		dj.obj.fs = fs;
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800d894:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d898:	f000 ff80 	bl	800e79c <ff_memalloc>
 800d89c:	65b8      	str	r0, [r7, #88]	; 0x58
 800d89e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d101      	bne.n	800d8a8 <f_open+0x58>
 800d8a4:	2311      	movs	r3, #17
 800d8a6:	e19d      	b.n	800dbe4 <f_open+0x394>
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d8ac:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d8ae:	68ba      	ldr	r2, [r7, #8]
 800d8b0:	f107 0314 	add.w	r3, r7, #20
 800d8b4:	4611      	mov	r1, r2
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7ff fbf6 	bl	800d0a8 <follow_path>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d8c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d11a      	bne.n	800d900 <f_open+0xb0>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d8ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d8ce:	b25b      	sxtb	r3, r3
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	da03      	bge.n	800d8dc <f_open+0x8c>
				res = FR_INVALID_NAME;
 800d8d4:	2306      	movs	r3, #6
 800d8d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d8da:	e011      	b.n	800d900 <f_open+0xb0>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d8dc:	79fb      	ldrb	r3, [r7, #7]
 800d8de:	f023 0301 	bic.w	r3, r3, #1
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	bf14      	ite	ne
 800d8e6:	2301      	movne	r3, #1
 800d8e8:	2300      	moveq	r3, #0
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	f107 0314 	add.w	r3, r7, #20
 800d8f2:	4611      	mov	r1, r2
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7fd fff1 	bl	800b8dc <chk_lock>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d900:	79fb      	ldrb	r3, [r7, #7]
 800d902:	f003 031c 	and.w	r3, r3, #28
 800d906:	2b00      	cmp	r3, #0
 800d908:	d07f      	beq.n	800da0a <f_open+0x1ba>
			if (res != FR_OK) {					/* No file, create new */
 800d90a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d017      	beq.n	800d942 <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d912:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d916:	2b04      	cmp	r3, #4
 800d918:	d10e      	bne.n	800d938 <f_open+0xe8>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d91a:	f7fe f83b 	bl	800b994 <enq_lock>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d006      	beq.n	800d932 <f_open+0xe2>
 800d924:	f107 0314 	add.w	r3, r7, #20
 800d928:	4618      	mov	r0, r3
 800d92a:	f7ff f90d 	bl	800cb48 <dir_register>
 800d92e:	4603      	mov	r3, r0
 800d930:	e000      	b.n	800d934 <f_open+0xe4>
 800d932:	2312      	movs	r3, #18
 800d934:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d938:	79fb      	ldrb	r3, [r7, #7]
 800d93a:	f043 0308 	orr.w	r3, r3, #8
 800d93e:	71fb      	strb	r3, [r7, #7]
 800d940:	e010      	b.n	800d964 <f_open+0x114>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d942:	7ebb      	ldrb	r3, [r7, #26]
 800d944:	f003 0311 	and.w	r3, r3, #17
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d003      	beq.n	800d954 <f_open+0x104>
					res = FR_DENIED;
 800d94c:	2307      	movs	r3, #7
 800d94e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d952:	e007      	b.n	800d964 <f_open+0x114>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d954:	79fb      	ldrb	r3, [r7, #7]
 800d956:	f003 0304 	and.w	r3, r3, #4
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d002      	beq.n	800d964 <f_open+0x114>
 800d95e:	2308      	movs	r3, #8
 800d960:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d964:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d168      	bne.n	800da3e <f_open+0x1ee>
 800d96c:	79fb      	ldrb	r3, [r7, #7]
 800d96e:	f003 0308 	and.w	r3, r3, #8
 800d972:	2b00      	cmp	r3, #0
 800d974:	d063      	beq.n	800da3e <f_open+0x1ee>
				dw = GET_FATTIME();
 800d976:	f7fa fe71 	bl	800865c <get_fattime>
 800d97a:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d97e:	330e      	adds	r3, #14
 800d980:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d982:	4618      	mov	r0, r3
 800d984:	f7fd ff00 	bl	800b788 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d98a:	3316      	adds	r3, #22
 800d98c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d98e:	4618      	mov	r0, r3
 800d990:	f7fd fefa 	bl	800b788 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d996:	330b      	adds	r3, #11
 800d998:	2220      	movs	r2, #32
 800d99a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9a0:	4611      	mov	r1, r2
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7fe fe49 	bl	800c63a <ld_clust>
 800d9a8:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7fe fe61 	bl	800c678 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9b8:	331c      	adds	r3, #28
 800d9ba:	2100      	movs	r1, #0
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7fd fee3 	bl	800b788 <st_dword>
					fs->wflag = 1;
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d9c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d037      	beq.n	800da3e <f_open+0x1ee>
						dw = fs->winsect;
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9d2:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800d9d4:	f107 0314 	add.w	r3, r7, #20
 800d9d8:	2200      	movs	r2, #0
 800d9da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7fe fb74 	bl	800c0ca <remove_chain>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d9e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d126      	bne.n	800da3e <f_open+0x1ee>
							res = move_window(fs, dw);
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7fe f921 	bl	800bc3c <move_window>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da04:	3a01      	subs	r2, #1
 800da06:	611a      	str	r2, [r3, #16]
 800da08:	e019      	b.n	800da3e <f_open+0x1ee>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800da0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d115      	bne.n	800da3e <f_open+0x1ee>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800da12:	7ebb      	ldrb	r3, [r7, #26]
 800da14:	f003 0310 	and.w	r3, r3, #16
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d003      	beq.n	800da24 <f_open+0x1d4>
					res = FR_NO_FILE;
 800da1c:	2304      	movs	r3, #4
 800da1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800da22:	e00c      	b.n	800da3e <f_open+0x1ee>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800da24:	79fb      	ldrb	r3, [r7, #7]
 800da26:	f003 0302 	and.w	r3, r3, #2
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d007      	beq.n	800da3e <f_open+0x1ee>
 800da2e:	7ebb      	ldrb	r3, [r7, #26]
 800da30:	f003 0301 	and.w	r3, r3, #1
 800da34:	2b00      	cmp	r3, #0
 800da36:	d002      	beq.n	800da3e <f_open+0x1ee>
						res = FR_DENIED;
 800da38:	2307      	movs	r3, #7
 800da3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800da3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da42:	2b00      	cmp	r3, #0
 800da44:	d128      	bne.n	800da98 <f_open+0x248>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800da46:	79fb      	ldrb	r3, [r7, #7]
 800da48:	f003 0308 	and.w	r3, r3, #8
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d003      	beq.n	800da58 <f_open+0x208>
				mode |= FA_MODIFIED;
 800da50:	79fb      	ldrb	r3, [r7, #7]
 800da52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da56:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800da60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800da66:	79fb      	ldrb	r3, [r7, #7]
 800da68:	f023 0301 	bic.w	r3, r3, #1
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	bf14      	ite	ne
 800da70:	2301      	movne	r3, #1
 800da72:	2300      	moveq	r3, #0
 800da74:	b2db      	uxtb	r3, r3
 800da76:	461a      	mov	r2, r3
 800da78:	f107 0314 	add.w	r3, r7, #20
 800da7c:	4611      	mov	r1, r2
 800da7e:	4618      	mov	r0, r3
 800da80:	f7fd ffaa 	bl	800b9d8 <inc_lock>
 800da84:	4602      	mov	r2, r0
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	691b      	ldr	r3, [r3, #16]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d102      	bne.n	800da98 <f_open+0x248>
 800da92:	2302      	movs	r3, #2
 800da94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800da98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	f040 8095 	bne.w	800dbcc <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800daa6:	4611      	mov	r1, r2
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7fe fdc6 	bl	800c63a <ld_clust>
 800daae:	4602      	mov	r2, r0
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dab6:	331c      	adds	r3, #28
 800dab8:	4618      	mov	r0, r3
 800daba:	f7fd fe27 	bl	800b70c <ld_dword>
 800dabe:	4602      	mov	r2, r0
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2200      	movs	r2, #0
 800dac8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800daca:	693a      	ldr	r2, [r7, #16]
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	88da      	ldrh	r2, [r3, #6]
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	79fa      	ldrb	r2, [r7, #7]
 800dadc:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2200      	movs	r2, #0
 800dae2:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2200      	movs	r2, #0
 800dae8:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	2200      	movs	r2, #0
 800daee:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	3330      	adds	r3, #48	; 0x30
 800daf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800daf8:	2100      	movs	r1, #0
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fd fe91 	bl	800b822 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800db00:	79fb      	ldrb	r3, [r7, #7]
 800db02:	f003 0320 	and.w	r3, r3, #32
 800db06:	2b00      	cmp	r3, #0
 800db08:	d060      	beq.n	800dbcc <f_open+0x37c>
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	68db      	ldr	r3, [r3, #12]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d05c      	beq.n	800dbcc <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	68da      	ldr	r2, [r3, #12]
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	895b      	ldrh	r3, [r3, #10]
 800db1e:	025b      	lsls	r3, r3, #9
 800db20:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	689b      	ldr	r3, [r3, #8]
 800db26:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	68db      	ldr	r3, [r3, #12]
 800db2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800db2e:	e016      	b.n	800db5e <f_open+0x30e>
					clst = get_fat(&fp->obj, clst);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800db34:	4618      	mov	r0, r3
 800db36:	f7fe f93c 	bl	800bdb2 <get_fat>
 800db3a:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800db3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d802      	bhi.n	800db48 <f_open+0x2f8>
 800db42:	2302      	movs	r3, #2
 800db44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800db48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db4e:	d102      	bne.n	800db56 <f_open+0x306>
 800db50:	2301      	movs	r3, #1
 800db52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800db56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800db58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db5a:	1ad3      	subs	r3, r2, r3
 800db5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800db5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800db62:	2b00      	cmp	r3, #0
 800db64:	d103      	bne.n	800db6e <f_open+0x31e>
 800db66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800db68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d8e0      	bhi.n	800db30 <f_open+0x2e0>
				}
				fp->clust = clst;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800db72:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800db74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d127      	bne.n	800dbcc <f_open+0x37c>
 800db7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db82:	2b00      	cmp	r3, #0
 800db84:	d022      	beq.n	800dbcc <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7fe f8f2 	bl	800bd74 <clust2sect>
 800db90:	64b8      	str	r0, [r7, #72]	; 0x48
 800db92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db94:	2b00      	cmp	r3, #0
 800db96:	d103      	bne.n	800dba0 <f_open+0x350>
						res = FR_INT_ERR;
 800db98:	2302      	movs	r3, #2
 800db9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800db9e:	e015      	b.n	800dbcc <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dba2:	0a5a      	lsrs	r2, r3, #9
 800dba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dba6:	441a      	add	r2, r3
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	7858      	ldrb	r0, [r3, #1]
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	6a1a      	ldr	r2, [r3, #32]
 800dbba:	2301      	movs	r3, #1
 800dbbc:	f7fd fd30 	bl	800b620 <disk_read>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d002      	beq.n	800dbcc <f_open+0x37c>
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800dbcc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800dbce:	f000 fdf1 	bl	800e7b4 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dbd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d002      	beq.n	800dbe0 <f_open+0x390>
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800dbe0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3768      	adds	r7, #104	; 0x68
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b08c      	sub	sp, #48	; 0x30
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	60f8      	str	r0, [r7, #12]
 800dbf4:	60b9      	str	r1, [r7, #8]
 800dbf6:	607a      	str	r2, [r7, #4]
 800dbf8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	2200      	movs	r2, #0
 800dc02:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	f107 0210 	add.w	r2, r7, #16
 800dc0a:	4611      	mov	r1, r2
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7ff fda3 	bl	800d758 <validate>
 800dc12:	4603      	mov	r3, r0
 800dc14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dc18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d107      	bne.n	800dc30 <f_write+0x44>
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	7d5b      	ldrb	r3, [r3, #21]
 800dc24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800dc28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d002      	beq.n	800dc36 <f_write+0x4a>
 800dc30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc34:	e14b      	b.n	800dece <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	7d1b      	ldrb	r3, [r3, #20]
 800dc3a:	f003 0302 	and.w	r3, r3, #2
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d101      	bne.n	800dc46 <f_write+0x5a>
 800dc42:	2307      	movs	r3, #7
 800dc44:	e143      	b.n	800dece <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	699a      	ldr	r2, [r3, #24]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	441a      	add	r2, r3
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	699b      	ldr	r3, [r3, #24]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	f080 812d 	bcs.w	800deb2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	699b      	ldr	r3, [r3, #24]
 800dc5c:	43db      	mvns	r3, r3
 800dc5e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800dc60:	e127      	b.n	800deb2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	699b      	ldr	r3, [r3, #24]
 800dc66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	f040 80e3 	bne.w	800de36 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	699b      	ldr	r3, [r3, #24]
 800dc74:	0a5b      	lsrs	r3, r3, #9
 800dc76:	693a      	ldr	r2, [r7, #16]
 800dc78:	8952      	ldrh	r2, [r2, #10]
 800dc7a:	3a01      	subs	r2, #1
 800dc7c:	4013      	ands	r3, r2
 800dc7e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800dc80:	69bb      	ldr	r3, [r7, #24]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d143      	bne.n	800dd0e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	699b      	ldr	r3, [r3, #24]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d10c      	bne.n	800dca8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	689b      	ldr	r3, [r3, #8]
 800dc92:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800dc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d11a      	bne.n	800dcd0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2100      	movs	r1, #0
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7fe fa78 	bl	800c194 <create_chain>
 800dca4:	62b8      	str	r0, [r7, #40]	; 0x28
 800dca6:	e013      	b.n	800dcd0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d007      	beq.n	800dcc0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	699b      	ldr	r3, [r3, #24]
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	68f8      	ldr	r0, [r7, #12]
 800dcb8:	f7fe fb04 	bl	800c2c4 <clmt_clust>
 800dcbc:	62b8      	str	r0, [r7, #40]	; 0x28
 800dcbe:	e007      	b.n	800dcd0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800dcc0:	68fa      	ldr	r2, [r7, #12]
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	69db      	ldr	r3, [r3, #28]
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	4610      	mov	r0, r2
 800dcca:	f7fe fa63 	bl	800c194 <create_chain>
 800dcce:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	f000 80f2 	beq.w	800debc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcda:	2b01      	cmp	r3, #1
 800dcdc:	d104      	bne.n	800dce8 <f_write+0xfc>
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2202      	movs	r2, #2
 800dce2:	755a      	strb	r2, [r3, #21]
 800dce4:	2302      	movs	r3, #2
 800dce6:	e0f2      	b.n	800dece <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcee:	d104      	bne.n	800dcfa <f_write+0x10e>
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	755a      	strb	r2, [r3, #21]
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	e0e9      	b.n	800dece <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcfe:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	689b      	ldr	r3, [r3, #8]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d102      	bne.n	800dd0e <f_write+0x122>
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd0c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	7d1b      	ldrb	r3, [r3, #20]
 800dd12:	b25b      	sxtb	r3, r3
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	da18      	bge.n	800dd4a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	7858      	ldrb	r0, [r3, #1]
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	6a1a      	ldr	r2, [r3, #32]
 800dd26:	2301      	movs	r3, #1
 800dd28:	f7fd fc9a 	bl	800b660 <disk_write>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d004      	beq.n	800dd3c <f_write+0x150>
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2201      	movs	r2, #1
 800dd36:	755a      	strb	r2, [r3, #21]
 800dd38:	2301      	movs	r3, #1
 800dd3a:	e0c8      	b.n	800dece <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	7d1b      	ldrb	r3, [r3, #20]
 800dd40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd44:	b2da      	uxtb	r2, r3
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dd4a:	693a      	ldr	r2, [r7, #16]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	69db      	ldr	r3, [r3, #28]
 800dd50:	4619      	mov	r1, r3
 800dd52:	4610      	mov	r0, r2
 800dd54:	f7fe f80e 	bl	800bd74 <clust2sect>
 800dd58:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d104      	bne.n	800dd6a <f_write+0x17e>
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2202      	movs	r2, #2
 800dd64:	755a      	strb	r2, [r3, #21]
 800dd66:	2302      	movs	r3, #2
 800dd68:	e0b1      	b.n	800dece <f_write+0x2e2>
			sect += csect;
 800dd6a:	697a      	ldr	r2, [r7, #20]
 800dd6c:	69bb      	ldr	r3, [r7, #24]
 800dd6e:	4413      	add	r3, r2
 800dd70:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	0a5b      	lsrs	r3, r3, #9
 800dd76:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800dd78:	6a3b      	ldr	r3, [r7, #32]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d03c      	beq.n	800ddf8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dd7e:	69ba      	ldr	r2, [r7, #24]
 800dd80:	6a3b      	ldr	r3, [r7, #32]
 800dd82:	4413      	add	r3, r2
 800dd84:	693a      	ldr	r2, [r7, #16]
 800dd86:	8952      	ldrh	r2, [r2, #10]
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d905      	bls.n	800dd98 <f_write+0x1ac>
					cc = fs->csize - csect;
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	895b      	ldrh	r3, [r3, #10]
 800dd90:	461a      	mov	r2, r3
 800dd92:	69bb      	ldr	r3, [r7, #24]
 800dd94:	1ad3      	subs	r3, r2, r3
 800dd96:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	7858      	ldrb	r0, [r3, #1]
 800dd9c:	6a3b      	ldr	r3, [r7, #32]
 800dd9e:	697a      	ldr	r2, [r7, #20]
 800dda0:	69f9      	ldr	r1, [r7, #28]
 800dda2:	f7fd fc5d 	bl	800b660 <disk_write>
 800dda6:	4603      	mov	r3, r0
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d004      	beq.n	800ddb6 <f_write+0x1ca>
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	2201      	movs	r2, #1
 800ddb0:	755a      	strb	r2, [r3, #21]
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	e08b      	b.n	800dece <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	6a1a      	ldr	r2, [r3, #32]
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	1ad3      	subs	r3, r2, r3
 800ddbe:	6a3a      	ldr	r2, [r7, #32]
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d915      	bls.n	800ddf0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	6a1a      	ldr	r2, [r3, #32]
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	1ad3      	subs	r3, r2, r3
 800ddd2:	025b      	lsls	r3, r3, #9
 800ddd4:	69fa      	ldr	r2, [r7, #28]
 800ddd6:	4413      	add	r3, r2
 800ddd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dddc:	4619      	mov	r1, r3
 800ddde:	f7fd fcff 	bl	800b7e0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	7d1b      	ldrb	r3, [r3, #20]
 800dde6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddea:	b2da      	uxtb	r2, r3
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ddf0:	6a3b      	ldr	r3, [r7, #32]
 800ddf2:	025b      	lsls	r3, r3, #9
 800ddf4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ddf6:	e03f      	b.n	800de78 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	6a1b      	ldr	r3, [r3, #32]
 800ddfc:	697a      	ldr	r2, [r7, #20]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d016      	beq.n	800de30 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	699a      	ldr	r2, [r3, #24]
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d210      	bcs.n	800de30 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	7858      	ldrb	r0, [r3, #1]
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800de18:	2301      	movs	r3, #1
 800de1a:	697a      	ldr	r2, [r7, #20]
 800de1c:	f7fd fc00 	bl	800b620 <disk_read>
 800de20:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800de22:	2b00      	cmp	r3, #0
 800de24:	d004      	beq.n	800de30 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	2201      	movs	r2, #1
 800de2a:	755a      	strb	r2, [r3, #21]
 800de2c:	2301      	movs	r3, #1
 800de2e:	e04e      	b.n	800dece <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	697a      	ldr	r2, [r7, #20]
 800de34:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	699b      	ldr	r3, [r3, #24]
 800de3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de3e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800de42:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800de44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	429a      	cmp	r2, r3
 800de4a:	d901      	bls.n	800de50 <f_write+0x264>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	699b      	ldr	r3, [r3, #24]
 800de5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de5e:	4413      	add	r3, r2
 800de60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de62:	69f9      	ldr	r1, [r7, #28]
 800de64:	4618      	mov	r0, r3
 800de66:	f7fd fcbb 	bl	800b7e0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	7d1b      	ldrb	r3, [r3, #20]
 800de6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800de72:	b2da      	uxtb	r2, r3
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800de78:	69fa      	ldr	r2, [r7, #28]
 800de7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7c:	4413      	add	r3, r2
 800de7e:	61fb      	str	r3, [r7, #28]
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	699a      	ldr	r2, [r3, #24]
 800de84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de86:	441a      	add	r2, r3
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	619a      	str	r2, [r3, #24]
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	68da      	ldr	r2, [r3, #12]
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	699b      	ldr	r3, [r3, #24]
 800de94:	429a      	cmp	r2, r3
 800de96:	bf38      	it	cc
 800de98:	461a      	movcc	r2, r3
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	60da      	str	r2, [r3, #12]
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea4:	441a      	add	r2, r3
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	601a      	str	r2, [r3, #0]
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deae:	1ad3      	subs	r3, r2, r3
 800deb0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	f47f aed4 	bne.w	800dc62 <f_write+0x76>
 800deba:	e000      	b.n	800debe <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800debc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	7d1b      	ldrb	r3, [r3, #20]
 800dec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dec6:	b2da      	uxtb	r2, r3
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3730      	adds	r7, #48	; 0x30
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}

0800ded6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ded6:	b580      	push	{r7, lr}
 800ded8:	b086      	sub	sp, #24
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f107 0208 	add.w	r2, r7, #8
 800dee4:	4611      	mov	r1, r2
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7ff fc36 	bl	800d758 <validate>
 800deec:	4603      	mov	r3, r0
 800deee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800def0:	7dfb      	ldrb	r3, [r7, #23]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d168      	bne.n	800dfc8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	7d1b      	ldrb	r3, [r3, #20]
 800defa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800defe:	2b00      	cmp	r3, #0
 800df00:	d062      	beq.n	800dfc8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	7d1b      	ldrb	r3, [r3, #20]
 800df06:	b25b      	sxtb	r3, r3
 800df08:	2b00      	cmp	r3, #0
 800df0a:	da15      	bge.n	800df38 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	7858      	ldrb	r0, [r3, #1]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6a1a      	ldr	r2, [r3, #32]
 800df1a:	2301      	movs	r3, #1
 800df1c:	f7fd fba0 	bl	800b660 <disk_write>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	d001      	beq.n	800df2a <f_sync+0x54>
 800df26:	2301      	movs	r3, #1
 800df28:	e04f      	b.n	800dfca <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	7d1b      	ldrb	r3, [r3, #20]
 800df2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df32:	b2da      	uxtb	r2, r3
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800df38:	f7fa fb90 	bl	800865c <get_fattime>
 800df3c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800df3e:	68ba      	ldr	r2, [r7, #8]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df44:	4619      	mov	r1, r3
 800df46:	4610      	mov	r0, r2
 800df48:	f7fd fe78 	bl	800bc3c <move_window>
 800df4c:	4603      	mov	r3, r0
 800df4e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800df50:	7dfb      	ldrb	r3, [r7, #23]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d138      	bne.n	800dfc8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df5a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	330b      	adds	r3, #11
 800df60:	781a      	ldrb	r2, [r3, #0]
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	330b      	adds	r3, #11
 800df66:	f042 0220 	orr.w	r2, r2, #32
 800df6a:	b2d2      	uxtb	r2, r2
 800df6c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6818      	ldr	r0, [r3, #0]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	689b      	ldr	r3, [r3, #8]
 800df76:	461a      	mov	r2, r3
 800df78:	68f9      	ldr	r1, [r7, #12]
 800df7a:	f7fe fb7d 	bl	800c678 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	f103 021c 	add.w	r2, r3, #28
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	68db      	ldr	r3, [r3, #12]
 800df88:	4619      	mov	r1, r3
 800df8a:	4610      	mov	r0, r2
 800df8c:	f7fd fbfc 	bl	800b788 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	3316      	adds	r3, #22
 800df94:	6939      	ldr	r1, [r7, #16]
 800df96:	4618      	mov	r0, r3
 800df98:	f7fd fbf6 	bl	800b788 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	3312      	adds	r3, #18
 800dfa0:	2100      	movs	r1, #0
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7fd fbd5 	bl	800b752 <st_word>
					fs->wflag = 1;
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	2201      	movs	r2, #1
 800dfac:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7fd fe71 	bl	800bc98 <sync_fs>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	7d1b      	ldrb	r3, [r3, #20]
 800dfbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dfc2:	b2da      	uxtb	r2, r3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dfc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3718      	adds	r7, #24
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}

0800dfd2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b084      	sub	sp, #16
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f7ff ff7b 	bl	800ded6 <f_sync>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dfe4:	7bfb      	ldrb	r3, [r7, #15]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d118      	bne.n	800e01c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f107 0208 	add.w	r2, r7, #8
 800dff0:	4611      	mov	r1, r2
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7ff fbb0 	bl	800d758 <validate>
 800dff8:	4603      	mov	r3, r0
 800dffa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dffc:	7bfb      	ldrb	r3, [r7, #15]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d10c      	bne.n	800e01c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	691b      	ldr	r3, [r3, #16]
 800e006:	4618      	mov	r0, r3
 800e008:	f7fd fd74 	bl	800baf4 <dec_lock>
 800e00c:	4603      	mov	r3, r0
 800e00e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e010:	7bfb      	ldrb	r3, [r7, #15]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d102      	bne.n	800e01c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2200      	movs	r2, #0
 800e01a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3710      	adds	r7, #16
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}

0800e026 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800e026:	b580      	push	{r7, lr}
 800e028:	b084      	sub	sp, #16
 800e02a:	af00      	add	r7, sp, #0
 800e02c:	6078      	str	r0, [r7, #4]
 800e02e:	460b      	mov	r3, r1
 800e030:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800e032:	78fb      	ldrb	r3, [r7, #3]
 800e034:	2b0a      	cmp	r3, #10
 800e036:	d103      	bne.n	800e040 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800e038:	210d      	movs	r1, #13
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f7ff fff3 	bl	800e026 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	685b      	ldr	r3, [r3, #4]
 800e044:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	db25      	blt.n	800e098 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	1c5a      	adds	r2, r3, #1
 800e050:	60fa      	str	r2, [r7, #12]
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	4413      	add	r3, r2
 800e056:	78fa      	ldrb	r2, [r7, #3]
 800e058:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2b3c      	cmp	r3, #60	; 0x3c
 800e05e:	dd12      	ble.n	800e086 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6818      	ldr	r0, [r3, #0]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f103 010c 	add.w	r1, r3, #12
 800e06a:	68fa      	ldr	r2, [r7, #12]
 800e06c:	f107 0308 	add.w	r3, r7, #8
 800e070:	f7ff fdbc 	bl	800dbec <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800e074:	68ba      	ldr	r2, [r7, #8]
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d101      	bne.n	800e080 <putc_bfd+0x5a>
 800e07c:	2300      	movs	r3, #0
 800e07e:	e001      	b.n	800e084 <putc_bfd+0x5e>
 800e080:	f04f 33ff 	mov.w	r3, #4294967295
 800e084:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	68fa      	ldr	r2, [r7, #12]
 800e08a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	689b      	ldr	r3, [r3, #8]
 800e090:	1c5a      	adds	r2, r3, #1
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	609a      	str	r2, [r3, #8]
 800e096:	e000      	b.n	800e09a <putc_bfd+0x74>
	if (i < 0) return;
 800e098:	bf00      	nop
}
 800e09a:	3710      	adds	r7, #16
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b084      	sub	sp, #16
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	db17      	blt.n	800e0e0 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6818      	ldr	r0, [r3, #0]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f103 010c 	add.w	r1, r3, #12
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	461a      	mov	r2, r3
 800e0c0:	f107 030c 	add.w	r3, r7, #12
 800e0c4:	f7ff fd92 	bl	800dbec <f_write>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d108      	bne.n	800e0e0 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	461a      	mov	r2, r3
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d102      	bne.n	800e0e0 <putc_flush+0x40>
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	689b      	ldr	r3, [r3, #8]
 800e0de:	e001      	b.n	800e0e4 <putc_flush+0x44>
	return EOF;
 800e0e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3710      	adds	r7, #16
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b083      	sub	sp, #12
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	683a      	ldr	r2, [r7, #0]
 800e0fa:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2200      	movs	r2, #0
 800e100:	605a      	str	r2, [r3, #4]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	685a      	ldr	r2, [r3, #4]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	609a      	str	r2, [r3, #8]
}
 800e10a:	bf00      	nop
 800e10c:	370c      	adds	r7, #12
 800e10e:	46bd      	mov	sp, r7
 800e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e114:	4770      	bx	lr
	...

0800e118 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800e118:	b40e      	push	{r1, r2, r3}
 800e11a:	b580      	push	{r7, lr}
 800e11c:	b0a7      	sub	sp, #156	; 0x9c
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800e122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e126:	6879      	ldr	r1, [r7, #4]
 800e128:	4618      	mov	r0, r3
 800e12a:	f7ff ffdf 	bl	800e0ec <putc_init>

	va_start(arp, fmt);
 800e12e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e132:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800e134:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e138:	1c5a      	adds	r2, r3, #1
 800e13a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800e144:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e148:	2b00      	cmp	r3, #0
 800e14a:	f000 81f4 	beq.w	800e536 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800e14e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e152:	2b25      	cmp	r3, #37	; 0x25
 800e154:	d008      	beq.n	800e168 <f_printf+0x50>
			putc_bfd(&pb, c);
 800e156:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800e15a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e15e:	4611      	mov	r1, r2
 800e160:	4618      	mov	r0, r3
 800e162:	f7ff ff60 	bl	800e026 <putc_bfd>
			continue;
 800e166:	e1e5      	b.n	800e534 <f_printf+0x41c>
		}
		w = f = 0;
 800e168:	2300      	movs	r3, #0
 800e16a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800e16e:	2300      	movs	r3, #0
 800e170:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800e174:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e178:	1c5a      	adds	r2, r3, #1
 800e17a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e17e:	781b      	ldrb	r3, [r3, #0]
 800e180:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800e184:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e188:	2b30      	cmp	r3, #48	; 0x30
 800e18a:	d10b      	bne.n	800e1a4 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800e18c:	2301      	movs	r3, #1
 800e18e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800e192:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e196:	1c5a      	adds	r2, r3, #1
 800e198:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800e1a2:	e024      	b.n	800e1ee <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800e1a4:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e1a8:	2b2d      	cmp	r3, #45	; 0x2d
 800e1aa:	d120      	bne.n	800e1ee <f_printf+0xd6>
				f = 2; c = *fmt++;
 800e1ac:	2302      	movs	r3, #2
 800e1ae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800e1b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e1b6:	1c5a      	adds	r2, r3, #1
 800e1b8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800e1c2:	e014      	b.n	800e1ee <f_printf+0xd6>
			w = w * 10 + c - '0';
 800e1c4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e1c8:	4613      	mov	r3, r2
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	4413      	add	r3, r2
 800e1ce:	005b      	lsls	r3, r3, #1
 800e1d0:	461a      	mov	r2, r3
 800e1d2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e1d6:	4413      	add	r3, r2
 800e1d8:	3b30      	subs	r3, #48	; 0x30
 800e1da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800e1de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e1e2:	1c5a      	adds	r2, r3, #1
 800e1e4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800e1ee:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e1f2:	2b2f      	cmp	r3, #47	; 0x2f
 800e1f4:	d903      	bls.n	800e1fe <f_printf+0xe6>
 800e1f6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e1fa:	2b39      	cmp	r3, #57	; 0x39
 800e1fc:	d9e2      	bls.n	800e1c4 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800e1fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e202:	2b6c      	cmp	r3, #108	; 0x6c
 800e204:	d003      	beq.n	800e20e <f_printf+0xf6>
 800e206:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e20a:	2b4c      	cmp	r3, #76	; 0x4c
 800e20c:	d10d      	bne.n	800e22a <f_printf+0x112>
			f |= 4; c = *fmt++;
 800e20e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e212:	f043 0304 	orr.w	r3, r3, #4
 800e216:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800e21a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e21e:	1c5a      	adds	r2, r3, #1
 800e220:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800e22a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e22e:	2b00      	cmp	r3, #0
 800e230:	f000 8183 	beq.w	800e53a <f_printf+0x422>
		d = c;
 800e234:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e238:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800e23c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e240:	2b60      	cmp	r3, #96	; 0x60
 800e242:	d908      	bls.n	800e256 <f_printf+0x13e>
 800e244:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e248:	2b7a      	cmp	r3, #122	; 0x7a
 800e24a:	d804      	bhi.n	800e256 <f_printf+0x13e>
 800e24c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e250:	3b20      	subs	r3, #32
 800e252:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800e256:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e25a:	3b42      	subs	r3, #66	; 0x42
 800e25c:	2b16      	cmp	r3, #22
 800e25e:	f200 8098 	bhi.w	800e392 <f_printf+0x27a>
 800e262:	a201      	add	r2, pc, #4	; (adr r2, 800e268 <f_printf+0x150>)
 800e264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e268:	0800e373 	.word	0x0800e373
 800e26c:	0800e35b 	.word	0x0800e35b
 800e270:	0800e383 	.word	0x0800e383
 800e274:	0800e393 	.word	0x0800e393
 800e278:	0800e393 	.word	0x0800e393
 800e27c:	0800e393 	.word	0x0800e393
 800e280:	0800e393 	.word	0x0800e393
 800e284:	0800e393 	.word	0x0800e393
 800e288:	0800e393 	.word	0x0800e393
 800e28c:	0800e393 	.word	0x0800e393
 800e290:	0800e393 	.word	0x0800e393
 800e294:	0800e393 	.word	0x0800e393
 800e298:	0800e393 	.word	0x0800e393
 800e29c:	0800e37b 	.word	0x0800e37b
 800e2a0:	0800e393 	.word	0x0800e393
 800e2a4:	0800e393 	.word	0x0800e393
 800e2a8:	0800e393 	.word	0x0800e393
 800e2ac:	0800e2c5 	.word	0x0800e2c5
 800e2b0:	0800e393 	.word	0x0800e393
 800e2b4:	0800e383 	.word	0x0800e383
 800e2b8:	0800e393 	.word	0x0800e393
 800e2bc:	0800e393 	.word	0x0800e393
 800e2c0:	0800e38b 	.word	0x0800e38b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800e2c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e2c6:	1d1a      	adds	r2, r3, #4
 800e2c8:	67ba      	str	r2, [r7, #120]	; 0x78
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e2d4:	e004      	b.n	800e2e0 <f_printf+0x1c8>
 800e2d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e2da:	3301      	adds	r3, #1
 800e2dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e2e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e2e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e2e6:	4413      	add	r3, r2
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d1f3      	bne.n	800e2d6 <f_printf+0x1be>
			if (!(f & 2)) {
 800e2ee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e2f2:	f003 0302 	and.w	r3, r3, #2
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d11a      	bne.n	800e330 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800e2fa:	e005      	b.n	800e308 <f_printf+0x1f0>
 800e2fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e300:	2120      	movs	r1, #32
 800e302:	4618      	mov	r0, r3
 800e304:	f7ff fe8f 	bl	800e026 <putc_bfd>
 800e308:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e30c:	1c5a      	adds	r2, r3, #1
 800e30e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e312:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e316:	429a      	cmp	r2, r3
 800e318:	d8f0      	bhi.n	800e2fc <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800e31a:	e009      	b.n	800e330 <f_printf+0x218>
 800e31c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e31e:	1c5a      	adds	r2, r3, #1
 800e320:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e322:	781a      	ldrb	r2, [r3, #0]
 800e324:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e328:	4611      	mov	r1, r2
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7ff fe7b 	bl	800e026 <putc_bfd>
 800e330:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d1f1      	bne.n	800e31c <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800e338:	e005      	b.n	800e346 <f_printf+0x22e>
 800e33a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e33e:	2120      	movs	r1, #32
 800e340:	4618      	mov	r0, r3
 800e342:	f7ff fe70 	bl	800e026 <putc_bfd>
 800e346:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e34a:	1c5a      	adds	r2, r3, #1
 800e34c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e350:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e354:	429a      	cmp	r2, r3
 800e356:	d8f0      	bhi.n	800e33a <f_printf+0x222>
			continue;
 800e358:	e0ec      	b.n	800e534 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800e35a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e35c:	1d1a      	adds	r2, r3, #4
 800e35e:	67ba      	str	r2, [r7, #120]	; 0x78
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	b2da      	uxtb	r2, r3
 800e364:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e368:	4611      	mov	r1, r2
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7ff fe5b 	bl	800e026 <putc_bfd>
 800e370:	e0e0      	b.n	800e534 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800e372:	2302      	movs	r3, #2
 800e374:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800e378:	e014      	b.n	800e3a4 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800e37a:	2308      	movs	r3, #8
 800e37c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800e380:	e010      	b.n	800e3a4 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800e382:	230a      	movs	r3, #10
 800e384:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800e388:	e00c      	b.n	800e3a4 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800e38a:	2310      	movs	r3, #16
 800e38c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800e390:	e008      	b.n	800e3a4 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800e392:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800e396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e39a:	4611      	mov	r1, r2
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7ff fe42 	bl	800e026 <putc_bfd>
 800e3a2:	e0c7      	b.n	800e534 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800e3a4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e3a8:	f003 0304 	and.w	r3, r3, #4
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d004      	beq.n	800e3ba <f_printf+0x2a2>
 800e3b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3b2:	1d1a      	adds	r2, r3, #4
 800e3b4:	67ba      	str	r2, [r7, #120]	; 0x78
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	e00c      	b.n	800e3d4 <f_printf+0x2bc>
 800e3ba:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e3be:	2b44      	cmp	r3, #68	; 0x44
 800e3c0:	d104      	bne.n	800e3cc <f_printf+0x2b4>
 800e3c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3c4:	1d1a      	adds	r2, r3, #4
 800e3c6:	67ba      	str	r2, [r7, #120]	; 0x78
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	e003      	b.n	800e3d4 <f_printf+0x2bc>
 800e3cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3ce:	1d1a      	adds	r2, r3, #4
 800e3d0:	67ba      	str	r2, [r7, #120]	; 0x78
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800e3d8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e3dc:	2b44      	cmp	r3, #68	; 0x44
 800e3de:	d10e      	bne.n	800e3fe <f_printf+0x2e6>
 800e3e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	da0a      	bge.n	800e3fe <f_printf+0x2e6>
			v = 0 - v;
 800e3e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e3ec:	425b      	negs	r3, r3
 800e3ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800e3f2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e3f6:	f043 0308 	orr.w	r3, r3, #8
 800e3fa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800e3fe:	2300      	movs	r3, #0
 800e400:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800e404:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800e408:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e40c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e410:	fb02 f201 	mul.w	r2, r2, r1
 800e414:	1a9b      	subs	r3, r3, r2
 800e416:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800e41a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800e41e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e422:	fbb2 f3f3 	udiv	r3, r2, r3
 800e426:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800e42a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e42e:	2b09      	cmp	r3, #9
 800e430:	d90b      	bls.n	800e44a <f_printf+0x332>
 800e432:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e436:	2b78      	cmp	r3, #120	; 0x78
 800e438:	d101      	bne.n	800e43e <f_printf+0x326>
 800e43a:	2227      	movs	r2, #39	; 0x27
 800e43c:	e000      	b.n	800e440 <f_printf+0x328>
 800e43e:	2207      	movs	r2, #7
 800e440:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e444:	4413      	add	r3, r2
 800e446:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800e44a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e44e:	1c5a      	adds	r2, r3, #1
 800e450:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800e454:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800e458:	3230      	adds	r2, #48	; 0x30
 800e45a:	b2d2      	uxtb	r2, r2
 800e45c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800e460:	440b      	add	r3, r1
 800e462:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800e466:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d003      	beq.n	800e476 <f_printf+0x35e>
 800e46e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e472:	2b1f      	cmp	r3, #31
 800e474:	d9c6      	bls.n	800e404 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800e476:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e47a:	f003 0308 	and.w	r3, r3, #8
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d00a      	beq.n	800e498 <f_printf+0x380>
 800e482:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e486:	1c5a      	adds	r2, r3, #1
 800e488:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800e48c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800e490:	4413      	add	r3, r2
 800e492:	222d      	movs	r2, #45	; 0x2d
 800e494:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800e498:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e49c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e4a0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e4a4:	f003 0301 	and.w	r3, r3, #1
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d001      	beq.n	800e4b0 <f_printf+0x398>
 800e4ac:	2330      	movs	r3, #48	; 0x30
 800e4ae:	e000      	b.n	800e4b2 <f_printf+0x39a>
 800e4b0:	2320      	movs	r3, #32
 800e4b2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800e4b6:	e007      	b.n	800e4c8 <f_printf+0x3b0>
 800e4b8:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800e4bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e4c0:	4611      	mov	r1, r2
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7ff fdaf 	bl	800e026 <putc_bfd>
 800e4c8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e4cc:	f003 0302 	and.w	r3, r3, #2
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d108      	bne.n	800e4e6 <f_printf+0x3ce>
 800e4d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e4d8:	1c5a      	adds	r2, r3, #1
 800e4da:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e4de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d8e8      	bhi.n	800e4b8 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800e4e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e4ea:	3b01      	subs	r3, #1
 800e4ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e4f0:	f107 020c 	add.w	r2, r7, #12
 800e4f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e4f8:	4413      	add	r3, r2
 800e4fa:	781a      	ldrb	r2, [r3, #0]
 800e4fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e500:	4611      	mov	r1, r2
 800e502:	4618      	mov	r0, r3
 800e504:	f7ff fd8f 	bl	800e026 <putc_bfd>
		} while (i);
 800e508:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d1ea      	bne.n	800e4e6 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800e510:	e007      	b.n	800e522 <f_printf+0x40a>
 800e512:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800e516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e51a:	4611      	mov	r1, r2
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7ff fd82 	bl	800e026 <putc_bfd>
 800e522:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e526:	1c5a      	adds	r2, r3, #1
 800e528:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e52c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e530:	429a      	cmp	r2, r3
 800e532:	d8ee      	bhi.n	800e512 <f_printf+0x3fa>
		c = *fmt++;
 800e534:	e5fe      	b.n	800e134 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800e536:	bf00      	nop
 800e538:	e000      	b.n	800e53c <f_printf+0x424>
		if (!c) break;
 800e53a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800e53c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e540:	4618      	mov	r0, r3
 800e542:	f7ff fdad 	bl	800e0a0 <putc_flush>
 800e546:	4603      	mov	r3, r0
}
 800e548:	4618      	mov	r0, r3
 800e54a:	379c      	adds	r7, #156	; 0x9c
 800e54c:	46bd      	mov	sp, r7
 800e54e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e552:	b003      	add	sp, #12
 800e554:	4770      	bx	lr
 800e556:	bf00      	nop

0800e558 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e558:	b480      	push	{r7}
 800e55a:	b087      	sub	sp, #28
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	4613      	mov	r3, r2
 800e564:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e566:	2301      	movs	r3, #1
 800e568:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e56a:	2300      	movs	r3, #0
 800e56c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e56e:	4b1f      	ldr	r3, [pc, #124]	; (800e5ec <FATFS_LinkDriverEx+0x94>)
 800e570:	7a5b      	ldrb	r3, [r3, #9]
 800e572:	b2db      	uxtb	r3, r3
 800e574:	2b00      	cmp	r3, #0
 800e576:	d131      	bne.n	800e5dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e578:	4b1c      	ldr	r3, [pc, #112]	; (800e5ec <FATFS_LinkDriverEx+0x94>)
 800e57a:	7a5b      	ldrb	r3, [r3, #9]
 800e57c:	b2db      	uxtb	r3, r3
 800e57e:	461a      	mov	r2, r3
 800e580:	4b1a      	ldr	r3, [pc, #104]	; (800e5ec <FATFS_LinkDriverEx+0x94>)
 800e582:	2100      	movs	r1, #0
 800e584:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e586:	4b19      	ldr	r3, [pc, #100]	; (800e5ec <FATFS_LinkDriverEx+0x94>)
 800e588:	7a5b      	ldrb	r3, [r3, #9]
 800e58a:	b2db      	uxtb	r3, r3
 800e58c:	4a17      	ldr	r2, [pc, #92]	; (800e5ec <FATFS_LinkDriverEx+0x94>)
 800e58e:	009b      	lsls	r3, r3, #2
 800e590:	4413      	add	r3, r2
 800e592:	68fa      	ldr	r2, [r7, #12]
 800e594:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e596:	4b15      	ldr	r3, [pc, #84]	; (800e5ec <FATFS_LinkDriverEx+0x94>)
 800e598:	7a5b      	ldrb	r3, [r3, #9]
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	461a      	mov	r2, r3
 800e59e:	4b13      	ldr	r3, [pc, #76]	; (800e5ec <FATFS_LinkDriverEx+0x94>)
 800e5a0:	4413      	add	r3, r2
 800e5a2:	79fa      	ldrb	r2, [r7, #7]
 800e5a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e5a6:	4b11      	ldr	r3, [pc, #68]	; (800e5ec <FATFS_LinkDriverEx+0x94>)
 800e5a8:	7a5b      	ldrb	r3, [r3, #9]
 800e5aa:	b2db      	uxtb	r3, r3
 800e5ac:	1c5a      	adds	r2, r3, #1
 800e5ae:	b2d1      	uxtb	r1, r2
 800e5b0:	4a0e      	ldr	r2, [pc, #56]	; (800e5ec <FATFS_LinkDriverEx+0x94>)
 800e5b2:	7251      	strb	r1, [r2, #9]
 800e5b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e5b6:	7dbb      	ldrb	r3, [r7, #22]
 800e5b8:	3330      	adds	r3, #48	; 0x30
 800e5ba:	b2da      	uxtb	r2, r3
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	223a      	movs	r2, #58	; 0x3a
 800e5c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	3302      	adds	r3, #2
 800e5cc:	222f      	movs	r2, #47	; 0x2f
 800e5ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	3303      	adds	r3, #3
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e5dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	371c      	adds	r7, #28
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e8:	4770      	bx	lr
 800e5ea:	bf00      	nop
 800e5ec:	200004ac 	.word	0x200004ac

0800e5f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b082      	sub	sp, #8
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	6839      	ldr	r1, [r7, #0]
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f7ff ffaa 	bl	800e558 <FATFS_LinkDriverEx>
 800e604:	4603      	mov	r3, r0
}
 800e606:	4618      	mov	r0, r3
 800e608:	3708      	adds	r7, #8
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
	...

0800e610 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e610:	b480      	push	{r7}
 800e612:	b085      	sub	sp, #20
 800e614:	af00      	add	r7, sp, #0
 800e616:	4603      	mov	r3, r0
 800e618:	6039      	str	r1, [r7, #0]
 800e61a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e61c:	88fb      	ldrh	r3, [r7, #6]
 800e61e:	2b7f      	cmp	r3, #127	; 0x7f
 800e620:	d802      	bhi.n	800e628 <ff_convert+0x18>
		c = chr;
 800e622:	88fb      	ldrh	r3, [r7, #6]
 800e624:	81fb      	strh	r3, [r7, #14]
 800e626:	e025      	b.n	800e674 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d00b      	beq.n	800e646 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e62e:	88fb      	ldrh	r3, [r7, #6]
 800e630:	2bff      	cmp	r3, #255	; 0xff
 800e632:	d805      	bhi.n	800e640 <ff_convert+0x30>
 800e634:	88fb      	ldrh	r3, [r7, #6]
 800e636:	3b80      	subs	r3, #128	; 0x80
 800e638:	4a12      	ldr	r2, [pc, #72]	; (800e684 <ff_convert+0x74>)
 800e63a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e63e:	e000      	b.n	800e642 <ff_convert+0x32>
 800e640:	2300      	movs	r3, #0
 800e642:	81fb      	strh	r3, [r7, #14]
 800e644:	e016      	b.n	800e674 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e646:	2300      	movs	r3, #0
 800e648:	81fb      	strh	r3, [r7, #14]
 800e64a:	e009      	b.n	800e660 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e64c:	89fb      	ldrh	r3, [r7, #14]
 800e64e:	4a0d      	ldr	r2, [pc, #52]	; (800e684 <ff_convert+0x74>)
 800e650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e654:	88fa      	ldrh	r2, [r7, #6]
 800e656:	429a      	cmp	r2, r3
 800e658:	d006      	beq.n	800e668 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e65a:	89fb      	ldrh	r3, [r7, #14]
 800e65c:	3301      	adds	r3, #1
 800e65e:	81fb      	strh	r3, [r7, #14]
 800e660:	89fb      	ldrh	r3, [r7, #14]
 800e662:	2b7f      	cmp	r3, #127	; 0x7f
 800e664:	d9f2      	bls.n	800e64c <ff_convert+0x3c>
 800e666:	e000      	b.n	800e66a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e668:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e66a:	89fb      	ldrh	r3, [r7, #14]
 800e66c:	3380      	adds	r3, #128	; 0x80
 800e66e:	b29b      	uxth	r3, r3
 800e670:	b2db      	uxtb	r3, r3
 800e672:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e674:	89fb      	ldrh	r3, [r7, #14]
}
 800e676:	4618      	mov	r0, r3
 800e678:	3714      	adds	r7, #20
 800e67a:	46bd      	mov	sp, r7
 800e67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e680:	4770      	bx	lr
 800e682:	bf00      	nop
 800e684:	08010e44 	.word	0x08010e44

0800e688 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e688:	b480      	push	{r7}
 800e68a:	b087      	sub	sp, #28
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	4603      	mov	r3, r0
 800e690:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e692:	88fb      	ldrh	r3, [r7, #6]
 800e694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e698:	d201      	bcs.n	800e69e <ff_wtoupper+0x16>
 800e69a:	4b3e      	ldr	r3, [pc, #248]	; (800e794 <ff_wtoupper+0x10c>)
 800e69c:	e000      	b.n	800e6a0 <ff_wtoupper+0x18>
 800e69e:	4b3e      	ldr	r3, [pc, #248]	; (800e798 <ff_wtoupper+0x110>)
 800e6a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	1c9a      	adds	r2, r3, #2
 800e6a6:	617a      	str	r2, [r7, #20]
 800e6a8:	881b      	ldrh	r3, [r3, #0]
 800e6aa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e6ac:	8a7b      	ldrh	r3, [r7, #18]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d068      	beq.n	800e784 <ff_wtoupper+0xfc>
 800e6b2:	88fa      	ldrh	r2, [r7, #6]
 800e6b4:	8a7b      	ldrh	r3, [r7, #18]
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d364      	bcc.n	800e784 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	1c9a      	adds	r2, r3, #2
 800e6be:	617a      	str	r2, [r7, #20]
 800e6c0:	881b      	ldrh	r3, [r3, #0]
 800e6c2:	823b      	strh	r3, [r7, #16]
 800e6c4:	8a3b      	ldrh	r3, [r7, #16]
 800e6c6:	0a1b      	lsrs	r3, r3, #8
 800e6c8:	81fb      	strh	r3, [r7, #14]
 800e6ca:	8a3b      	ldrh	r3, [r7, #16]
 800e6cc:	b2db      	uxtb	r3, r3
 800e6ce:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e6d0:	88fa      	ldrh	r2, [r7, #6]
 800e6d2:	8a79      	ldrh	r1, [r7, #18]
 800e6d4:	8a3b      	ldrh	r3, [r7, #16]
 800e6d6:	440b      	add	r3, r1
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	da49      	bge.n	800e770 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e6dc:	89fb      	ldrh	r3, [r7, #14]
 800e6de:	2b08      	cmp	r3, #8
 800e6e0:	d84f      	bhi.n	800e782 <ff_wtoupper+0xfa>
 800e6e2:	a201      	add	r2, pc, #4	; (adr r2, 800e6e8 <ff_wtoupper+0x60>)
 800e6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e8:	0800e70d 	.word	0x0800e70d
 800e6ec:	0800e71f 	.word	0x0800e71f
 800e6f0:	0800e735 	.word	0x0800e735
 800e6f4:	0800e73d 	.word	0x0800e73d
 800e6f8:	0800e745 	.word	0x0800e745
 800e6fc:	0800e74d 	.word	0x0800e74d
 800e700:	0800e755 	.word	0x0800e755
 800e704:	0800e75d 	.word	0x0800e75d
 800e708:	0800e765 	.word	0x0800e765
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e70c:	88fa      	ldrh	r2, [r7, #6]
 800e70e:	8a7b      	ldrh	r3, [r7, #18]
 800e710:	1ad3      	subs	r3, r2, r3
 800e712:	005b      	lsls	r3, r3, #1
 800e714:	697a      	ldr	r2, [r7, #20]
 800e716:	4413      	add	r3, r2
 800e718:	881b      	ldrh	r3, [r3, #0]
 800e71a:	80fb      	strh	r3, [r7, #6]
 800e71c:	e027      	b.n	800e76e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e71e:	88fa      	ldrh	r2, [r7, #6]
 800e720:	8a7b      	ldrh	r3, [r7, #18]
 800e722:	1ad3      	subs	r3, r2, r3
 800e724:	b29b      	uxth	r3, r3
 800e726:	f003 0301 	and.w	r3, r3, #1
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	88fa      	ldrh	r2, [r7, #6]
 800e72e:	1ad3      	subs	r3, r2, r3
 800e730:	80fb      	strh	r3, [r7, #6]
 800e732:	e01c      	b.n	800e76e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e734:	88fb      	ldrh	r3, [r7, #6]
 800e736:	3b10      	subs	r3, #16
 800e738:	80fb      	strh	r3, [r7, #6]
 800e73a:	e018      	b.n	800e76e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e73c:	88fb      	ldrh	r3, [r7, #6]
 800e73e:	3b20      	subs	r3, #32
 800e740:	80fb      	strh	r3, [r7, #6]
 800e742:	e014      	b.n	800e76e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e744:	88fb      	ldrh	r3, [r7, #6]
 800e746:	3b30      	subs	r3, #48	; 0x30
 800e748:	80fb      	strh	r3, [r7, #6]
 800e74a:	e010      	b.n	800e76e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e74c:	88fb      	ldrh	r3, [r7, #6]
 800e74e:	3b1a      	subs	r3, #26
 800e750:	80fb      	strh	r3, [r7, #6]
 800e752:	e00c      	b.n	800e76e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e754:	88fb      	ldrh	r3, [r7, #6]
 800e756:	3308      	adds	r3, #8
 800e758:	80fb      	strh	r3, [r7, #6]
 800e75a:	e008      	b.n	800e76e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e75c:	88fb      	ldrh	r3, [r7, #6]
 800e75e:	3b50      	subs	r3, #80	; 0x50
 800e760:	80fb      	strh	r3, [r7, #6]
 800e762:	e004      	b.n	800e76e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e764:	88fb      	ldrh	r3, [r7, #6]
 800e766:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e76a:	80fb      	strh	r3, [r7, #6]
 800e76c:	bf00      	nop
			}
			break;
 800e76e:	e008      	b.n	800e782 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e770:	89fb      	ldrh	r3, [r7, #14]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d195      	bne.n	800e6a2 <ff_wtoupper+0x1a>
 800e776:	8a3b      	ldrh	r3, [r7, #16]
 800e778:	005b      	lsls	r3, r3, #1
 800e77a:	697a      	ldr	r2, [r7, #20]
 800e77c:	4413      	add	r3, r2
 800e77e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e780:	e78f      	b.n	800e6a2 <ff_wtoupper+0x1a>
			break;
 800e782:	bf00      	nop
	}

	return chr;
 800e784:	88fb      	ldrh	r3, [r7, #6]
}
 800e786:	4618      	mov	r0, r3
 800e788:	371c      	adds	r7, #28
 800e78a:	46bd      	mov	sp, r7
 800e78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e790:	4770      	bx	lr
 800e792:	bf00      	nop
 800e794:	08010f44 	.word	0x08010f44
 800e798:	08011138 	.word	0x08011138

0800e79c <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b082      	sub	sp, #8
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f000 fd0f 	bl	800f1c8 <malloc>
 800e7aa:	4603      	mov	r3, r0
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3708      	adds	r7, #8
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f000 fd0b 	bl	800f1d8 <free>
}
 800e7c2:	bf00      	nop
 800e7c4:	3708      	adds	r7, #8
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
	...

0800e7cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	4912      	ldr	r1, [pc, #72]	; (800e81c <MX_USB_DEVICE_Init+0x50>)
 800e7d4:	4812      	ldr	r0, [pc, #72]	; (800e820 <MX_USB_DEVICE_Init+0x54>)
 800e7d6:	f7fb fdfc 	bl	800a3d2 <USBD_Init>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d001      	beq.n	800e7e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e7e0:	f7f2 fd88 	bl	80012f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800e7e4:	490f      	ldr	r1, [pc, #60]	; (800e824 <MX_USB_DEVICE_Init+0x58>)
 800e7e6:	480e      	ldr	r0, [pc, #56]	; (800e820 <MX_USB_DEVICE_Init+0x54>)
 800e7e8:	f7fb fe29 	bl	800a43e <USBD_RegisterClass>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d001      	beq.n	800e7f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e7f2:	f7f2 fd7f 	bl	80012f4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800e7f6:	490c      	ldr	r1, [pc, #48]	; (800e828 <MX_USB_DEVICE_Init+0x5c>)
 800e7f8:	4809      	ldr	r0, [pc, #36]	; (800e820 <MX_USB_DEVICE_Init+0x54>)
 800e7fa:	f7fa fb25 	bl	8008e48 <USBD_MSC_RegisterStorage>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2b00      	cmp	r3, #0
 800e802:	d001      	beq.n	800e808 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e804:	f7f2 fd76 	bl	80012f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e808:	4805      	ldr	r0, [pc, #20]	; (800e820 <MX_USB_DEVICE_Init+0x54>)
 800e80a:	f7fb fe39 	bl	800a480 <USBD_Start>
 800e80e:	4603      	mov	r3, r0
 800e810:	2b00      	cmp	r3, #0
 800e812:	d001      	beq.n	800e818 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e814:	f7f2 fd6e 	bl	80012f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e818:	bf00      	nop
 800e81a:	bd80      	pop	{r7, pc}
 800e81c:	200000f4 	.word	0x200000f4
 800e820:	20000fcc 	.word	0x20000fcc
 800e824:	2000000c 	.word	0x2000000c
 800e828:	20000144 	.word	0x20000144

0800e82c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e82c:	b480      	push	{r7}
 800e82e:	b083      	sub	sp, #12
 800e830:	af00      	add	r7, sp, #0
 800e832:	4603      	mov	r3, r0
 800e834:	6039      	str	r1, [r7, #0]
 800e836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	2212      	movs	r2, #18
 800e83c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e83e:	4b03      	ldr	r3, [pc, #12]	; (800e84c <USBD_FS_DeviceDescriptor+0x20>)
}
 800e840:	4618      	mov	r0, r3
 800e842:	370c      	adds	r7, #12
 800e844:	46bd      	mov	sp, r7
 800e846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84a:	4770      	bx	lr
 800e84c:	20000110 	.word	0x20000110

0800e850 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e850:	b480      	push	{r7}
 800e852:	b083      	sub	sp, #12
 800e854:	af00      	add	r7, sp, #0
 800e856:	4603      	mov	r3, r0
 800e858:	6039      	str	r1, [r7, #0]
 800e85a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	2204      	movs	r2, #4
 800e860:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e862:	4b03      	ldr	r3, [pc, #12]	; (800e870 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e864:	4618      	mov	r0, r3
 800e866:	370c      	adds	r7, #12
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr
 800e870:	20000124 	.word	0x20000124

0800e874 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
 800e87a:	4603      	mov	r3, r0
 800e87c:	6039      	str	r1, [r7, #0]
 800e87e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e880:	79fb      	ldrb	r3, [r7, #7]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d105      	bne.n	800e892 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e886:	683a      	ldr	r2, [r7, #0]
 800e888:	4907      	ldr	r1, [pc, #28]	; (800e8a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800e88a:	4808      	ldr	r0, [pc, #32]	; (800e8ac <USBD_FS_ProductStrDescriptor+0x38>)
 800e88c:	f7fc fdc5 	bl	800b41a <USBD_GetString>
 800e890:	e004      	b.n	800e89c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e892:	683a      	ldr	r2, [r7, #0]
 800e894:	4904      	ldr	r1, [pc, #16]	; (800e8a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800e896:	4805      	ldr	r0, [pc, #20]	; (800e8ac <USBD_FS_ProductStrDescriptor+0x38>)
 800e898:	f7fc fdbf 	bl	800b41a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e89c:	4b02      	ldr	r3, [pc, #8]	; (800e8a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3708      	adds	r7, #8
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}
 800e8a6:	bf00      	nop
 800e8a8:	2000129c 	.word	0x2000129c
 800e8ac:	08010d44 	.word	0x08010d44

0800e8b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	6039      	str	r1, [r7, #0]
 800e8ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e8bc:	683a      	ldr	r2, [r7, #0]
 800e8be:	4904      	ldr	r1, [pc, #16]	; (800e8d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e8c0:	4804      	ldr	r0, [pc, #16]	; (800e8d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e8c2:	f7fc fdaa 	bl	800b41a <USBD_GetString>
  return USBD_StrDesc;
 800e8c6:	4b02      	ldr	r3, [pc, #8]	; (800e8d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3708      	adds	r7, #8
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	2000129c 	.word	0x2000129c
 800e8d4:	08010d58 	.word	0x08010d58

0800e8d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	4603      	mov	r3, r0
 800e8e0:	6039      	str	r1, [r7, #0]
 800e8e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	221a      	movs	r2, #26
 800e8e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e8ea:	f000 f843 	bl	800e974 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e8ee:	4b02      	ldr	r3, [pc, #8]	; (800e8f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3708      	adds	r7, #8
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}
 800e8f8:	20000128 	.word	0x20000128

0800e8fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	4603      	mov	r3, r0
 800e904:	6039      	str	r1, [r7, #0]
 800e906:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e908:	79fb      	ldrb	r3, [r7, #7]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d105      	bne.n	800e91a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e90e:	683a      	ldr	r2, [r7, #0]
 800e910:	4907      	ldr	r1, [pc, #28]	; (800e930 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e912:	4808      	ldr	r0, [pc, #32]	; (800e934 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e914:	f7fc fd81 	bl	800b41a <USBD_GetString>
 800e918:	e004      	b.n	800e924 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e91a:	683a      	ldr	r2, [r7, #0]
 800e91c:	4904      	ldr	r1, [pc, #16]	; (800e930 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e91e:	4805      	ldr	r0, [pc, #20]	; (800e934 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e920:	f7fc fd7b 	bl	800b41a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e924:	4b02      	ldr	r3, [pc, #8]	; (800e930 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e926:	4618      	mov	r0, r3
 800e928:	3708      	adds	r7, #8
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	2000129c 	.word	0x2000129c
 800e934:	08010d6c 	.word	0x08010d6c

0800e938 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b082      	sub	sp, #8
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	4603      	mov	r3, r0
 800e940:	6039      	str	r1, [r7, #0]
 800e942:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e944:	79fb      	ldrb	r3, [r7, #7]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d105      	bne.n	800e956 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e94a:	683a      	ldr	r2, [r7, #0]
 800e94c:	4907      	ldr	r1, [pc, #28]	; (800e96c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e94e:	4808      	ldr	r0, [pc, #32]	; (800e970 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e950:	f7fc fd63 	bl	800b41a <USBD_GetString>
 800e954:	e004      	b.n	800e960 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e956:	683a      	ldr	r2, [r7, #0]
 800e958:	4904      	ldr	r1, [pc, #16]	; (800e96c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e95a:	4805      	ldr	r0, [pc, #20]	; (800e970 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e95c:	f7fc fd5d 	bl	800b41a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e960:	4b02      	ldr	r3, [pc, #8]	; (800e96c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e962:	4618      	mov	r0, r3
 800e964:	3708      	adds	r7, #8
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	2000129c 	.word	0x2000129c
 800e970:	08010d78 	.word	0x08010d78

0800e974 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b084      	sub	sp, #16
 800e978:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e97a:	4b0f      	ldr	r3, [pc, #60]	; (800e9b8 <Get_SerialNum+0x44>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e980:	4b0e      	ldr	r3, [pc, #56]	; (800e9bc <Get_SerialNum+0x48>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e986:	4b0e      	ldr	r3, [pc, #56]	; (800e9c0 <Get_SerialNum+0x4c>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e98c:	68fa      	ldr	r2, [r7, #12]
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	4413      	add	r3, r2
 800e992:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d009      	beq.n	800e9ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e99a:	2208      	movs	r2, #8
 800e99c:	4909      	ldr	r1, [pc, #36]	; (800e9c4 <Get_SerialNum+0x50>)
 800e99e:	68f8      	ldr	r0, [r7, #12]
 800e9a0:	f000 f814 	bl	800e9cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e9a4:	2204      	movs	r2, #4
 800e9a6:	4908      	ldr	r1, [pc, #32]	; (800e9c8 <Get_SerialNum+0x54>)
 800e9a8:	68b8      	ldr	r0, [r7, #8]
 800e9aa:	f000 f80f 	bl	800e9cc <IntToUnicode>
  }
}
 800e9ae:	bf00      	nop
 800e9b0:	3710      	adds	r7, #16
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}
 800e9b6:	bf00      	nop
 800e9b8:	1fff7a10 	.word	0x1fff7a10
 800e9bc:	1fff7a14 	.word	0x1fff7a14
 800e9c0:	1fff7a18 	.word	0x1fff7a18
 800e9c4:	2000012a 	.word	0x2000012a
 800e9c8:	2000013a 	.word	0x2000013a

0800e9cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b087      	sub	sp, #28
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	60f8      	str	r0, [r7, #12]
 800e9d4:	60b9      	str	r1, [r7, #8]
 800e9d6:	4613      	mov	r3, r2
 800e9d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e9de:	2300      	movs	r3, #0
 800e9e0:	75fb      	strb	r3, [r7, #23]
 800e9e2:	e027      	b.n	800ea34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	0f1b      	lsrs	r3, r3, #28
 800e9e8:	2b09      	cmp	r3, #9
 800e9ea:	d80b      	bhi.n	800ea04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	0f1b      	lsrs	r3, r3, #28
 800e9f0:	b2da      	uxtb	r2, r3
 800e9f2:	7dfb      	ldrb	r3, [r7, #23]
 800e9f4:	005b      	lsls	r3, r3, #1
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	440b      	add	r3, r1
 800e9fc:	3230      	adds	r2, #48	; 0x30
 800e9fe:	b2d2      	uxtb	r2, r2
 800ea00:	701a      	strb	r2, [r3, #0]
 800ea02:	e00a      	b.n	800ea1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	0f1b      	lsrs	r3, r3, #28
 800ea08:	b2da      	uxtb	r2, r3
 800ea0a:	7dfb      	ldrb	r3, [r7, #23]
 800ea0c:	005b      	lsls	r3, r3, #1
 800ea0e:	4619      	mov	r1, r3
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	440b      	add	r3, r1
 800ea14:	3237      	adds	r2, #55	; 0x37
 800ea16:	b2d2      	uxtb	r2, r2
 800ea18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	011b      	lsls	r3, r3, #4
 800ea1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ea20:	7dfb      	ldrb	r3, [r7, #23]
 800ea22:	005b      	lsls	r3, r3, #1
 800ea24:	3301      	adds	r3, #1
 800ea26:	68ba      	ldr	r2, [r7, #8]
 800ea28:	4413      	add	r3, r2
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ea2e:	7dfb      	ldrb	r3, [r7, #23]
 800ea30:	3301      	adds	r3, #1
 800ea32:	75fb      	strb	r3, [r7, #23]
 800ea34:	7dfa      	ldrb	r2, [r7, #23]
 800ea36:	79fb      	ldrb	r3, [r7, #7]
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d3d3      	bcc.n	800e9e4 <IntToUnicode+0x18>
  }
}
 800ea3c:	bf00      	nop
 800ea3e:	371c      	adds	r7, #28
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr

0800ea48 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b083      	sub	sp, #12
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	4603      	mov	r3, r0
 800ea50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800ea52:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	370c      	adds	r7, #12
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5e:	4770      	bx	lr

0800ea60 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800ea60:	b480      	push	{r7}
 800ea62:	b085      	sub	sp, #20
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	4603      	mov	r3, r0
 800ea68:	60b9      	str	r1, [r7, #8]
 800ea6a:	607a      	str	r2, [r7, #4]
 800ea6c:	73fb      	strb	r3, [r7, #15]
//  HAL_SD_GetCardInfo(&hsd, &cardInfo);
////  *block_num  = STORAGE_BLK_NBR;
////  *block_size = STORAGE_BLK_SIZ;
//    *block_num  = (cardInfo.BlockNbr);
//    *block_size = cardInfo.BlockSize;
	    *block_num  = (hsd.SdCard.BlockNbr);
 800ea6e:	4b08      	ldr	r3, [pc, #32]	; (800ea90 <STORAGE_GetCapacity_FS+0x30>)
 800ea70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	601a      	str	r2, [r3, #0]
	    *block_size = hsd.SdCard.BlockSize;
 800ea76:	4b06      	ldr	r3, [pc, #24]	; (800ea90 <STORAGE_GetCapacity_FS+0x30>)
 800ea78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea7a:	b29a      	uxth	r2, r3
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800ea80:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3714      	adds	r7, #20
 800ea86:	46bd      	mov	sp, r7
 800ea88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8c:	4770      	bx	lr
 800ea8e:	bf00      	nop
 800ea90:	2000089c 	.word	0x2000089c

0800ea94 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b083      	sub	sp, #12
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
//	UNUSED(lun);

//	  if (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER)
//		  return USBD_BUSY;
  return (USBD_OK);
 800ea9e:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	370c      	adds	r7, #12
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr

0800eaac <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800eaac:	b480      	push	{r7}
 800eaae:	b083      	sub	sp, #12
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	4603      	mov	r3, r0
 800eab4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800eab6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	370c      	adds	r7, #12
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr

0800eac4 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800eac4:	b590      	push	{r4, r7, lr}
 800eac6:	b085      	sub	sp, #20
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60b9      	str	r1, [r7, #8]
 800eacc:	607a      	str	r2, [r7, #4]
 800eace:	461a      	mov	r2, r3
 800ead0:	4603      	mov	r3, r0
 800ead2:	73fb      	strb	r3, [r7, #15]
 800ead4:	4613      	mov	r3, r2
 800ead6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
//  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, 10);
//  HAL_SD_ReadBlocks_DMA(&hsd, buf, blk_addr, blk_len);
	return(SD_Driver.disk_read(lun,buf,blk_addr,blk_len));
 800ead8:	4b06      	ldr	r3, [pc, #24]	; (800eaf4 <STORAGE_Read_FS+0x30>)
 800eada:	689c      	ldr	r4, [r3, #8]
 800eadc:	89bb      	ldrh	r3, [r7, #12]
 800eade:	7bf8      	ldrb	r0, [r7, #15]
 800eae0:	687a      	ldr	r2, [r7, #4]
 800eae2:	68b9      	ldr	r1, [r7, #8]
 800eae4:	47a0      	blx	r4
 800eae6:	4603      	mov	r3, r0
 800eae8:	b25b      	sxtb	r3, r3
//	memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
//  return (USBD_OK);
  /* USER CODE END 6 */
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3714      	adds	r7, #20
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd90      	pop	{r4, r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	08010da0 	.word	0x08010da0

0800eaf8 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800eaf8:	b590      	push	{r4, r7, lr}
 800eafa:	b085      	sub	sp, #20
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60b9      	str	r1, [r7, #8]
 800eb00:	607a      	str	r2, [r7, #4]
 800eb02:	461a      	mov	r2, r3
 800eb04:	4603      	mov	r3, r0
 800eb06:	73fb      	strb	r3, [r7, #15]
 800eb08:	4613      	mov	r3, r2
 800eb0a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
//	HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, 10);
//	HAL_SD_WriteBlocks_DMA(&hsd, buf, blk_addr, blk_len);
	return(SD_Driver.disk_write(lun,buf,blk_addr,blk_len));
 800eb0c:	4b06      	ldr	r3, [pc, #24]	; (800eb28 <STORAGE_Write_FS+0x30>)
 800eb0e:	68dc      	ldr	r4, [r3, #12]
 800eb10:	89bb      	ldrh	r3, [r7, #12]
 800eb12:	7bf8      	ldrb	r0, [r7, #15]
 800eb14:	687a      	ldr	r2, [r7, #4]
 800eb16:	68b9      	ldr	r1, [r7, #8]
 800eb18:	47a0      	blx	r4
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	b25b      	sxtb	r3, r3
//	 memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);


//  return (USBD_OK);
  /* USER CODE END 7 */
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3714      	adds	r7, #20
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd90      	pop	{r4, r7, pc}
 800eb26:	bf00      	nop
 800eb28:	08010da0 	.word	0x08010da0

0800eb2c <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800eb30:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b08a      	sub	sp, #40	; 0x28
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eb44:	f107 0314 	add.w	r3, r7, #20
 800eb48:	2200      	movs	r2, #0
 800eb4a:	601a      	str	r2, [r3, #0]
 800eb4c:	605a      	str	r2, [r3, #4]
 800eb4e:	609a      	str	r2, [r3, #8]
 800eb50:	60da      	str	r2, [r3, #12]
 800eb52:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800eb5c:	d13a      	bne.n	800ebd4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eb5e:	2300      	movs	r3, #0
 800eb60:	613b      	str	r3, [r7, #16]
 800eb62:	4b1e      	ldr	r3, [pc, #120]	; (800ebdc <HAL_PCD_MspInit+0xa0>)
 800eb64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb66:	4a1d      	ldr	r2, [pc, #116]	; (800ebdc <HAL_PCD_MspInit+0xa0>)
 800eb68:	f043 0301 	orr.w	r3, r3, #1
 800eb6c:	6313      	str	r3, [r2, #48]	; 0x30
 800eb6e:	4b1b      	ldr	r3, [pc, #108]	; (800ebdc <HAL_PCD_MspInit+0xa0>)
 800eb70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb72:	f003 0301 	and.w	r3, r3, #1
 800eb76:	613b      	str	r3, [r7, #16]
 800eb78:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800eb7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800eb7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb80:	2302      	movs	r3, #2
 800eb82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb84:	2300      	movs	r3, #0
 800eb86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eb88:	2303      	movs	r3, #3
 800eb8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800eb8c:	230a      	movs	r3, #10
 800eb8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eb90:	f107 0314 	add.w	r3, r7, #20
 800eb94:	4619      	mov	r1, r3
 800eb96:	4812      	ldr	r0, [pc, #72]	; (800ebe0 <HAL_PCD_MspInit+0xa4>)
 800eb98:	f7f3 ff6c 	bl	8002a74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800eb9c:	4b0f      	ldr	r3, [pc, #60]	; (800ebdc <HAL_PCD_MspInit+0xa0>)
 800eb9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eba0:	4a0e      	ldr	r2, [pc, #56]	; (800ebdc <HAL_PCD_MspInit+0xa0>)
 800eba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eba6:	6353      	str	r3, [r2, #52]	; 0x34
 800eba8:	2300      	movs	r3, #0
 800ebaa:	60fb      	str	r3, [r7, #12]
 800ebac:	4b0b      	ldr	r3, [pc, #44]	; (800ebdc <HAL_PCD_MspInit+0xa0>)
 800ebae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebb0:	4a0a      	ldr	r2, [pc, #40]	; (800ebdc <HAL_PCD_MspInit+0xa0>)
 800ebb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ebb6:	6453      	str	r3, [r2, #68]	; 0x44
 800ebb8:	4b08      	ldr	r3, [pc, #32]	; (800ebdc <HAL_PCD_MspInit+0xa0>)
 800ebba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ebc0:	60fb      	str	r3, [r7, #12]
 800ebc2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 7, 0);
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	2107      	movs	r1, #7
 800ebc8:	2043      	movs	r0, #67	; 0x43
 800ebca:	f7f3 fb80 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ebce:	2043      	movs	r0, #67	; 0x43
 800ebd0:	f7f3 fb99 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ebd4:	bf00      	nop
 800ebd6:	3728      	adds	r7, #40	; 0x28
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}
 800ebdc:	40023800 	.word	0x40023800
 800ebe0:	40020000 	.word	0x40020000

0800ebe4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	4610      	mov	r0, r2
 800ebfc:	f7fb fc8b 	bl	800a516 <USBD_LL_SetupStage>
}
 800ec00:	bf00      	nop
 800ec02:	3708      	adds	r7, #8
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}

0800ec08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b082      	sub	sp, #8
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	460b      	mov	r3, r1
 800ec12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ec1a:	78fa      	ldrb	r2, [r7, #3]
 800ec1c:	6879      	ldr	r1, [r7, #4]
 800ec1e:	4613      	mov	r3, r2
 800ec20:	00db      	lsls	r3, r3, #3
 800ec22:	1a9b      	subs	r3, r3, r2
 800ec24:	009b      	lsls	r3, r3, #2
 800ec26:	440b      	add	r3, r1
 800ec28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	78fb      	ldrb	r3, [r7, #3]
 800ec30:	4619      	mov	r1, r3
 800ec32:	f7fb fcc3 	bl	800a5bc <USBD_LL_DataOutStage>
}
 800ec36:	bf00      	nop
 800ec38:	3708      	adds	r7, #8
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}

0800ec3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec3e:	b580      	push	{r7, lr}
 800ec40:	b082      	sub	sp, #8
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
 800ec46:	460b      	mov	r3, r1
 800ec48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ec50:	78fa      	ldrb	r2, [r7, #3]
 800ec52:	6879      	ldr	r1, [r7, #4]
 800ec54:	4613      	mov	r3, r2
 800ec56:	00db      	lsls	r3, r3, #3
 800ec58:	1a9b      	subs	r3, r3, r2
 800ec5a:	009b      	lsls	r3, r3, #2
 800ec5c:	440b      	add	r3, r1
 800ec5e:	3348      	adds	r3, #72	; 0x48
 800ec60:	681a      	ldr	r2, [r3, #0]
 800ec62:	78fb      	ldrb	r3, [r7, #3]
 800ec64:	4619      	mov	r1, r3
 800ec66:	f7fb fd0c 	bl	800a682 <USBD_LL_DataInStage>
}
 800ec6a:	bf00      	nop
 800ec6c:	3708      	adds	r7, #8
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}

0800ec72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec72:	b580      	push	{r7, lr}
 800ec74:	b082      	sub	sp, #8
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7fb fe10 	bl	800a8a6 <USBD_LL_SOF>
}
 800ec86:	bf00      	nop
 800ec88:	3708      	adds	r7, #8
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}

0800ec8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec8e:	b580      	push	{r7, lr}
 800ec90:	b084      	sub	sp, #16
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ec96:	2301      	movs	r3, #1
 800ec98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	68db      	ldr	r3, [r3, #12]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d102      	bne.n	800eca8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800eca2:	2300      	movs	r3, #0
 800eca4:	73fb      	strb	r3, [r7, #15]
 800eca6:	e008      	b.n	800ecba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	68db      	ldr	r3, [r3, #12]
 800ecac:	2b02      	cmp	r3, #2
 800ecae:	d102      	bne.n	800ecb6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	73fb      	strb	r3, [r7, #15]
 800ecb4:	e001      	b.n	800ecba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ecb6:	f7f2 fb1d 	bl	80012f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ecc0:	7bfa      	ldrb	r2, [r7, #15]
 800ecc2:	4611      	mov	r1, r2
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f7fb fdb3 	bl	800a830 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f7fb fd6c 	bl	800a7ae <USBD_LL_Reset>
}
 800ecd6:	bf00      	nop
 800ecd8:	3710      	adds	r7, #16
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
	...

0800ece0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7fb fdae 	bl	800a850 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	6812      	ldr	r2, [r2, #0]
 800ed02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ed06:	f043 0301 	orr.w	r3, r3, #1
 800ed0a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6a1b      	ldr	r3, [r3, #32]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d005      	beq.n	800ed20 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ed14:	4b04      	ldr	r3, [pc, #16]	; (800ed28 <HAL_PCD_SuspendCallback+0x48>)
 800ed16:	691b      	ldr	r3, [r3, #16]
 800ed18:	4a03      	ldr	r2, [pc, #12]	; (800ed28 <HAL_PCD_SuspendCallback+0x48>)
 800ed1a:	f043 0306 	orr.w	r3, r3, #6
 800ed1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ed20:	bf00      	nop
 800ed22:	3708      	adds	r7, #8
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	e000ed00 	.word	0xe000ed00

0800ed2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b082      	sub	sp, #8
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7fb fd9d 	bl	800a87a <USBD_LL_Resume>
}
 800ed40:	bf00      	nop
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	460b      	mov	r3, r1
 800ed52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ed5a:	78fa      	ldrb	r2, [r7, #3]
 800ed5c:	4611      	mov	r1, r2
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7fb fdc8 	bl	800a8f4 <USBD_LL_IsoOUTIncomplete>
}
 800ed64:	bf00      	nop
 800ed66:	3708      	adds	r7, #8
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}

0800ed6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	460b      	mov	r3, r1
 800ed76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ed7e:	78fa      	ldrb	r2, [r7, #3]
 800ed80:	4611      	mov	r1, r2
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fb fda9 	bl	800a8da <USBD_LL_IsoINIncomplete>
}
 800ed88:	bf00      	nop
 800ed8a:	3708      	adds	r7, #8
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}

0800ed90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b082      	sub	sp, #8
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7fb fdb5 	bl	800a90e <USBD_LL_DevConnected>
}
 800eda4:	bf00      	nop
 800eda6:	3708      	adds	r7, #8
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b082      	sub	sp, #8
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800edba:	4618      	mov	r0, r3
 800edbc:	f7fb fdb2 	bl	800a924 <USBD_LL_DevDisconnected>
}
 800edc0:	bf00      	nop
 800edc2:	3708      	adds	r7, #8
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}

0800edc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b082      	sub	sp, #8
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	781b      	ldrb	r3, [r3, #0]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d13c      	bne.n	800ee52 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800edd8:	4a20      	ldr	r2, [pc, #128]	; (800ee5c <USBD_LL_Init+0x94>)
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	4a1e      	ldr	r2, [pc, #120]	; (800ee5c <USBD_LL_Init+0x94>)
 800ede4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ede8:	4b1c      	ldr	r3, [pc, #112]	; (800ee5c <USBD_LL_Init+0x94>)
 800edea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800edee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800edf0:	4b1a      	ldr	r3, [pc, #104]	; (800ee5c <USBD_LL_Init+0x94>)
 800edf2:	2204      	movs	r2, #4
 800edf4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800edf6:	4b19      	ldr	r3, [pc, #100]	; (800ee5c <USBD_LL_Init+0x94>)
 800edf8:	2202      	movs	r2, #2
 800edfa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800edfc:	4b17      	ldr	r3, [pc, #92]	; (800ee5c <USBD_LL_Init+0x94>)
 800edfe:	2200      	movs	r2, #0
 800ee00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ee02:	4b16      	ldr	r3, [pc, #88]	; (800ee5c <USBD_LL_Init+0x94>)
 800ee04:	2202      	movs	r2, #2
 800ee06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ee08:	4b14      	ldr	r3, [pc, #80]	; (800ee5c <USBD_LL_Init+0x94>)
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ee0e:	4b13      	ldr	r3, [pc, #76]	; (800ee5c <USBD_LL_Init+0x94>)
 800ee10:	2200      	movs	r2, #0
 800ee12:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ee14:	4b11      	ldr	r3, [pc, #68]	; (800ee5c <USBD_LL_Init+0x94>)
 800ee16:	2200      	movs	r2, #0
 800ee18:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ee1a:	4b10      	ldr	r3, [pc, #64]	; (800ee5c <USBD_LL_Init+0x94>)
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ee20:	4b0e      	ldr	r3, [pc, #56]	; (800ee5c <USBD_LL_Init+0x94>)
 800ee22:	2200      	movs	r2, #0
 800ee24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ee26:	480d      	ldr	r0, [pc, #52]	; (800ee5c <USBD_LL_Init+0x94>)
 800ee28:	f7f3 ffd7 	bl	8002dda <HAL_PCD_Init>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d001      	beq.n	800ee36 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ee32:	f7f2 fa5f 	bl	80012f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ee36:	2180      	movs	r1, #128	; 0x80
 800ee38:	4808      	ldr	r0, [pc, #32]	; (800ee5c <USBD_LL_Init+0x94>)
 800ee3a:	f7f5 f962 	bl	8004102 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ee3e:	2240      	movs	r2, #64	; 0x40
 800ee40:	2100      	movs	r1, #0
 800ee42:	4806      	ldr	r0, [pc, #24]	; (800ee5c <USBD_LL_Init+0x94>)
 800ee44:	f7f5 f916 	bl	8004074 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ee48:	2280      	movs	r2, #128	; 0x80
 800ee4a:	2101      	movs	r1, #1
 800ee4c:	4803      	ldr	r0, [pc, #12]	; (800ee5c <USBD_LL_Init+0x94>)
 800ee4e:	f7f5 f911 	bl	8004074 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ee52:	2300      	movs	r3, #0
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3708      	adds	r7, #8
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	2000149c 	.word	0x2000149c

0800ee60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7f4 f8cc 	bl	8003014 <HAL_PCD_Start>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee80:	7bfb      	ldrb	r3, [r7, #15]
 800ee82:	4618      	mov	r0, r3
 800ee84:	f000 f94a 	bl	800f11c <USBD_Get_USB_Status>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3710      	adds	r7, #16
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}

0800ee96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ee96:	b580      	push	{r7, lr}
 800ee98:	b084      	sub	sp, #16
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	6078      	str	r0, [r7, #4]
 800ee9e:	4608      	mov	r0, r1
 800eea0:	4611      	mov	r1, r2
 800eea2:	461a      	mov	r2, r3
 800eea4:	4603      	mov	r3, r0
 800eea6:	70fb      	strb	r3, [r7, #3]
 800eea8:	460b      	mov	r3, r1
 800eeaa:	70bb      	strb	r3, [r7, #2]
 800eeac:	4613      	mov	r3, r2
 800eeae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eebe:	78bb      	ldrb	r3, [r7, #2]
 800eec0:	883a      	ldrh	r2, [r7, #0]
 800eec2:	78f9      	ldrb	r1, [r7, #3]
 800eec4:	f7f4 fcb0 	bl	8003828 <HAL_PCD_EP_Open>
 800eec8:	4603      	mov	r3, r0
 800eeca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eecc:	7bfb      	ldrb	r3, [r7, #15]
 800eece:	4618      	mov	r0, r3
 800eed0:	f000 f924 	bl	800f11c <USBD_Get_USB_Status>
 800eed4:	4603      	mov	r3, r0
 800eed6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eed8:	7bbb      	ldrb	r3, [r7, #14]
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	3710      	adds	r7, #16
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}

0800eee2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eee2:	b580      	push	{r7, lr}
 800eee4:	b084      	sub	sp, #16
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
 800eeea:	460b      	mov	r3, r1
 800eeec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eeee:	2300      	movs	r3, #0
 800eef0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eef2:	2300      	movs	r3, #0
 800eef4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eefc:	78fa      	ldrb	r2, [r7, #3]
 800eefe:	4611      	mov	r1, r2
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7f4 fcf9 	bl	80038f8 <HAL_PCD_EP_Close>
 800ef06:	4603      	mov	r3, r0
 800ef08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef0a:	7bfb      	ldrb	r3, [r7, #15]
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f000 f905 	bl	800f11c <USBD_Get_USB_Status>
 800ef12:	4603      	mov	r3, r0
 800ef14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3710      	adds	r7, #16
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b084      	sub	sp, #16
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	460b      	mov	r3, r1
 800ef2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef30:	2300      	movs	r3, #0
 800ef32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ef3a:	78fa      	ldrb	r2, [r7, #3]
 800ef3c:	4611      	mov	r1, r2
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7f4 fe8b 	bl	8003c5a <HAL_PCD_EP_Flush>
 800ef44:	4603      	mov	r3, r0
 800ef46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef48:	7bfb      	ldrb	r3, [r7, #15]
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f000 f8e6 	bl	800f11c <USBD_Get_USB_Status>
 800ef50:	4603      	mov	r3, r0
 800ef52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef54:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3710      	adds	r7, #16
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}

0800ef5e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef5e:	b580      	push	{r7, lr}
 800ef60:	b084      	sub	sp, #16
 800ef62:	af00      	add	r7, sp, #0
 800ef64:	6078      	str	r0, [r7, #4]
 800ef66:	460b      	mov	r3, r1
 800ef68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ef78:	78fa      	ldrb	r2, [r7, #3]
 800ef7a:	4611      	mov	r1, r2
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7f4 fdb2 	bl	8003ae6 <HAL_PCD_EP_SetStall>
 800ef82:	4603      	mov	r3, r0
 800ef84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef86:	7bfb      	ldrb	r3, [r7, #15]
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f000 f8c7 	bl	800f11c <USBD_Get_USB_Status>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3710      	adds	r7, #16
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}

0800ef9c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	460b      	mov	r3, r1
 800efa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efa8:	2300      	movs	r3, #0
 800efaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efac:	2300      	movs	r3, #0
 800efae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800efb6:	78fa      	ldrb	r2, [r7, #3]
 800efb8:	4611      	mov	r1, r2
 800efba:	4618      	mov	r0, r3
 800efbc:	f7f4 fdf7 	bl	8003bae <HAL_PCD_EP_ClrStall>
 800efc0:	4603      	mov	r3, r0
 800efc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efc4:	7bfb      	ldrb	r3, [r7, #15]
 800efc6:	4618      	mov	r0, r3
 800efc8:	f000 f8a8 	bl	800f11c <USBD_Get_USB_Status>
 800efcc:	4603      	mov	r3, r0
 800efce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3710      	adds	r7, #16
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}

0800efda <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800efda:	b480      	push	{r7}
 800efdc:	b085      	sub	sp, #20
 800efde:	af00      	add	r7, sp, #0
 800efe0:	6078      	str	r0, [r7, #4]
 800efe2:	460b      	mov	r3, r1
 800efe4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800efec:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800efee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	da0b      	bge.n	800f00e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eff6:	78fb      	ldrb	r3, [r7, #3]
 800eff8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800effc:	68f9      	ldr	r1, [r7, #12]
 800effe:	4613      	mov	r3, r2
 800f000:	00db      	lsls	r3, r3, #3
 800f002:	1a9b      	subs	r3, r3, r2
 800f004:	009b      	lsls	r3, r3, #2
 800f006:	440b      	add	r3, r1
 800f008:	333e      	adds	r3, #62	; 0x3e
 800f00a:	781b      	ldrb	r3, [r3, #0]
 800f00c:	e00b      	b.n	800f026 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f00e:	78fb      	ldrb	r3, [r7, #3]
 800f010:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f014:	68f9      	ldr	r1, [r7, #12]
 800f016:	4613      	mov	r3, r2
 800f018:	00db      	lsls	r3, r3, #3
 800f01a:	1a9b      	subs	r3, r3, r2
 800f01c:	009b      	lsls	r3, r3, #2
 800f01e:	440b      	add	r3, r1
 800f020:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f024:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f026:	4618      	mov	r0, r3
 800f028:	3714      	adds	r7, #20
 800f02a:	46bd      	mov	sp, r7
 800f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f030:	4770      	bx	lr

0800f032 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f032:	b580      	push	{r7, lr}
 800f034:	b084      	sub	sp, #16
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
 800f03a:	460b      	mov	r3, r1
 800f03c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f03e:	2300      	movs	r3, #0
 800f040:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f042:	2300      	movs	r3, #0
 800f044:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f04c:	78fa      	ldrb	r2, [r7, #3]
 800f04e:	4611      	mov	r1, r2
 800f050:	4618      	mov	r0, r3
 800f052:	f7f4 fbc4 	bl	80037de <HAL_PCD_SetAddress>
 800f056:	4603      	mov	r3, r0
 800f058:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f05a:	7bfb      	ldrb	r3, [r7, #15]
 800f05c:	4618      	mov	r0, r3
 800f05e:	f000 f85d 	bl	800f11c <USBD_Get_USB_Status>
 800f062:	4603      	mov	r3, r0
 800f064:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f066:	7bbb      	ldrb	r3, [r7, #14]
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3710      	adds	r7, #16
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b086      	sub	sp, #24
 800f074:	af00      	add	r7, sp, #0
 800f076:	60f8      	str	r0, [r7, #12]
 800f078:	607a      	str	r2, [r7, #4]
 800f07a:	603b      	str	r3, [r7, #0]
 800f07c:	460b      	mov	r3, r1
 800f07e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f080:	2300      	movs	r3, #0
 800f082:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f084:	2300      	movs	r3, #0
 800f086:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f08e:	7af9      	ldrb	r1, [r7, #11]
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	687a      	ldr	r2, [r7, #4]
 800f094:	f7f4 fcdd 	bl	8003a52 <HAL_PCD_EP_Transmit>
 800f098:	4603      	mov	r3, r0
 800f09a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f09c:	7dfb      	ldrb	r3, [r7, #23]
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f000 f83c 	bl	800f11c <USBD_Get_USB_Status>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f0a8:	7dbb      	ldrb	r3, [r7, #22]
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	3718      	adds	r7, #24
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}

0800f0b2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f0b2:	b580      	push	{r7, lr}
 800f0b4:	b086      	sub	sp, #24
 800f0b6:	af00      	add	r7, sp, #0
 800f0b8:	60f8      	str	r0, [r7, #12]
 800f0ba:	607a      	str	r2, [r7, #4]
 800f0bc:	603b      	str	r3, [r7, #0]
 800f0be:	460b      	mov	r3, r1
 800f0c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f0d0:	7af9      	ldrb	r1, [r7, #11]
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	687a      	ldr	r2, [r7, #4]
 800f0d6:	f7f4 fc59 	bl	800398c <HAL_PCD_EP_Receive>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0de:	7dfb      	ldrb	r3, [r7, #23]
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f000 f81b 	bl	800f11c <USBD_Get_USB_Status>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f0ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3718      	adds	r7, #24
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}

0800f0f4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	460b      	mov	r3, r1
 800f0fe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f106:	78fa      	ldrb	r2, [r7, #3]
 800f108:	4611      	mov	r1, r2
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7f4 fc89 	bl	8003a22 <HAL_PCD_EP_GetRxCount>
 800f110:	4603      	mov	r3, r0
}
 800f112:	4618      	mov	r0, r3
 800f114:	3708      	adds	r7, #8
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}
	...

0800f11c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f11c:	b480      	push	{r7}
 800f11e:	b085      	sub	sp, #20
 800f120:	af00      	add	r7, sp, #0
 800f122:	4603      	mov	r3, r0
 800f124:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f126:	2300      	movs	r3, #0
 800f128:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f12a:	79fb      	ldrb	r3, [r7, #7]
 800f12c:	2b03      	cmp	r3, #3
 800f12e:	d817      	bhi.n	800f160 <USBD_Get_USB_Status+0x44>
 800f130:	a201      	add	r2, pc, #4	; (adr r2, 800f138 <USBD_Get_USB_Status+0x1c>)
 800f132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f136:	bf00      	nop
 800f138:	0800f149 	.word	0x0800f149
 800f13c:	0800f14f 	.word	0x0800f14f
 800f140:	0800f155 	.word	0x0800f155
 800f144:	0800f15b 	.word	0x0800f15b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f148:	2300      	movs	r3, #0
 800f14a:	73fb      	strb	r3, [r7, #15]
    break;
 800f14c:	e00b      	b.n	800f166 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f14e:	2303      	movs	r3, #3
 800f150:	73fb      	strb	r3, [r7, #15]
    break;
 800f152:	e008      	b.n	800f166 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f154:	2301      	movs	r3, #1
 800f156:	73fb      	strb	r3, [r7, #15]
    break;
 800f158:	e005      	b.n	800f166 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f15a:	2303      	movs	r3, #3
 800f15c:	73fb      	strb	r3, [r7, #15]
    break;
 800f15e:	e002      	b.n	800f166 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f160:	2303      	movs	r3, #3
 800f162:	73fb      	strb	r3, [r7, #15]
    break;
 800f164:	bf00      	nop
  }
  return usb_status;
 800f166:	7bfb      	ldrb	r3, [r7, #15]
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3714      	adds	r7, #20
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr

0800f174 <__errno>:
 800f174:	4b01      	ldr	r3, [pc, #4]	; (800f17c <__errno+0x8>)
 800f176:	6818      	ldr	r0, [r3, #0]
 800f178:	4770      	bx	lr
 800f17a:	bf00      	nop
 800f17c:	20000164 	.word	0x20000164

0800f180 <__libc_init_array>:
 800f180:	b570      	push	{r4, r5, r6, lr}
 800f182:	4e0d      	ldr	r6, [pc, #52]	; (800f1b8 <__libc_init_array+0x38>)
 800f184:	4c0d      	ldr	r4, [pc, #52]	; (800f1bc <__libc_init_array+0x3c>)
 800f186:	1ba4      	subs	r4, r4, r6
 800f188:	10a4      	asrs	r4, r4, #2
 800f18a:	2500      	movs	r5, #0
 800f18c:	42a5      	cmp	r5, r4
 800f18e:	d109      	bne.n	800f1a4 <__libc_init_array+0x24>
 800f190:	4e0b      	ldr	r6, [pc, #44]	; (800f1c0 <__libc_init_array+0x40>)
 800f192:	4c0c      	ldr	r4, [pc, #48]	; (800f1c4 <__libc_init_array+0x44>)
 800f194:	f001 fd9c 	bl	8010cd0 <_init>
 800f198:	1ba4      	subs	r4, r4, r6
 800f19a:	10a4      	asrs	r4, r4, #2
 800f19c:	2500      	movs	r5, #0
 800f19e:	42a5      	cmp	r5, r4
 800f1a0:	d105      	bne.n	800f1ae <__libc_init_array+0x2e>
 800f1a2:	bd70      	pop	{r4, r5, r6, pc}
 800f1a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f1a8:	4798      	blx	r3
 800f1aa:	3501      	adds	r5, #1
 800f1ac:	e7ee      	b.n	800f18c <__libc_init_array+0xc>
 800f1ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f1b2:	4798      	blx	r3
 800f1b4:	3501      	adds	r5, #1
 800f1b6:	e7f2      	b.n	800f19e <__libc_init_array+0x1e>
 800f1b8:	08011448 	.word	0x08011448
 800f1bc:	08011448 	.word	0x08011448
 800f1c0:	08011448 	.word	0x08011448
 800f1c4:	0801144c 	.word	0x0801144c

0800f1c8 <malloc>:
 800f1c8:	4b02      	ldr	r3, [pc, #8]	; (800f1d4 <malloc+0xc>)
 800f1ca:	4601      	mov	r1, r0
 800f1cc:	6818      	ldr	r0, [r3, #0]
 800f1ce:	f000 b861 	b.w	800f294 <_malloc_r>
 800f1d2:	bf00      	nop
 800f1d4:	20000164 	.word	0x20000164

0800f1d8 <free>:
 800f1d8:	4b02      	ldr	r3, [pc, #8]	; (800f1e4 <free+0xc>)
 800f1da:	4601      	mov	r1, r0
 800f1dc:	6818      	ldr	r0, [r3, #0]
 800f1de:	f000 b80b 	b.w	800f1f8 <_free_r>
 800f1e2:	bf00      	nop
 800f1e4:	20000164 	.word	0x20000164

0800f1e8 <memset>:
 800f1e8:	4402      	add	r2, r0
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d100      	bne.n	800f1f2 <memset+0xa>
 800f1f0:	4770      	bx	lr
 800f1f2:	f803 1b01 	strb.w	r1, [r3], #1
 800f1f6:	e7f9      	b.n	800f1ec <memset+0x4>

0800f1f8 <_free_r>:
 800f1f8:	b538      	push	{r3, r4, r5, lr}
 800f1fa:	4605      	mov	r5, r0
 800f1fc:	2900      	cmp	r1, #0
 800f1fe:	d045      	beq.n	800f28c <_free_r+0x94>
 800f200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f204:	1f0c      	subs	r4, r1, #4
 800f206:	2b00      	cmp	r3, #0
 800f208:	bfb8      	it	lt
 800f20a:	18e4      	addlt	r4, r4, r3
 800f20c:	f001 fa55 	bl	80106ba <__malloc_lock>
 800f210:	4a1f      	ldr	r2, [pc, #124]	; (800f290 <_free_r+0x98>)
 800f212:	6813      	ldr	r3, [r2, #0]
 800f214:	4610      	mov	r0, r2
 800f216:	b933      	cbnz	r3, 800f226 <_free_r+0x2e>
 800f218:	6063      	str	r3, [r4, #4]
 800f21a:	6014      	str	r4, [r2, #0]
 800f21c:	4628      	mov	r0, r5
 800f21e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f222:	f001 ba4b 	b.w	80106bc <__malloc_unlock>
 800f226:	42a3      	cmp	r3, r4
 800f228:	d90c      	bls.n	800f244 <_free_r+0x4c>
 800f22a:	6821      	ldr	r1, [r4, #0]
 800f22c:	1862      	adds	r2, r4, r1
 800f22e:	4293      	cmp	r3, r2
 800f230:	bf04      	itt	eq
 800f232:	681a      	ldreq	r2, [r3, #0]
 800f234:	685b      	ldreq	r3, [r3, #4]
 800f236:	6063      	str	r3, [r4, #4]
 800f238:	bf04      	itt	eq
 800f23a:	1852      	addeq	r2, r2, r1
 800f23c:	6022      	streq	r2, [r4, #0]
 800f23e:	6004      	str	r4, [r0, #0]
 800f240:	e7ec      	b.n	800f21c <_free_r+0x24>
 800f242:	4613      	mov	r3, r2
 800f244:	685a      	ldr	r2, [r3, #4]
 800f246:	b10a      	cbz	r2, 800f24c <_free_r+0x54>
 800f248:	42a2      	cmp	r2, r4
 800f24a:	d9fa      	bls.n	800f242 <_free_r+0x4a>
 800f24c:	6819      	ldr	r1, [r3, #0]
 800f24e:	1858      	adds	r0, r3, r1
 800f250:	42a0      	cmp	r0, r4
 800f252:	d10b      	bne.n	800f26c <_free_r+0x74>
 800f254:	6820      	ldr	r0, [r4, #0]
 800f256:	4401      	add	r1, r0
 800f258:	1858      	adds	r0, r3, r1
 800f25a:	4282      	cmp	r2, r0
 800f25c:	6019      	str	r1, [r3, #0]
 800f25e:	d1dd      	bne.n	800f21c <_free_r+0x24>
 800f260:	6810      	ldr	r0, [r2, #0]
 800f262:	6852      	ldr	r2, [r2, #4]
 800f264:	605a      	str	r2, [r3, #4]
 800f266:	4401      	add	r1, r0
 800f268:	6019      	str	r1, [r3, #0]
 800f26a:	e7d7      	b.n	800f21c <_free_r+0x24>
 800f26c:	d902      	bls.n	800f274 <_free_r+0x7c>
 800f26e:	230c      	movs	r3, #12
 800f270:	602b      	str	r3, [r5, #0]
 800f272:	e7d3      	b.n	800f21c <_free_r+0x24>
 800f274:	6820      	ldr	r0, [r4, #0]
 800f276:	1821      	adds	r1, r4, r0
 800f278:	428a      	cmp	r2, r1
 800f27a:	bf04      	itt	eq
 800f27c:	6811      	ldreq	r1, [r2, #0]
 800f27e:	6852      	ldreq	r2, [r2, #4]
 800f280:	6062      	str	r2, [r4, #4]
 800f282:	bf04      	itt	eq
 800f284:	1809      	addeq	r1, r1, r0
 800f286:	6021      	streq	r1, [r4, #0]
 800f288:	605c      	str	r4, [r3, #4]
 800f28a:	e7c7      	b.n	800f21c <_free_r+0x24>
 800f28c:	bd38      	pop	{r3, r4, r5, pc}
 800f28e:	bf00      	nop
 800f290:	200004b8 	.word	0x200004b8

0800f294 <_malloc_r>:
 800f294:	b570      	push	{r4, r5, r6, lr}
 800f296:	1ccd      	adds	r5, r1, #3
 800f298:	f025 0503 	bic.w	r5, r5, #3
 800f29c:	3508      	adds	r5, #8
 800f29e:	2d0c      	cmp	r5, #12
 800f2a0:	bf38      	it	cc
 800f2a2:	250c      	movcc	r5, #12
 800f2a4:	2d00      	cmp	r5, #0
 800f2a6:	4606      	mov	r6, r0
 800f2a8:	db01      	blt.n	800f2ae <_malloc_r+0x1a>
 800f2aa:	42a9      	cmp	r1, r5
 800f2ac:	d903      	bls.n	800f2b6 <_malloc_r+0x22>
 800f2ae:	230c      	movs	r3, #12
 800f2b0:	6033      	str	r3, [r6, #0]
 800f2b2:	2000      	movs	r0, #0
 800f2b4:	bd70      	pop	{r4, r5, r6, pc}
 800f2b6:	f001 fa00 	bl	80106ba <__malloc_lock>
 800f2ba:	4a21      	ldr	r2, [pc, #132]	; (800f340 <_malloc_r+0xac>)
 800f2bc:	6814      	ldr	r4, [r2, #0]
 800f2be:	4621      	mov	r1, r4
 800f2c0:	b991      	cbnz	r1, 800f2e8 <_malloc_r+0x54>
 800f2c2:	4c20      	ldr	r4, [pc, #128]	; (800f344 <_malloc_r+0xb0>)
 800f2c4:	6823      	ldr	r3, [r4, #0]
 800f2c6:	b91b      	cbnz	r3, 800f2d0 <_malloc_r+0x3c>
 800f2c8:	4630      	mov	r0, r6
 800f2ca:	f000 fb87 	bl	800f9dc <_sbrk_r>
 800f2ce:	6020      	str	r0, [r4, #0]
 800f2d0:	4629      	mov	r1, r5
 800f2d2:	4630      	mov	r0, r6
 800f2d4:	f000 fb82 	bl	800f9dc <_sbrk_r>
 800f2d8:	1c43      	adds	r3, r0, #1
 800f2da:	d124      	bne.n	800f326 <_malloc_r+0x92>
 800f2dc:	230c      	movs	r3, #12
 800f2de:	6033      	str	r3, [r6, #0]
 800f2e0:	4630      	mov	r0, r6
 800f2e2:	f001 f9eb 	bl	80106bc <__malloc_unlock>
 800f2e6:	e7e4      	b.n	800f2b2 <_malloc_r+0x1e>
 800f2e8:	680b      	ldr	r3, [r1, #0]
 800f2ea:	1b5b      	subs	r3, r3, r5
 800f2ec:	d418      	bmi.n	800f320 <_malloc_r+0x8c>
 800f2ee:	2b0b      	cmp	r3, #11
 800f2f0:	d90f      	bls.n	800f312 <_malloc_r+0x7e>
 800f2f2:	600b      	str	r3, [r1, #0]
 800f2f4:	50cd      	str	r5, [r1, r3]
 800f2f6:	18cc      	adds	r4, r1, r3
 800f2f8:	4630      	mov	r0, r6
 800f2fa:	f001 f9df 	bl	80106bc <__malloc_unlock>
 800f2fe:	f104 000b 	add.w	r0, r4, #11
 800f302:	1d23      	adds	r3, r4, #4
 800f304:	f020 0007 	bic.w	r0, r0, #7
 800f308:	1ac3      	subs	r3, r0, r3
 800f30a:	d0d3      	beq.n	800f2b4 <_malloc_r+0x20>
 800f30c:	425a      	negs	r2, r3
 800f30e:	50e2      	str	r2, [r4, r3]
 800f310:	e7d0      	b.n	800f2b4 <_malloc_r+0x20>
 800f312:	428c      	cmp	r4, r1
 800f314:	684b      	ldr	r3, [r1, #4]
 800f316:	bf16      	itet	ne
 800f318:	6063      	strne	r3, [r4, #4]
 800f31a:	6013      	streq	r3, [r2, #0]
 800f31c:	460c      	movne	r4, r1
 800f31e:	e7eb      	b.n	800f2f8 <_malloc_r+0x64>
 800f320:	460c      	mov	r4, r1
 800f322:	6849      	ldr	r1, [r1, #4]
 800f324:	e7cc      	b.n	800f2c0 <_malloc_r+0x2c>
 800f326:	1cc4      	adds	r4, r0, #3
 800f328:	f024 0403 	bic.w	r4, r4, #3
 800f32c:	42a0      	cmp	r0, r4
 800f32e:	d005      	beq.n	800f33c <_malloc_r+0xa8>
 800f330:	1a21      	subs	r1, r4, r0
 800f332:	4630      	mov	r0, r6
 800f334:	f000 fb52 	bl	800f9dc <_sbrk_r>
 800f338:	3001      	adds	r0, #1
 800f33a:	d0cf      	beq.n	800f2dc <_malloc_r+0x48>
 800f33c:	6025      	str	r5, [r4, #0]
 800f33e:	e7db      	b.n	800f2f8 <_malloc_r+0x64>
 800f340:	200004b8 	.word	0x200004b8
 800f344:	200004bc 	.word	0x200004bc

0800f348 <__cvt>:
 800f348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f34c:	ec55 4b10 	vmov	r4, r5, d0
 800f350:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f352:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f356:	2d00      	cmp	r5, #0
 800f358:	460e      	mov	r6, r1
 800f35a:	4691      	mov	r9, r2
 800f35c:	4619      	mov	r1, r3
 800f35e:	bfb8      	it	lt
 800f360:	4622      	movlt	r2, r4
 800f362:	462b      	mov	r3, r5
 800f364:	f027 0720 	bic.w	r7, r7, #32
 800f368:	bfbb      	ittet	lt
 800f36a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f36e:	461d      	movlt	r5, r3
 800f370:	2300      	movge	r3, #0
 800f372:	232d      	movlt	r3, #45	; 0x2d
 800f374:	bfb8      	it	lt
 800f376:	4614      	movlt	r4, r2
 800f378:	2f46      	cmp	r7, #70	; 0x46
 800f37a:	700b      	strb	r3, [r1, #0]
 800f37c:	d004      	beq.n	800f388 <__cvt+0x40>
 800f37e:	2f45      	cmp	r7, #69	; 0x45
 800f380:	d100      	bne.n	800f384 <__cvt+0x3c>
 800f382:	3601      	adds	r6, #1
 800f384:	2102      	movs	r1, #2
 800f386:	e000      	b.n	800f38a <__cvt+0x42>
 800f388:	2103      	movs	r1, #3
 800f38a:	ab03      	add	r3, sp, #12
 800f38c:	9301      	str	r3, [sp, #4]
 800f38e:	ab02      	add	r3, sp, #8
 800f390:	9300      	str	r3, [sp, #0]
 800f392:	4632      	mov	r2, r6
 800f394:	4653      	mov	r3, sl
 800f396:	ec45 4b10 	vmov	d0, r4, r5
 800f39a:	f000 fbbd 	bl	800fb18 <_dtoa_r>
 800f39e:	2f47      	cmp	r7, #71	; 0x47
 800f3a0:	4680      	mov	r8, r0
 800f3a2:	d102      	bne.n	800f3aa <__cvt+0x62>
 800f3a4:	f019 0f01 	tst.w	r9, #1
 800f3a8:	d026      	beq.n	800f3f8 <__cvt+0xb0>
 800f3aa:	2f46      	cmp	r7, #70	; 0x46
 800f3ac:	eb08 0906 	add.w	r9, r8, r6
 800f3b0:	d111      	bne.n	800f3d6 <__cvt+0x8e>
 800f3b2:	f898 3000 	ldrb.w	r3, [r8]
 800f3b6:	2b30      	cmp	r3, #48	; 0x30
 800f3b8:	d10a      	bne.n	800f3d0 <__cvt+0x88>
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	2300      	movs	r3, #0
 800f3be:	4620      	mov	r0, r4
 800f3c0:	4629      	mov	r1, r5
 800f3c2:	f7f1 fb2d 	bl	8000a20 <__aeabi_dcmpeq>
 800f3c6:	b918      	cbnz	r0, 800f3d0 <__cvt+0x88>
 800f3c8:	f1c6 0601 	rsb	r6, r6, #1
 800f3cc:	f8ca 6000 	str.w	r6, [sl]
 800f3d0:	f8da 3000 	ldr.w	r3, [sl]
 800f3d4:	4499      	add	r9, r3
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	2300      	movs	r3, #0
 800f3da:	4620      	mov	r0, r4
 800f3dc:	4629      	mov	r1, r5
 800f3de:	f7f1 fb1f 	bl	8000a20 <__aeabi_dcmpeq>
 800f3e2:	b938      	cbnz	r0, 800f3f4 <__cvt+0xac>
 800f3e4:	2230      	movs	r2, #48	; 0x30
 800f3e6:	9b03      	ldr	r3, [sp, #12]
 800f3e8:	454b      	cmp	r3, r9
 800f3ea:	d205      	bcs.n	800f3f8 <__cvt+0xb0>
 800f3ec:	1c59      	adds	r1, r3, #1
 800f3ee:	9103      	str	r1, [sp, #12]
 800f3f0:	701a      	strb	r2, [r3, #0]
 800f3f2:	e7f8      	b.n	800f3e6 <__cvt+0x9e>
 800f3f4:	f8cd 900c 	str.w	r9, [sp, #12]
 800f3f8:	9b03      	ldr	r3, [sp, #12]
 800f3fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f3fc:	eba3 0308 	sub.w	r3, r3, r8
 800f400:	4640      	mov	r0, r8
 800f402:	6013      	str	r3, [r2, #0]
 800f404:	b004      	add	sp, #16
 800f406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f40a <__exponent>:
 800f40a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f40c:	2900      	cmp	r1, #0
 800f40e:	4604      	mov	r4, r0
 800f410:	bfba      	itte	lt
 800f412:	4249      	neglt	r1, r1
 800f414:	232d      	movlt	r3, #45	; 0x2d
 800f416:	232b      	movge	r3, #43	; 0x2b
 800f418:	2909      	cmp	r1, #9
 800f41a:	f804 2b02 	strb.w	r2, [r4], #2
 800f41e:	7043      	strb	r3, [r0, #1]
 800f420:	dd20      	ble.n	800f464 <__exponent+0x5a>
 800f422:	f10d 0307 	add.w	r3, sp, #7
 800f426:	461f      	mov	r7, r3
 800f428:	260a      	movs	r6, #10
 800f42a:	fb91 f5f6 	sdiv	r5, r1, r6
 800f42e:	fb06 1115 	mls	r1, r6, r5, r1
 800f432:	3130      	adds	r1, #48	; 0x30
 800f434:	2d09      	cmp	r5, #9
 800f436:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f43a:	f103 32ff 	add.w	r2, r3, #4294967295
 800f43e:	4629      	mov	r1, r5
 800f440:	dc09      	bgt.n	800f456 <__exponent+0x4c>
 800f442:	3130      	adds	r1, #48	; 0x30
 800f444:	3b02      	subs	r3, #2
 800f446:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f44a:	42bb      	cmp	r3, r7
 800f44c:	4622      	mov	r2, r4
 800f44e:	d304      	bcc.n	800f45a <__exponent+0x50>
 800f450:	1a10      	subs	r0, r2, r0
 800f452:	b003      	add	sp, #12
 800f454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f456:	4613      	mov	r3, r2
 800f458:	e7e7      	b.n	800f42a <__exponent+0x20>
 800f45a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f45e:	f804 2b01 	strb.w	r2, [r4], #1
 800f462:	e7f2      	b.n	800f44a <__exponent+0x40>
 800f464:	2330      	movs	r3, #48	; 0x30
 800f466:	4419      	add	r1, r3
 800f468:	7083      	strb	r3, [r0, #2]
 800f46a:	1d02      	adds	r2, r0, #4
 800f46c:	70c1      	strb	r1, [r0, #3]
 800f46e:	e7ef      	b.n	800f450 <__exponent+0x46>

0800f470 <_printf_float>:
 800f470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f474:	b08d      	sub	sp, #52	; 0x34
 800f476:	460c      	mov	r4, r1
 800f478:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800f47c:	4616      	mov	r6, r2
 800f47e:	461f      	mov	r7, r3
 800f480:	4605      	mov	r5, r0
 800f482:	f001 f901 	bl	8010688 <_localeconv_r>
 800f486:	6803      	ldr	r3, [r0, #0]
 800f488:	9304      	str	r3, [sp, #16]
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7f0 fe9c 	bl	80001c8 <strlen>
 800f490:	2300      	movs	r3, #0
 800f492:	930a      	str	r3, [sp, #40]	; 0x28
 800f494:	f8d8 3000 	ldr.w	r3, [r8]
 800f498:	9005      	str	r0, [sp, #20]
 800f49a:	3307      	adds	r3, #7
 800f49c:	f023 0307 	bic.w	r3, r3, #7
 800f4a0:	f103 0208 	add.w	r2, r3, #8
 800f4a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f4a8:	f8d4 b000 	ldr.w	fp, [r4]
 800f4ac:	f8c8 2000 	str.w	r2, [r8]
 800f4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f4b8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f4bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f4c0:	9307      	str	r3, [sp, #28]
 800f4c2:	f8cd 8018 	str.w	r8, [sp, #24]
 800f4c6:	f04f 32ff 	mov.w	r2, #4294967295
 800f4ca:	4ba7      	ldr	r3, [pc, #668]	; (800f768 <_printf_float+0x2f8>)
 800f4cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f4d0:	f7f1 fad8 	bl	8000a84 <__aeabi_dcmpun>
 800f4d4:	bb70      	cbnz	r0, 800f534 <_printf_float+0xc4>
 800f4d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f4da:	4ba3      	ldr	r3, [pc, #652]	; (800f768 <_printf_float+0x2f8>)
 800f4dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f4e0:	f7f1 fab2 	bl	8000a48 <__aeabi_dcmple>
 800f4e4:	bb30      	cbnz	r0, 800f534 <_printf_float+0xc4>
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	4640      	mov	r0, r8
 800f4ec:	4649      	mov	r1, r9
 800f4ee:	f7f1 faa1 	bl	8000a34 <__aeabi_dcmplt>
 800f4f2:	b110      	cbz	r0, 800f4fa <_printf_float+0x8a>
 800f4f4:	232d      	movs	r3, #45	; 0x2d
 800f4f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4fa:	4a9c      	ldr	r2, [pc, #624]	; (800f76c <_printf_float+0x2fc>)
 800f4fc:	4b9c      	ldr	r3, [pc, #624]	; (800f770 <_printf_float+0x300>)
 800f4fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f502:	bf8c      	ite	hi
 800f504:	4690      	movhi	r8, r2
 800f506:	4698      	movls	r8, r3
 800f508:	2303      	movs	r3, #3
 800f50a:	f02b 0204 	bic.w	r2, fp, #4
 800f50e:	6123      	str	r3, [r4, #16]
 800f510:	6022      	str	r2, [r4, #0]
 800f512:	f04f 0900 	mov.w	r9, #0
 800f516:	9700      	str	r7, [sp, #0]
 800f518:	4633      	mov	r3, r6
 800f51a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f51c:	4621      	mov	r1, r4
 800f51e:	4628      	mov	r0, r5
 800f520:	f000 f9e6 	bl	800f8f0 <_printf_common>
 800f524:	3001      	adds	r0, #1
 800f526:	f040 808d 	bne.w	800f644 <_printf_float+0x1d4>
 800f52a:	f04f 30ff 	mov.w	r0, #4294967295
 800f52e:	b00d      	add	sp, #52	; 0x34
 800f530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f534:	4642      	mov	r2, r8
 800f536:	464b      	mov	r3, r9
 800f538:	4640      	mov	r0, r8
 800f53a:	4649      	mov	r1, r9
 800f53c:	f7f1 faa2 	bl	8000a84 <__aeabi_dcmpun>
 800f540:	b110      	cbz	r0, 800f548 <_printf_float+0xd8>
 800f542:	4a8c      	ldr	r2, [pc, #560]	; (800f774 <_printf_float+0x304>)
 800f544:	4b8c      	ldr	r3, [pc, #560]	; (800f778 <_printf_float+0x308>)
 800f546:	e7da      	b.n	800f4fe <_printf_float+0x8e>
 800f548:	6861      	ldr	r1, [r4, #4]
 800f54a:	1c4b      	adds	r3, r1, #1
 800f54c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800f550:	a80a      	add	r0, sp, #40	; 0x28
 800f552:	d13e      	bne.n	800f5d2 <_printf_float+0x162>
 800f554:	2306      	movs	r3, #6
 800f556:	6063      	str	r3, [r4, #4]
 800f558:	2300      	movs	r3, #0
 800f55a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f55e:	ab09      	add	r3, sp, #36	; 0x24
 800f560:	9300      	str	r3, [sp, #0]
 800f562:	ec49 8b10 	vmov	d0, r8, r9
 800f566:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f56a:	6022      	str	r2, [r4, #0]
 800f56c:	f8cd a004 	str.w	sl, [sp, #4]
 800f570:	6861      	ldr	r1, [r4, #4]
 800f572:	4628      	mov	r0, r5
 800f574:	f7ff fee8 	bl	800f348 <__cvt>
 800f578:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800f57c:	2b47      	cmp	r3, #71	; 0x47
 800f57e:	4680      	mov	r8, r0
 800f580:	d109      	bne.n	800f596 <_printf_float+0x126>
 800f582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f584:	1cd8      	adds	r0, r3, #3
 800f586:	db02      	blt.n	800f58e <_printf_float+0x11e>
 800f588:	6862      	ldr	r2, [r4, #4]
 800f58a:	4293      	cmp	r3, r2
 800f58c:	dd47      	ble.n	800f61e <_printf_float+0x1ae>
 800f58e:	f1aa 0a02 	sub.w	sl, sl, #2
 800f592:	fa5f fa8a 	uxtb.w	sl, sl
 800f596:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f59a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f59c:	d824      	bhi.n	800f5e8 <_printf_float+0x178>
 800f59e:	3901      	subs	r1, #1
 800f5a0:	4652      	mov	r2, sl
 800f5a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f5a6:	9109      	str	r1, [sp, #36]	; 0x24
 800f5a8:	f7ff ff2f 	bl	800f40a <__exponent>
 800f5ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5ae:	1813      	adds	r3, r2, r0
 800f5b0:	2a01      	cmp	r2, #1
 800f5b2:	4681      	mov	r9, r0
 800f5b4:	6123      	str	r3, [r4, #16]
 800f5b6:	dc02      	bgt.n	800f5be <_printf_float+0x14e>
 800f5b8:	6822      	ldr	r2, [r4, #0]
 800f5ba:	07d1      	lsls	r1, r2, #31
 800f5bc:	d501      	bpl.n	800f5c2 <_printf_float+0x152>
 800f5be:	3301      	adds	r3, #1
 800f5c0:	6123      	str	r3, [r4, #16]
 800f5c2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d0a5      	beq.n	800f516 <_printf_float+0xa6>
 800f5ca:	232d      	movs	r3, #45	; 0x2d
 800f5cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5d0:	e7a1      	b.n	800f516 <_printf_float+0xa6>
 800f5d2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800f5d6:	f000 8177 	beq.w	800f8c8 <_printf_float+0x458>
 800f5da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f5de:	d1bb      	bne.n	800f558 <_printf_float+0xe8>
 800f5e0:	2900      	cmp	r1, #0
 800f5e2:	d1b9      	bne.n	800f558 <_printf_float+0xe8>
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	e7b6      	b.n	800f556 <_printf_float+0xe6>
 800f5e8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800f5ec:	d119      	bne.n	800f622 <_printf_float+0x1b2>
 800f5ee:	2900      	cmp	r1, #0
 800f5f0:	6863      	ldr	r3, [r4, #4]
 800f5f2:	dd0c      	ble.n	800f60e <_printf_float+0x19e>
 800f5f4:	6121      	str	r1, [r4, #16]
 800f5f6:	b913      	cbnz	r3, 800f5fe <_printf_float+0x18e>
 800f5f8:	6822      	ldr	r2, [r4, #0]
 800f5fa:	07d2      	lsls	r2, r2, #31
 800f5fc:	d502      	bpl.n	800f604 <_printf_float+0x194>
 800f5fe:	3301      	adds	r3, #1
 800f600:	440b      	add	r3, r1
 800f602:	6123      	str	r3, [r4, #16]
 800f604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f606:	65a3      	str	r3, [r4, #88]	; 0x58
 800f608:	f04f 0900 	mov.w	r9, #0
 800f60c:	e7d9      	b.n	800f5c2 <_printf_float+0x152>
 800f60e:	b913      	cbnz	r3, 800f616 <_printf_float+0x1a6>
 800f610:	6822      	ldr	r2, [r4, #0]
 800f612:	07d0      	lsls	r0, r2, #31
 800f614:	d501      	bpl.n	800f61a <_printf_float+0x1aa>
 800f616:	3302      	adds	r3, #2
 800f618:	e7f3      	b.n	800f602 <_printf_float+0x192>
 800f61a:	2301      	movs	r3, #1
 800f61c:	e7f1      	b.n	800f602 <_printf_float+0x192>
 800f61e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800f622:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f626:	4293      	cmp	r3, r2
 800f628:	db05      	blt.n	800f636 <_printf_float+0x1c6>
 800f62a:	6822      	ldr	r2, [r4, #0]
 800f62c:	6123      	str	r3, [r4, #16]
 800f62e:	07d1      	lsls	r1, r2, #31
 800f630:	d5e8      	bpl.n	800f604 <_printf_float+0x194>
 800f632:	3301      	adds	r3, #1
 800f634:	e7e5      	b.n	800f602 <_printf_float+0x192>
 800f636:	2b00      	cmp	r3, #0
 800f638:	bfd4      	ite	le
 800f63a:	f1c3 0302 	rsble	r3, r3, #2
 800f63e:	2301      	movgt	r3, #1
 800f640:	4413      	add	r3, r2
 800f642:	e7de      	b.n	800f602 <_printf_float+0x192>
 800f644:	6823      	ldr	r3, [r4, #0]
 800f646:	055a      	lsls	r2, r3, #21
 800f648:	d407      	bmi.n	800f65a <_printf_float+0x1ea>
 800f64a:	6923      	ldr	r3, [r4, #16]
 800f64c:	4642      	mov	r2, r8
 800f64e:	4631      	mov	r1, r6
 800f650:	4628      	mov	r0, r5
 800f652:	47b8      	blx	r7
 800f654:	3001      	adds	r0, #1
 800f656:	d12b      	bne.n	800f6b0 <_printf_float+0x240>
 800f658:	e767      	b.n	800f52a <_printf_float+0xba>
 800f65a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f65e:	f240 80dc 	bls.w	800f81a <_printf_float+0x3aa>
 800f662:	2200      	movs	r2, #0
 800f664:	2300      	movs	r3, #0
 800f666:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f66a:	f7f1 f9d9 	bl	8000a20 <__aeabi_dcmpeq>
 800f66e:	2800      	cmp	r0, #0
 800f670:	d033      	beq.n	800f6da <_printf_float+0x26a>
 800f672:	2301      	movs	r3, #1
 800f674:	4a41      	ldr	r2, [pc, #260]	; (800f77c <_printf_float+0x30c>)
 800f676:	4631      	mov	r1, r6
 800f678:	4628      	mov	r0, r5
 800f67a:	47b8      	blx	r7
 800f67c:	3001      	adds	r0, #1
 800f67e:	f43f af54 	beq.w	800f52a <_printf_float+0xba>
 800f682:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f686:	429a      	cmp	r2, r3
 800f688:	db02      	blt.n	800f690 <_printf_float+0x220>
 800f68a:	6823      	ldr	r3, [r4, #0]
 800f68c:	07d8      	lsls	r0, r3, #31
 800f68e:	d50f      	bpl.n	800f6b0 <_printf_float+0x240>
 800f690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f694:	4631      	mov	r1, r6
 800f696:	4628      	mov	r0, r5
 800f698:	47b8      	blx	r7
 800f69a:	3001      	adds	r0, #1
 800f69c:	f43f af45 	beq.w	800f52a <_printf_float+0xba>
 800f6a0:	f04f 0800 	mov.w	r8, #0
 800f6a4:	f104 091a 	add.w	r9, r4, #26
 800f6a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6aa:	3b01      	subs	r3, #1
 800f6ac:	4543      	cmp	r3, r8
 800f6ae:	dc09      	bgt.n	800f6c4 <_printf_float+0x254>
 800f6b0:	6823      	ldr	r3, [r4, #0]
 800f6b2:	079b      	lsls	r3, r3, #30
 800f6b4:	f100 8103 	bmi.w	800f8be <_printf_float+0x44e>
 800f6b8:	68e0      	ldr	r0, [r4, #12]
 800f6ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6bc:	4298      	cmp	r0, r3
 800f6be:	bfb8      	it	lt
 800f6c0:	4618      	movlt	r0, r3
 800f6c2:	e734      	b.n	800f52e <_printf_float+0xbe>
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	464a      	mov	r2, r9
 800f6c8:	4631      	mov	r1, r6
 800f6ca:	4628      	mov	r0, r5
 800f6cc:	47b8      	blx	r7
 800f6ce:	3001      	adds	r0, #1
 800f6d0:	f43f af2b 	beq.w	800f52a <_printf_float+0xba>
 800f6d4:	f108 0801 	add.w	r8, r8, #1
 800f6d8:	e7e6      	b.n	800f6a8 <_printf_float+0x238>
 800f6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	dc2b      	bgt.n	800f738 <_printf_float+0x2c8>
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	4a26      	ldr	r2, [pc, #152]	; (800f77c <_printf_float+0x30c>)
 800f6e4:	4631      	mov	r1, r6
 800f6e6:	4628      	mov	r0, r5
 800f6e8:	47b8      	blx	r7
 800f6ea:	3001      	adds	r0, #1
 800f6ec:	f43f af1d 	beq.w	800f52a <_printf_float+0xba>
 800f6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6f2:	b923      	cbnz	r3, 800f6fe <_printf_float+0x28e>
 800f6f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6f6:	b913      	cbnz	r3, 800f6fe <_printf_float+0x28e>
 800f6f8:	6823      	ldr	r3, [r4, #0]
 800f6fa:	07d9      	lsls	r1, r3, #31
 800f6fc:	d5d8      	bpl.n	800f6b0 <_printf_float+0x240>
 800f6fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f702:	4631      	mov	r1, r6
 800f704:	4628      	mov	r0, r5
 800f706:	47b8      	blx	r7
 800f708:	3001      	adds	r0, #1
 800f70a:	f43f af0e 	beq.w	800f52a <_printf_float+0xba>
 800f70e:	f04f 0900 	mov.w	r9, #0
 800f712:	f104 0a1a 	add.w	sl, r4, #26
 800f716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f718:	425b      	negs	r3, r3
 800f71a:	454b      	cmp	r3, r9
 800f71c:	dc01      	bgt.n	800f722 <_printf_float+0x2b2>
 800f71e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f720:	e794      	b.n	800f64c <_printf_float+0x1dc>
 800f722:	2301      	movs	r3, #1
 800f724:	4652      	mov	r2, sl
 800f726:	4631      	mov	r1, r6
 800f728:	4628      	mov	r0, r5
 800f72a:	47b8      	blx	r7
 800f72c:	3001      	adds	r0, #1
 800f72e:	f43f aefc 	beq.w	800f52a <_printf_float+0xba>
 800f732:	f109 0901 	add.w	r9, r9, #1
 800f736:	e7ee      	b.n	800f716 <_printf_float+0x2a6>
 800f738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f73a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f73c:	429a      	cmp	r2, r3
 800f73e:	bfa8      	it	ge
 800f740:	461a      	movge	r2, r3
 800f742:	2a00      	cmp	r2, #0
 800f744:	4691      	mov	r9, r2
 800f746:	dd07      	ble.n	800f758 <_printf_float+0x2e8>
 800f748:	4613      	mov	r3, r2
 800f74a:	4631      	mov	r1, r6
 800f74c:	4642      	mov	r2, r8
 800f74e:	4628      	mov	r0, r5
 800f750:	47b8      	blx	r7
 800f752:	3001      	adds	r0, #1
 800f754:	f43f aee9 	beq.w	800f52a <_printf_float+0xba>
 800f758:	f104 031a 	add.w	r3, r4, #26
 800f75c:	f04f 0b00 	mov.w	fp, #0
 800f760:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f764:	9306      	str	r3, [sp, #24]
 800f766:	e015      	b.n	800f794 <_printf_float+0x324>
 800f768:	7fefffff 	.word	0x7fefffff
 800f76c:	0801121c 	.word	0x0801121c
 800f770:	08011218 	.word	0x08011218
 800f774:	08011224 	.word	0x08011224
 800f778:	08011220 	.word	0x08011220
 800f77c:	08011228 	.word	0x08011228
 800f780:	2301      	movs	r3, #1
 800f782:	9a06      	ldr	r2, [sp, #24]
 800f784:	4631      	mov	r1, r6
 800f786:	4628      	mov	r0, r5
 800f788:	47b8      	blx	r7
 800f78a:	3001      	adds	r0, #1
 800f78c:	f43f aecd 	beq.w	800f52a <_printf_float+0xba>
 800f790:	f10b 0b01 	add.w	fp, fp, #1
 800f794:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f798:	ebaa 0309 	sub.w	r3, sl, r9
 800f79c:	455b      	cmp	r3, fp
 800f79e:	dcef      	bgt.n	800f780 <_printf_float+0x310>
 800f7a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	44d0      	add	r8, sl
 800f7a8:	db15      	blt.n	800f7d6 <_printf_float+0x366>
 800f7aa:	6823      	ldr	r3, [r4, #0]
 800f7ac:	07da      	lsls	r2, r3, #31
 800f7ae:	d412      	bmi.n	800f7d6 <_printf_float+0x366>
 800f7b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f7b4:	eba3 020a 	sub.w	r2, r3, sl
 800f7b8:	eba3 0a01 	sub.w	sl, r3, r1
 800f7bc:	4592      	cmp	sl, r2
 800f7be:	bfa8      	it	ge
 800f7c0:	4692      	movge	sl, r2
 800f7c2:	f1ba 0f00 	cmp.w	sl, #0
 800f7c6:	dc0e      	bgt.n	800f7e6 <_printf_float+0x376>
 800f7c8:	f04f 0800 	mov.w	r8, #0
 800f7cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f7d0:	f104 091a 	add.w	r9, r4, #26
 800f7d4:	e019      	b.n	800f80a <_printf_float+0x39a>
 800f7d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7da:	4631      	mov	r1, r6
 800f7dc:	4628      	mov	r0, r5
 800f7de:	47b8      	blx	r7
 800f7e0:	3001      	adds	r0, #1
 800f7e2:	d1e5      	bne.n	800f7b0 <_printf_float+0x340>
 800f7e4:	e6a1      	b.n	800f52a <_printf_float+0xba>
 800f7e6:	4653      	mov	r3, sl
 800f7e8:	4642      	mov	r2, r8
 800f7ea:	4631      	mov	r1, r6
 800f7ec:	4628      	mov	r0, r5
 800f7ee:	47b8      	blx	r7
 800f7f0:	3001      	adds	r0, #1
 800f7f2:	d1e9      	bne.n	800f7c8 <_printf_float+0x358>
 800f7f4:	e699      	b.n	800f52a <_printf_float+0xba>
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	464a      	mov	r2, r9
 800f7fa:	4631      	mov	r1, r6
 800f7fc:	4628      	mov	r0, r5
 800f7fe:	47b8      	blx	r7
 800f800:	3001      	adds	r0, #1
 800f802:	f43f ae92 	beq.w	800f52a <_printf_float+0xba>
 800f806:	f108 0801 	add.w	r8, r8, #1
 800f80a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f80e:	1a9b      	subs	r3, r3, r2
 800f810:	eba3 030a 	sub.w	r3, r3, sl
 800f814:	4543      	cmp	r3, r8
 800f816:	dcee      	bgt.n	800f7f6 <_printf_float+0x386>
 800f818:	e74a      	b.n	800f6b0 <_printf_float+0x240>
 800f81a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f81c:	2a01      	cmp	r2, #1
 800f81e:	dc01      	bgt.n	800f824 <_printf_float+0x3b4>
 800f820:	07db      	lsls	r3, r3, #31
 800f822:	d53a      	bpl.n	800f89a <_printf_float+0x42a>
 800f824:	2301      	movs	r3, #1
 800f826:	4642      	mov	r2, r8
 800f828:	4631      	mov	r1, r6
 800f82a:	4628      	mov	r0, r5
 800f82c:	47b8      	blx	r7
 800f82e:	3001      	adds	r0, #1
 800f830:	f43f ae7b 	beq.w	800f52a <_printf_float+0xba>
 800f834:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f838:	4631      	mov	r1, r6
 800f83a:	4628      	mov	r0, r5
 800f83c:	47b8      	blx	r7
 800f83e:	3001      	adds	r0, #1
 800f840:	f108 0801 	add.w	r8, r8, #1
 800f844:	f43f ae71 	beq.w	800f52a <_printf_float+0xba>
 800f848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f84a:	2200      	movs	r2, #0
 800f84c:	f103 3aff 	add.w	sl, r3, #4294967295
 800f850:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f854:	2300      	movs	r3, #0
 800f856:	f7f1 f8e3 	bl	8000a20 <__aeabi_dcmpeq>
 800f85a:	b9c8      	cbnz	r0, 800f890 <_printf_float+0x420>
 800f85c:	4653      	mov	r3, sl
 800f85e:	4642      	mov	r2, r8
 800f860:	4631      	mov	r1, r6
 800f862:	4628      	mov	r0, r5
 800f864:	47b8      	blx	r7
 800f866:	3001      	adds	r0, #1
 800f868:	d10e      	bne.n	800f888 <_printf_float+0x418>
 800f86a:	e65e      	b.n	800f52a <_printf_float+0xba>
 800f86c:	2301      	movs	r3, #1
 800f86e:	4652      	mov	r2, sl
 800f870:	4631      	mov	r1, r6
 800f872:	4628      	mov	r0, r5
 800f874:	47b8      	blx	r7
 800f876:	3001      	adds	r0, #1
 800f878:	f43f ae57 	beq.w	800f52a <_printf_float+0xba>
 800f87c:	f108 0801 	add.w	r8, r8, #1
 800f880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f882:	3b01      	subs	r3, #1
 800f884:	4543      	cmp	r3, r8
 800f886:	dcf1      	bgt.n	800f86c <_printf_float+0x3fc>
 800f888:	464b      	mov	r3, r9
 800f88a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f88e:	e6de      	b.n	800f64e <_printf_float+0x1de>
 800f890:	f04f 0800 	mov.w	r8, #0
 800f894:	f104 0a1a 	add.w	sl, r4, #26
 800f898:	e7f2      	b.n	800f880 <_printf_float+0x410>
 800f89a:	2301      	movs	r3, #1
 800f89c:	e7df      	b.n	800f85e <_printf_float+0x3ee>
 800f89e:	2301      	movs	r3, #1
 800f8a0:	464a      	mov	r2, r9
 800f8a2:	4631      	mov	r1, r6
 800f8a4:	4628      	mov	r0, r5
 800f8a6:	47b8      	blx	r7
 800f8a8:	3001      	adds	r0, #1
 800f8aa:	f43f ae3e 	beq.w	800f52a <_printf_float+0xba>
 800f8ae:	f108 0801 	add.w	r8, r8, #1
 800f8b2:	68e3      	ldr	r3, [r4, #12]
 800f8b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f8b6:	1a9b      	subs	r3, r3, r2
 800f8b8:	4543      	cmp	r3, r8
 800f8ba:	dcf0      	bgt.n	800f89e <_printf_float+0x42e>
 800f8bc:	e6fc      	b.n	800f6b8 <_printf_float+0x248>
 800f8be:	f04f 0800 	mov.w	r8, #0
 800f8c2:	f104 0919 	add.w	r9, r4, #25
 800f8c6:	e7f4      	b.n	800f8b2 <_printf_float+0x442>
 800f8c8:	2900      	cmp	r1, #0
 800f8ca:	f43f ae8b 	beq.w	800f5e4 <_printf_float+0x174>
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f8d4:	ab09      	add	r3, sp, #36	; 0x24
 800f8d6:	9300      	str	r3, [sp, #0]
 800f8d8:	ec49 8b10 	vmov	d0, r8, r9
 800f8dc:	6022      	str	r2, [r4, #0]
 800f8de:	f8cd a004 	str.w	sl, [sp, #4]
 800f8e2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f8e6:	4628      	mov	r0, r5
 800f8e8:	f7ff fd2e 	bl	800f348 <__cvt>
 800f8ec:	4680      	mov	r8, r0
 800f8ee:	e648      	b.n	800f582 <_printf_float+0x112>

0800f8f0 <_printf_common>:
 800f8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8f4:	4691      	mov	r9, r2
 800f8f6:	461f      	mov	r7, r3
 800f8f8:	688a      	ldr	r2, [r1, #8]
 800f8fa:	690b      	ldr	r3, [r1, #16]
 800f8fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f900:	4293      	cmp	r3, r2
 800f902:	bfb8      	it	lt
 800f904:	4613      	movlt	r3, r2
 800f906:	f8c9 3000 	str.w	r3, [r9]
 800f90a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f90e:	4606      	mov	r6, r0
 800f910:	460c      	mov	r4, r1
 800f912:	b112      	cbz	r2, 800f91a <_printf_common+0x2a>
 800f914:	3301      	adds	r3, #1
 800f916:	f8c9 3000 	str.w	r3, [r9]
 800f91a:	6823      	ldr	r3, [r4, #0]
 800f91c:	0699      	lsls	r1, r3, #26
 800f91e:	bf42      	ittt	mi
 800f920:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f924:	3302      	addmi	r3, #2
 800f926:	f8c9 3000 	strmi.w	r3, [r9]
 800f92a:	6825      	ldr	r5, [r4, #0]
 800f92c:	f015 0506 	ands.w	r5, r5, #6
 800f930:	d107      	bne.n	800f942 <_printf_common+0x52>
 800f932:	f104 0a19 	add.w	sl, r4, #25
 800f936:	68e3      	ldr	r3, [r4, #12]
 800f938:	f8d9 2000 	ldr.w	r2, [r9]
 800f93c:	1a9b      	subs	r3, r3, r2
 800f93e:	42ab      	cmp	r3, r5
 800f940:	dc28      	bgt.n	800f994 <_printf_common+0xa4>
 800f942:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f946:	6822      	ldr	r2, [r4, #0]
 800f948:	3300      	adds	r3, #0
 800f94a:	bf18      	it	ne
 800f94c:	2301      	movne	r3, #1
 800f94e:	0692      	lsls	r2, r2, #26
 800f950:	d42d      	bmi.n	800f9ae <_printf_common+0xbe>
 800f952:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f956:	4639      	mov	r1, r7
 800f958:	4630      	mov	r0, r6
 800f95a:	47c0      	blx	r8
 800f95c:	3001      	adds	r0, #1
 800f95e:	d020      	beq.n	800f9a2 <_printf_common+0xb2>
 800f960:	6823      	ldr	r3, [r4, #0]
 800f962:	68e5      	ldr	r5, [r4, #12]
 800f964:	f8d9 2000 	ldr.w	r2, [r9]
 800f968:	f003 0306 	and.w	r3, r3, #6
 800f96c:	2b04      	cmp	r3, #4
 800f96e:	bf08      	it	eq
 800f970:	1aad      	subeq	r5, r5, r2
 800f972:	68a3      	ldr	r3, [r4, #8]
 800f974:	6922      	ldr	r2, [r4, #16]
 800f976:	bf0c      	ite	eq
 800f978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f97c:	2500      	movne	r5, #0
 800f97e:	4293      	cmp	r3, r2
 800f980:	bfc4      	itt	gt
 800f982:	1a9b      	subgt	r3, r3, r2
 800f984:	18ed      	addgt	r5, r5, r3
 800f986:	f04f 0900 	mov.w	r9, #0
 800f98a:	341a      	adds	r4, #26
 800f98c:	454d      	cmp	r5, r9
 800f98e:	d11a      	bne.n	800f9c6 <_printf_common+0xd6>
 800f990:	2000      	movs	r0, #0
 800f992:	e008      	b.n	800f9a6 <_printf_common+0xb6>
 800f994:	2301      	movs	r3, #1
 800f996:	4652      	mov	r2, sl
 800f998:	4639      	mov	r1, r7
 800f99a:	4630      	mov	r0, r6
 800f99c:	47c0      	blx	r8
 800f99e:	3001      	adds	r0, #1
 800f9a0:	d103      	bne.n	800f9aa <_printf_common+0xba>
 800f9a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9aa:	3501      	adds	r5, #1
 800f9ac:	e7c3      	b.n	800f936 <_printf_common+0x46>
 800f9ae:	18e1      	adds	r1, r4, r3
 800f9b0:	1c5a      	adds	r2, r3, #1
 800f9b2:	2030      	movs	r0, #48	; 0x30
 800f9b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f9b8:	4422      	add	r2, r4
 800f9ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f9be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f9c2:	3302      	adds	r3, #2
 800f9c4:	e7c5      	b.n	800f952 <_printf_common+0x62>
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	4622      	mov	r2, r4
 800f9ca:	4639      	mov	r1, r7
 800f9cc:	4630      	mov	r0, r6
 800f9ce:	47c0      	blx	r8
 800f9d0:	3001      	adds	r0, #1
 800f9d2:	d0e6      	beq.n	800f9a2 <_printf_common+0xb2>
 800f9d4:	f109 0901 	add.w	r9, r9, #1
 800f9d8:	e7d8      	b.n	800f98c <_printf_common+0x9c>
	...

0800f9dc <_sbrk_r>:
 800f9dc:	b538      	push	{r3, r4, r5, lr}
 800f9de:	4c06      	ldr	r4, [pc, #24]	; (800f9f8 <_sbrk_r+0x1c>)
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	4605      	mov	r5, r0
 800f9e4:	4608      	mov	r0, r1
 800f9e6:	6023      	str	r3, [r4, #0]
 800f9e8:	f7f1 feac 	bl	8001744 <_sbrk>
 800f9ec:	1c43      	adds	r3, r0, #1
 800f9ee:	d102      	bne.n	800f9f6 <_sbrk_r+0x1a>
 800f9f0:	6823      	ldr	r3, [r4, #0]
 800f9f2:	b103      	cbz	r3, 800f9f6 <_sbrk_r+0x1a>
 800f9f4:	602b      	str	r3, [r5, #0]
 800f9f6:	bd38      	pop	{r3, r4, r5, pc}
 800f9f8:	200018a4 	.word	0x200018a4

0800f9fc <quorem>:
 800f9fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa00:	6903      	ldr	r3, [r0, #16]
 800fa02:	690c      	ldr	r4, [r1, #16]
 800fa04:	42a3      	cmp	r3, r4
 800fa06:	4680      	mov	r8, r0
 800fa08:	f2c0 8082 	blt.w	800fb10 <quorem+0x114>
 800fa0c:	3c01      	subs	r4, #1
 800fa0e:	f101 0714 	add.w	r7, r1, #20
 800fa12:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800fa16:	f100 0614 	add.w	r6, r0, #20
 800fa1a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800fa1e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800fa22:	eb06 030c 	add.w	r3, r6, ip
 800fa26:	3501      	adds	r5, #1
 800fa28:	eb07 090c 	add.w	r9, r7, ip
 800fa2c:	9301      	str	r3, [sp, #4]
 800fa2e:	fbb0 f5f5 	udiv	r5, r0, r5
 800fa32:	b395      	cbz	r5, 800fa9a <quorem+0x9e>
 800fa34:	f04f 0a00 	mov.w	sl, #0
 800fa38:	4638      	mov	r0, r7
 800fa3a:	46b6      	mov	lr, r6
 800fa3c:	46d3      	mov	fp, sl
 800fa3e:	f850 2b04 	ldr.w	r2, [r0], #4
 800fa42:	b293      	uxth	r3, r2
 800fa44:	fb05 a303 	mla	r3, r5, r3, sl
 800fa48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	ebab 0303 	sub.w	r3, fp, r3
 800fa52:	0c12      	lsrs	r2, r2, #16
 800fa54:	f8de b000 	ldr.w	fp, [lr]
 800fa58:	fb05 a202 	mla	r2, r5, r2, sl
 800fa5c:	fa13 f38b 	uxtah	r3, r3, fp
 800fa60:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800fa64:	fa1f fb82 	uxth.w	fp, r2
 800fa68:	f8de 2000 	ldr.w	r2, [lr]
 800fa6c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800fa70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fa74:	b29b      	uxth	r3, r3
 800fa76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa7a:	4581      	cmp	r9, r0
 800fa7c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800fa80:	f84e 3b04 	str.w	r3, [lr], #4
 800fa84:	d2db      	bcs.n	800fa3e <quorem+0x42>
 800fa86:	f856 300c 	ldr.w	r3, [r6, ip]
 800fa8a:	b933      	cbnz	r3, 800fa9a <quorem+0x9e>
 800fa8c:	9b01      	ldr	r3, [sp, #4]
 800fa8e:	3b04      	subs	r3, #4
 800fa90:	429e      	cmp	r6, r3
 800fa92:	461a      	mov	r2, r3
 800fa94:	d330      	bcc.n	800faf8 <quorem+0xfc>
 800fa96:	f8c8 4010 	str.w	r4, [r8, #16]
 800fa9a:	4640      	mov	r0, r8
 800fa9c:	f001 f824 	bl	8010ae8 <__mcmp>
 800faa0:	2800      	cmp	r0, #0
 800faa2:	db25      	blt.n	800faf0 <quorem+0xf4>
 800faa4:	3501      	adds	r5, #1
 800faa6:	4630      	mov	r0, r6
 800faa8:	f04f 0c00 	mov.w	ip, #0
 800faac:	f857 2b04 	ldr.w	r2, [r7], #4
 800fab0:	f8d0 e000 	ldr.w	lr, [r0]
 800fab4:	b293      	uxth	r3, r2
 800fab6:	ebac 0303 	sub.w	r3, ip, r3
 800faba:	0c12      	lsrs	r2, r2, #16
 800fabc:	fa13 f38e 	uxtah	r3, r3, lr
 800fac0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fac4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fac8:	b29b      	uxth	r3, r3
 800faca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800face:	45b9      	cmp	r9, r7
 800fad0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fad4:	f840 3b04 	str.w	r3, [r0], #4
 800fad8:	d2e8      	bcs.n	800faac <quorem+0xb0>
 800fada:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800fade:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800fae2:	b92a      	cbnz	r2, 800faf0 <quorem+0xf4>
 800fae4:	3b04      	subs	r3, #4
 800fae6:	429e      	cmp	r6, r3
 800fae8:	461a      	mov	r2, r3
 800faea:	d30b      	bcc.n	800fb04 <quorem+0x108>
 800faec:	f8c8 4010 	str.w	r4, [r8, #16]
 800faf0:	4628      	mov	r0, r5
 800faf2:	b003      	add	sp, #12
 800faf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faf8:	6812      	ldr	r2, [r2, #0]
 800fafa:	3b04      	subs	r3, #4
 800fafc:	2a00      	cmp	r2, #0
 800fafe:	d1ca      	bne.n	800fa96 <quorem+0x9a>
 800fb00:	3c01      	subs	r4, #1
 800fb02:	e7c5      	b.n	800fa90 <quorem+0x94>
 800fb04:	6812      	ldr	r2, [r2, #0]
 800fb06:	3b04      	subs	r3, #4
 800fb08:	2a00      	cmp	r2, #0
 800fb0a:	d1ef      	bne.n	800faec <quorem+0xf0>
 800fb0c:	3c01      	subs	r4, #1
 800fb0e:	e7ea      	b.n	800fae6 <quorem+0xea>
 800fb10:	2000      	movs	r0, #0
 800fb12:	e7ee      	b.n	800faf2 <quorem+0xf6>
 800fb14:	0000      	movs	r0, r0
	...

0800fb18 <_dtoa_r>:
 800fb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb1c:	ec57 6b10 	vmov	r6, r7, d0
 800fb20:	b097      	sub	sp, #92	; 0x5c
 800fb22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fb24:	9106      	str	r1, [sp, #24]
 800fb26:	4604      	mov	r4, r0
 800fb28:	920b      	str	r2, [sp, #44]	; 0x2c
 800fb2a:	9312      	str	r3, [sp, #72]	; 0x48
 800fb2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fb30:	e9cd 6700 	strd	r6, r7, [sp]
 800fb34:	b93d      	cbnz	r5, 800fb46 <_dtoa_r+0x2e>
 800fb36:	2010      	movs	r0, #16
 800fb38:	f7ff fb46 	bl	800f1c8 <malloc>
 800fb3c:	6260      	str	r0, [r4, #36]	; 0x24
 800fb3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fb42:	6005      	str	r5, [r0, #0]
 800fb44:	60c5      	str	r5, [r0, #12]
 800fb46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb48:	6819      	ldr	r1, [r3, #0]
 800fb4a:	b151      	cbz	r1, 800fb62 <_dtoa_r+0x4a>
 800fb4c:	685a      	ldr	r2, [r3, #4]
 800fb4e:	604a      	str	r2, [r1, #4]
 800fb50:	2301      	movs	r3, #1
 800fb52:	4093      	lsls	r3, r2
 800fb54:	608b      	str	r3, [r1, #8]
 800fb56:	4620      	mov	r0, r4
 800fb58:	f000 fde5 	bl	8010726 <_Bfree>
 800fb5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb5e:	2200      	movs	r2, #0
 800fb60:	601a      	str	r2, [r3, #0]
 800fb62:	1e3b      	subs	r3, r7, #0
 800fb64:	bfbb      	ittet	lt
 800fb66:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fb6a:	9301      	strlt	r3, [sp, #4]
 800fb6c:	2300      	movge	r3, #0
 800fb6e:	2201      	movlt	r2, #1
 800fb70:	bfac      	ite	ge
 800fb72:	f8c8 3000 	strge.w	r3, [r8]
 800fb76:	f8c8 2000 	strlt.w	r2, [r8]
 800fb7a:	4baf      	ldr	r3, [pc, #700]	; (800fe38 <_dtoa_r+0x320>)
 800fb7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fb80:	ea33 0308 	bics.w	r3, r3, r8
 800fb84:	d114      	bne.n	800fbb0 <_dtoa_r+0x98>
 800fb86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb88:	f242 730f 	movw	r3, #9999	; 0x270f
 800fb8c:	6013      	str	r3, [r2, #0]
 800fb8e:	9b00      	ldr	r3, [sp, #0]
 800fb90:	b923      	cbnz	r3, 800fb9c <_dtoa_r+0x84>
 800fb92:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800fb96:	2800      	cmp	r0, #0
 800fb98:	f000 8542 	beq.w	8010620 <_dtoa_r+0xb08>
 800fb9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb9e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800fe4c <_dtoa_r+0x334>
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	f000 8544 	beq.w	8010630 <_dtoa_r+0xb18>
 800fba8:	f10b 0303 	add.w	r3, fp, #3
 800fbac:	f000 bd3e 	b.w	801062c <_dtoa_r+0xb14>
 800fbb0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	4630      	mov	r0, r6
 800fbba:	4639      	mov	r1, r7
 800fbbc:	f7f0 ff30 	bl	8000a20 <__aeabi_dcmpeq>
 800fbc0:	4681      	mov	r9, r0
 800fbc2:	b168      	cbz	r0, 800fbe0 <_dtoa_r+0xc8>
 800fbc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	6013      	str	r3, [r2, #0]
 800fbca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	f000 8524 	beq.w	801061a <_dtoa_r+0xb02>
 800fbd2:	4b9a      	ldr	r3, [pc, #616]	; (800fe3c <_dtoa_r+0x324>)
 800fbd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fbd6:	f103 3bff 	add.w	fp, r3, #4294967295
 800fbda:	6013      	str	r3, [r2, #0]
 800fbdc:	f000 bd28 	b.w	8010630 <_dtoa_r+0xb18>
 800fbe0:	aa14      	add	r2, sp, #80	; 0x50
 800fbe2:	a915      	add	r1, sp, #84	; 0x54
 800fbe4:	ec47 6b10 	vmov	d0, r6, r7
 800fbe8:	4620      	mov	r0, r4
 800fbea:	f000 fff4 	bl	8010bd6 <__d2b>
 800fbee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fbf2:	9004      	str	r0, [sp, #16]
 800fbf4:	2d00      	cmp	r5, #0
 800fbf6:	d07c      	beq.n	800fcf2 <_dtoa_r+0x1da>
 800fbf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fbfc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800fc00:	46b2      	mov	sl, r6
 800fc02:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800fc06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fc0a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800fc0e:	2200      	movs	r2, #0
 800fc10:	4b8b      	ldr	r3, [pc, #556]	; (800fe40 <_dtoa_r+0x328>)
 800fc12:	4650      	mov	r0, sl
 800fc14:	4659      	mov	r1, fp
 800fc16:	f7f0 fae3 	bl	80001e0 <__aeabi_dsub>
 800fc1a:	a381      	add	r3, pc, #516	; (adr r3, 800fe20 <_dtoa_r+0x308>)
 800fc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc20:	f7f0 fc96 	bl	8000550 <__aeabi_dmul>
 800fc24:	a380      	add	r3, pc, #512	; (adr r3, 800fe28 <_dtoa_r+0x310>)
 800fc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2a:	f7f0 fadb 	bl	80001e4 <__adddf3>
 800fc2e:	4606      	mov	r6, r0
 800fc30:	4628      	mov	r0, r5
 800fc32:	460f      	mov	r7, r1
 800fc34:	f7f0 fc22 	bl	800047c <__aeabi_i2d>
 800fc38:	a37d      	add	r3, pc, #500	; (adr r3, 800fe30 <_dtoa_r+0x318>)
 800fc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3e:	f7f0 fc87 	bl	8000550 <__aeabi_dmul>
 800fc42:	4602      	mov	r2, r0
 800fc44:	460b      	mov	r3, r1
 800fc46:	4630      	mov	r0, r6
 800fc48:	4639      	mov	r1, r7
 800fc4a:	f7f0 facb 	bl	80001e4 <__adddf3>
 800fc4e:	4606      	mov	r6, r0
 800fc50:	460f      	mov	r7, r1
 800fc52:	f7f0 ff2d 	bl	8000ab0 <__aeabi_d2iz>
 800fc56:	2200      	movs	r2, #0
 800fc58:	4682      	mov	sl, r0
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	4630      	mov	r0, r6
 800fc5e:	4639      	mov	r1, r7
 800fc60:	f7f0 fee8 	bl	8000a34 <__aeabi_dcmplt>
 800fc64:	b148      	cbz	r0, 800fc7a <_dtoa_r+0x162>
 800fc66:	4650      	mov	r0, sl
 800fc68:	f7f0 fc08 	bl	800047c <__aeabi_i2d>
 800fc6c:	4632      	mov	r2, r6
 800fc6e:	463b      	mov	r3, r7
 800fc70:	f7f0 fed6 	bl	8000a20 <__aeabi_dcmpeq>
 800fc74:	b908      	cbnz	r0, 800fc7a <_dtoa_r+0x162>
 800fc76:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fc7a:	f1ba 0f16 	cmp.w	sl, #22
 800fc7e:	d859      	bhi.n	800fd34 <_dtoa_r+0x21c>
 800fc80:	4970      	ldr	r1, [pc, #448]	; (800fe44 <_dtoa_r+0x32c>)
 800fc82:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800fc86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc8e:	f7f0 feef 	bl	8000a70 <__aeabi_dcmpgt>
 800fc92:	2800      	cmp	r0, #0
 800fc94:	d050      	beq.n	800fd38 <_dtoa_r+0x220>
 800fc96:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fca0:	1b5d      	subs	r5, r3, r5
 800fca2:	f1b5 0801 	subs.w	r8, r5, #1
 800fca6:	bf49      	itett	mi
 800fca8:	f1c5 0301 	rsbmi	r3, r5, #1
 800fcac:	2300      	movpl	r3, #0
 800fcae:	9305      	strmi	r3, [sp, #20]
 800fcb0:	f04f 0800 	movmi.w	r8, #0
 800fcb4:	bf58      	it	pl
 800fcb6:	9305      	strpl	r3, [sp, #20]
 800fcb8:	f1ba 0f00 	cmp.w	sl, #0
 800fcbc:	db3e      	blt.n	800fd3c <_dtoa_r+0x224>
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	44d0      	add	r8, sl
 800fcc2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800fcc6:	9307      	str	r3, [sp, #28]
 800fcc8:	9b06      	ldr	r3, [sp, #24]
 800fcca:	2b09      	cmp	r3, #9
 800fccc:	f200 8090 	bhi.w	800fdf0 <_dtoa_r+0x2d8>
 800fcd0:	2b05      	cmp	r3, #5
 800fcd2:	bfc4      	itt	gt
 800fcd4:	3b04      	subgt	r3, #4
 800fcd6:	9306      	strgt	r3, [sp, #24]
 800fcd8:	9b06      	ldr	r3, [sp, #24]
 800fcda:	f1a3 0302 	sub.w	r3, r3, #2
 800fcde:	bfcc      	ite	gt
 800fce0:	2500      	movgt	r5, #0
 800fce2:	2501      	movle	r5, #1
 800fce4:	2b03      	cmp	r3, #3
 800fce6:	f200 808f 	bhi.w	800fe08 <_dtoa_r+0x2f0>
 800fcea:	e8df f003 	tbb	[pc, r3]
 800fcee:	7f7d      	.short	0x7f7d
 800fcf0:	7131      	.short	0x7131
 800fcf2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800fcf6:	441d      	add	r5, r3
 800fcf8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800fcfc:	2820      	cmp	r0, #32
 800fcfe:	dd13      	ble.n	800fd28 <_dtoa_r+0x210>
 800fd00:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800fd04:	9b00      	ldr	r3, [sp, #0]
 800fd06:	fa08 f800 	lsl.w	r8, r8, r0
 800fd0a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800fd0e:	fa23 f000 	lsr.w	r0, r3, r0
 800fd12:	ea48 0000 	orr.w	r0, r8, r0
 800fd16:	f7f0 fba1 	bl	800045c <__aeabi_ui2d>
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	4682      	mov	sl, r0
 800fd1e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800fd22:	3d01      	subs	r5, #1
 800fd24:	9313      	str	r3, [sp, #76]	; 0x4c
 800fd26:	e772      	b.n	800fc0e <_dtoa_r+0xf6>
 800fd28:	9b00      	ldr	r3, [sp, #0]
 800fd2a:	f1c0 0020 	rsb	r0, r0, #32
 800fd2e:	fa03 f000 	lsl.w	r0, r3, r0
 800fd32:	e7f0      	b.n	800fd16 <_dtoa_r+0x1fe>
 800fd34:	2301      	movs	r3, #1
 800fd36:	e7b1      	b.n	800fc9c <_dtoa_r+0x184>
 800fd38:	900f      	str	r0, [sp, #60]	; 0x3c
 800fd3a:	e7b0      	b.n	800fc9e <_dtoa_r+0x186>
 800fd3c:	9b05      	ldr	r3, [sp, #20]
 800fd3e:	eba3 030a 	sub.w	r3, r3, sl
 800fd42:	9305      	str	r3, [sp, #20]
 800fd44:	f1ca 0300 	rsb	r3, sl, #0
 800fd48:	9307      	str	r3, [sp, #28]
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	930e      	str	r3, [sp, #56]	; 0x38
 800fd4e:	e7bb      	b.n	800fcc8 <_dtoa_r+0x1b0>
 800fd50:	2301      	movs	r3, #1
 800fd52:	930a      	str	r3, [sp, #40]	; 0x28
 800fd54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	dd59      	ble.n	800fe0e <_dtoa_r+0x2f6>
 800fd5a:	9302      	str	r3, [sp, #8]
 800fd5c:	4699      	mov	r9, r3
 800fd5e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fd60:	2200      	movs	r2, #0
 800fd62:	6072      	str	r2, [r6, #4]
 800fd64:	2204      	movs	r2, #4
 800fd66:	f102 0014 	add.w	r0, r2, #20
 800fd6a:	4298      	cmp	r0, r3
 800fd6c:	6871      	ldr	r1, [r6, #4]
 800fd6e:	d953      	bls.n	800fe18 <_dtoa_r+0x300>
 800fd70:	4620      	mov	r0, r4
 800fd72:	f000 fca4 	bl	80106be <_Balloc>
 800fd76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd78:	6030      	str	r0, [r6, #0]
 800fd7a:	f1b9 0f0e 	cmp.w	r9, #14
 800fd7e:	f8d3 b000 	ldr.w	fp, [r3]
 800fd82:	f200 80e6 	bhi.w	800ff52 <_dtoa_r+0x43a>
 800fd86:	2d00      	cmp	r5, #0
 800fd88:	f000 80e3 	beq.w	800ff52 <_dtoa_r+0x43a>
 800fd8c:	ed9d 7b00 	vldr	d7, [sp]
 800fd90:	f1ba 0f00 	cmp.w	sl, #0
 800fd94:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800fd98:	dd74      	ble.n	800fe84 <_dtoa_r+0x36c>
 800fd9a:	4a2a      	ldr	r2, [pc, #168]	; (800fe44 <_dtoa_r+0x32c>)
 800fd9c:	f00a 030f 	and.w	r3, sl, #15
 800fda0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fda4:	ed93 7b00 	vldr	d7, [r3]
 800fda8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800fdac:	06f0      	lsls	r0, r6, #27
 800fdae:	ed8d 7b08 	vstr	d7, [sp, #32]
 800fdb2:	d565      	bpl.n	800fe80 <_dtoa_r+0x368>
 800fdb4:	4b24      	ldr	r3, [pc, #144]	; (800fe48 <_dtoa_r+0x330>)
 800fdb6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fdba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fdbe:	f7f0 fcf1 	bl	80007a4 <__aeabi_ddiv>
 800fdc2:	e9cd 0100 	strd	r0, r1, [sp]
 800fdc6:	f006 060f 	and.w	r6, r6, #15
 800fdca:	2503      	movs	r5, #3
 800fdcc:	4f1e      	ldr	r7, [pc, #120]	; (800fe48 <_dtoa_r+0x330>)
 800fdce:	e04c      	b.n	800fe6a <_dtoa_r+0x352>
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	930a      	str	r3, [sp, #40]	; 0x28
 800fdd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdd6:	4453      	add	r3, sl
 800fdd8:	f103 0901 	add.w	r9, r3, #1
 800fddc:	9302      	str	r3, [sp, #8]
 800fdde:	464b      	mov	r3, r9
 800fde0:	2b01      	cmp	r3, #1
 800fde2:	bfb8      	it	lt
 800fde4:	2301      	movlt	r3, #1
 800fde6:	e7ba      	b.n	800fd5e <_dtoa_r+0x246>
 800fde8:	2300      	movs	r3, #0
 800fdea:	e7b2      	b.n	800fd52 <_dtoa_r+0x23a>
 800fdec:	2300      	movs	r3, #0
 800fdee:	e7f0      	b.n	800fdd2 <_dtoa_r+0x2ba>
 800fdf0:	2501      	movs	r5, #1
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	9306      	str	r3, [sp, #24]
 800fdf6:	950a      	str	r5, [sp, #40]	; 0x28
 800fdf8:	f04f 33ff 	mov.w	r3, #4294967295
 800fdfc:	9302      	str	r3, [sp, #8]
 800fdfe:	4699      	mov	r9, r3
 800fe00:	2200      	movs	r2, #0
 800fe02:	2312      	movs	r3, #18
 800fe04:	920b      	str	r2, [sp, #44]	; 0x2c
 800fe06:	e7aa      	b.n	800fd5e <_dtoa_r+0x246>
 800fe08:	2301      	movs	r3, #1
 800fe0a:	930a      	str	r3, [sp, #40]	; 0x28
 800fe0c:	e7f4      	b.n	800fdf8 <_dtoa_r+0x2e0>
 800fe0e:	2301      	movs	r3, #1
 800fe10:	9302      	str	r3, [sp, #8]
 800fe12:	4699      	mov	r9, r3
 800fe14:	461a      	mov	r2, r3
 800fe16:	e7f5      	b.n	800fe04 <_dtoa_r+0x2ec>
 800fe18:	3101      	adds	r1, #1
 800fe1a:	6071      	str	r1, [r6, #4]
 800fe1c:	0052      	lsls	r2, r2, #1
 800fe1e:	e7a2      	b.n	800fd66 <_dtoa_r+0x24e>
 800fe20:	636f4361 	.word	0x636f4361
 800fe24:	3fd287a7 	.word	0x3fd287a7
 800fe28:	8b60c8b3 	.word	0x8b60c8b3
 800fe2c:	3fc68a28 	.word	0x3fc68a28
 800fe30:	509f79fb 	.word	0x509f79fb
 800fe34:	3fd34413 	.word	0x3fd34413
 800fe38:	7ff00000 	.word	0x7ff00000
 800fe3c:	08011229 	.word	0x08011229
 800fe40:	3ff80000 	.word	0x3ff80000
 800fe44:	08011260 	.word	0x08011260
 800fe48:	08011238 	.word	0x08011238
 800fe4c:	08011233 	.word	0x08011233
 800fe50:	07f1      	lsls	r1, r6, #31
 800fe52:	d508      	bpl.n	800fe66 <_dtoa_r+0x34e>
 800fe54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fe58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe5c:	f7f0 fb78 	bl	8000550 <__aeabi_dmul>
 800fe60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fe64:	3501      	adds	r5, #1
 800fe66:	1076      	asrs	r6, r6, #1
 800fe68:	3708      	adds	r7, #8
 800fe6a:	2e00      	cmp	r6, #0
 800fe6c:	d1f0      	bne.n	800fe50 <_dtoa_r+0x338>
 800fe6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fe72:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe76:	f7f0 fc95 	bl	80007a4 <__aeabi_ddiv>
 800fe7a:	e9cd 0100 	strd	r0, r1, [sp]
 800fe7e:	e01a      	b.n	800feb6 <_dtoa_r+0x39e>
 800fe80:	2502      	movs	r5, #2
 800fe82:	e7a3      	b.n	800fdcc <_dtoa_r+0x2b4>
 800fe84:	f000 80a0 	beq.w	800ffc8 <_dtoa_r+0x4b0>
 800fe88:	f1ca 0600 	rsb	r6, sl, #0
 800fe8c:	4b9f      	ldr	r3, [pc, #636]	; (801010c <_dtoa_r+0x5f4>)
 800fe8e:	4fa0      	ldr	r7, [pc, #640]	; (8010110 <_dtoa_r+0x5f8>)
 800fe90:	f006 020f 	and.w	r2, r6, #15
 800fe94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fea0:	f7f0 fb56 	bl	8000550 <__aeabi_dmul>
 800fea4:	e9cd 0100 	strd	r0, r1, [sp]
 800fea8:	1136      	asrs	r6, r6, #4
 800feaa:	2300      	movs	r3, #0
 800feac:	2502      	movs	r5, #2
 800feae:	2e00      	cmp	r6, #0
 800feb0:	d17f      	bne.n	800ffb2 <_dtoa_r+0x49a>
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d1e1      	bne.n	800fe7a <_dtoa_r+0x362>
 800feb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800feb8:	2b00      	cmp	r3, #0
 800feba:	f000 8087 	beq.w	800ffcc <_dtoa_r+0x4b4>
 800febe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fec2:	2200      	movs	r2, #0
 800fec4:	4b93      	ldr	r3, [pc, #588]	; (8010114 <_dtoa_r+0x5fc>)
 800fec6:	4630      	mov	r0, r6
 800fec8:	4639      	mov	r1, r7
 800feca:	f7f0 fdb3 	bl	8000a34 <__aeabi_dcmplt>
 800fece:	2800      	cmp	r0, #0
 800fed0:	d07c      	beq.n	800ffcc <_dtoa_r+0x4b4>
 800fed2:	f1b9 0f00 	cmp.w	r9, #0
 800fed6:	d079      	beq.n	800ffcc <_dtoa_r+0x4b4>
 800fed8:	9b02      	ldr	r3, [sp, #8]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	dd35      	ble.n	800ff4a <_dtoa_r+0x432>
 800fede:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fee2:	9308      	str	r3, [sp, #32]
 800fee4:	4639      	mov	r1, r7
 800fee6:	2200      	movs	r2, #0
 800fee8:	4b8b      	ldr	r3, [pc, #556]	; (8010118 <_dtoa_r+0x600>)
 800feea:	4630      	mov	r0, r6
 800feec:	f7f0 fb30 	bl	8000550 <__aeabi_dmul>
 800fef0:	e9cd 0100 	strd	r0, r1, [sp]
 800fef4:	9f02      	ldr	r7, [sp, #8]
 800fef6:	3501      	adds	r5, #1
 800fef8:	4628      	mov	r0, r5
 800fefa:	f7f0 fabf 	bl	800047c <__aeabi_i2d>
 800fefe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff02:	f7f0 fb25 	bl	8000550 <__aeabi_dmul>
 800ff06:	2200      	movs	r2, #0
 800ff08:	4b84      	ldr	r3, [pc, #528]	; (801011c <_dtoa_r+0x604>)
 800ff0a:	f7f0 f96b 	bl	80001e4 <__adddf3>
 800ff0e:	4605      	mov	r5, r0
 800ff10:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ff14:	2f00      	cmp	r7, #0
 800ff16:	d15d      	bne.n	800ffd4 <_dtoa_r+0x4bc>
 800ff18:	2200      	movs	r2, #0
 800ff1a:	4b81      	ldr	r3, [pc, #516]	; (8010120 <_dtoa_r+0x608>)
 800ff1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff20:	f7f0 f95e 	bl	80001e0 <__aeabi_dsub>
 800ff24:	462a      	mov	r2, r5
 800ff26:	4633      	mov	r3, r6
 800ff28:	e9cd 0100 	strd	r0, r1, [sp]
 800ff2c:	f7f0 fda0 	bl	8000a70 <__aeabi_dcmpgt>
 800ff30:	2800      	cmp	r0, #0
 800ff32:	f040 8288 	bne.w	8010446 <_dtoa_r+0x92e>
 800ff36:	462a      	mov	r2, r5
 800ff38:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ff3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff40:	f7f0 fd78 	bl	8000a34 <__aeabi_dcmplt>
 800ff44:	2800      	cmp	r0, #0
 800ff46:	f040 827c 	bne.w	8010442 <_dtoa_r+0x92a>
 800ff4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ff4e:	e9cd 2300 	strd	r2, r3, [sp]
 800ff52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	f2c0 8150 	blt.w	80101fa <_dtoa_r+0x6e2>
 800ff5a:	f1ba 0f0e 	cmp.w	sl, #14
 800ff5e:	f300 814c 	bgt.w	80101fa <_dtoa_r+0x6e2>
 800ff62:	4b6a      	ldr	r3, [pc, #424]	; (801010c <_dtoa_r+0x5f4>)
 800ff64:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ff68:	ed93 7b00 	vldr	d7, [r3]
 800ff6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff74:	f280 80d8 	bge.w	8010128 <_dtoa_r+0x610>
 800ff78:	f1b9 0f00 	cmp.w	r9, #0
 800ff7c:	f300 80d4 	bgt.w	8010128 <_dtoa_r+0x610>
 800ff80:	f040 825e 	bne.w	8010440 <_dtoa_r+0x928>
 800ff84:	2200      	movs	r2, #0
 800ff86:	4b66      	ldr	r3, [pc, #408]	; (8010120 <_dtoa_r+0x608>)
 800ff88:	ec51 0b17 	vmov	r0, r1, d7
 800ff8c:	f7f0 fae0 	bl	8000550 <__aeabi_dmul>
 800ff90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff94:	f7f0 fd62 	bl	8000a5c <__aeabi_dcmpge>
 800ff98:	464f      	mov	r7, r9
 800ff9a:	464e      	mov	r6, r9
 800ff9c:	2800      	cmp	r0, #0
 800ff9e:	f040 8234 	bne.w	801040a <_dtoa_r+0x8f2>
 800ffa2:	2331      	movs	r3, #49	; 0x31
 800ffa4:	f10b 0501 	add.w	r5, fp, #1
 800ffa8:	f88b 3000 	strb.w	r3, [fp]
 800ffac:	f10a 0a01 	add.w	sl, sl, #1
 800ffb0:	e22f      	b.n	8010412 <_dtoa_r+0x8fa>
 800ffb2:	07f2      	lsls	r2, r6, #31
 800ffb4:	d505      	bpl.n	800ffc2 <_dtoa_r+0x4aa>
 800ffb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffba:	f7f0 fac9 	bl	8000550 <__aeabi_dmul>
 800ffbe:	3501      	adds	r5, #1
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	1076      	asrs	r6, r6, #1
 800ffc4:	3708      	adds	r7, #8
 800ffc6:	e772      	b.n	800feae <_dtoa_r+0x396>
 800ffc8:	2502      	movs	r5, #2
 800ffca:	e774      	b.n	800feb6 <_dtoa_r+0x39e>
 800ffcc:	f8cd a020 	str.w	sl, [sp, #32]
 800ffd0:	464f      	mov	r7, r9
 800ffd2:	e791      	b.n	800fef8 <_dtoa_r+0x3e0>
 800ffd4:	4b4d      	ldr	r3, [pc, #308]	; (801010c <_dtoa_r+0x5f4>)
 800ffd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ffda:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ffde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d047      	beq.n	8010074 <_dtoa_r+0x55c>
 800ffe4:	4602      	mov	r2, r0
 800ffe6:	460b      	mov	r3, r1
 800ffe8:	2000      	movs	r0, #0
 800ffea:	494e      	ldr	r1, [pc, #312]	; (8010124 <_dtoa_r+0x60c>)
 800ffec:	f7f0 fbda 	bl	80007a4 <__aeabi_ddiv>
 800fff0:	462a      	mov	r2, r5
 800fff2:	4633      	mov	r3, r6
 800fff4:	f7f0 f8f4 	bl	80001e0 <__aeabi_dsub>
 800fff8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fffc:	465d      	mov	r5, fp
 800fffe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010002:	f7f0 fd55 	bl	8000ab0 <__aeabi_d2iz>
 8010006:	4606      	mov	r6, r0
 8010008:	f7f0 fa38 	bl	800047c <__aeabi_i2d>
 801000c:	4602      	mov	r2, r0
 801000e:	460b      	mov	r3, r1
 8010010:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010014:	f7f0 f8e4 	bl	80001e0 <__aeabi_dsub>
 8010018:	3630      	adds	r6, #48	; 0x30
 801001a:	f805 6b01 	strb.w	r6, [r5], #1
 801001e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010022:	e9cd 0100 	strd	r0, r1, [sp]
 8010026:	f7f0 fd05 	bl	8000a34 <__aeabi_dcmplt>
 801002a:	2800      	cmp	r0, #0
 801002c:	d163      	bne.n	80100f6 <_dtoa_r+0x5de>
 801002e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010032:	2000      	movs	r0, #0
 8010034:	4937      	ldr	r1, [pc, #220]	; (8010114 <_dtoa_r+0x5fc>)
 8010036:	f7f0 f8d3 	bl	80001e0 <__aeabi_dsub>
 801003a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801003e:	f7f0 fcf9 	bl	8000a34 <__aeabi_dcmplt>
 8010042:	2800      	cmp	r0, #0
 8010044:	f040 80b7 	bne.w	80101b6 <_dtoa_r+0x69e>
 8010048:	eba5 030b 	sub.w	r3, r5, fp
 801004c:	429f      	cmp	r7, r3
 801004e:	f77f af7c 	ble.w	800ff4a <_dtoa_r+0x432>
 8010052:	2200      	movs	r2, #0
 8010054:	4b30      	ldr	r3, [pc, #192]	; (8010118 <_dtoa_r+0x600>)
 8010056:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801005a:	f7f0 fa79 	bl	8000550 <__aeabi_dmul>
 801005e:	2200      	movs	r2, #0
 8010060:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010064:	4b2c      	ldr	r3, [pc, #176]	; (8010118 <_dtoa_r+0x600>)
 8010066:	e9dd 0100 	ldrd	r0, r1, [sp]
 801006a:	f7f0 fa71 	bl	8000550 <__aeabi_dmul>
 801006e:	e9cd 0100 	strd	r0, r1, [sp]
 8010072:	e7c4      	b.n	800fffe <_dtoa_r+0x4e6>
 8010074:	462a      	mov	r2, r5
 8010076:	4633      	mov	r3, r6
 8010078:	f7f0 fa6a 	bl	8000550 <__aeabi_dmul>
 801007c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010080:	eb0b 0507 	add.w	r5, fp, r7
 8010084:	465e      	mov	r6, fp
 8010086:	e9dd 0100 	ldrd	r0, r1, [sp]
 801008a:	f7f0 fd11 	bl	8000ab0 <__aeabi_d2iz>
 801008e:	4607      	mov	r7, r0
 8010090:	f7f0 f9f4 	bl	800047c <__aeabi_i2d>
 8010094:	3730      	adds	r7, #48	; 0x30
 8010096:	4602      	mov	r2, r0
 8010098:	460b      	mov	r3, r1
 801009a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801009e:	f7f0 f89f 	bl	80001e0 <__aeabi_dsub>
 80100a2:	f806 7b01 	strb.w	r7, [r6], #1
 80100a6:	42ae      	cmp	r6, r5
 80100a8:	e9cd 0100 	strd	r0, r1, [sp]
 80100ac:	f04f 0200 	mov.w	r2, #0
 80100b0:	d126      	bne.n	8010100 <_dtoa_r+0x5e8>
 80100b2:	4b1c      	ldr	r3, [pc, #112]	; (8010124 <_dtoa_r+0x60c>)
 80100b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80100b8:	f7f0 f894 	bl	80001e4 <__adddf3>
 80100bc:	4602      	mov	r2, r0
 80100be:	460b      	mov	r3, r1
 80100c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80100c4:	f7f0 fcd4 	bl	8000a70 <__aeabi_dcmpgt>
 80100c8:	2800      	cmp	r0, #0
 80100ca:	d174      	bne.n	80101b6 <_dtoa_r+0x69e>
 80100cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80100d0:	2000      	movs	r0, #0
 80100d2:	4914      	ldr	r1, [pc, #80]	; (8010124 <_dtoa_r+0x60c>)
 80100d4:	f7f0 f884 	bl	80001e0 <__aeabi_dsub>
 80100d8:	4602      	mov	r2, r0
 80100da:	460b      	mov	r3, r1
 80100dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80100e0:	f7f0 fca8 	bl	8000a34 <__aeabi_dcmplt>
 80100e4:	2800      	cmp	r0, #0
 80100e6:	f43f af30 	beq.w	800ff4a <_dtoa_r+0x432>
 80100ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80100ee:	2b30      	cmp	r3, #48	; 0x30
 80100f0:	f105 32ff 	add.w	r2, r5, #4294967295
 80100f4:	d002      	beq.n	80100fc <_dtoa_r+0x5e4>
 80100f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80100fa:	e04a      	b.n	8010192 <_dtoa_r+0x67a>
 80100fc:	4615      	mov	r5, r2
 80100fe:	e7f4      	b.n	80100ea <_dtoa_r+0x5d2>
 8010100:	4b05      	ldr	r3, [pc, #20]	; (8010118 <_dtoa_r+0x600>)
 8010102:	f7f0 fa25 	bl	8000550 <__aeabi_dmul>
 8010106:	e9cd 0100 	strd	r0, r1, [sp]
 801010a:	e7bc      	b.n	8010086 <_dtoa_r+0x56e>
 801010c:	08011260 	.word	0x08011260
 8010110:	08011238 	.word	0x08011238
 8010114:	3ff00000 	.word	0x3ff00000
 8010118:	40240000 	.word	0x40240000
 801011c:	401c0000 	.word	0x401c0000
 8010120:	40140000 	.word	0x40140000
 8010124:	3fe00000 	.word	0x3fe00000
 8010128:	e9dd 6700 	ldrd	r6, r7, [sp]
 801012c:	465d      	mov	r5, fp
 801012e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010132:	4630      	mov	r0, r6
 8010134:	4639      	mov	r1, r7
 8010136:	f7f0 fb35 	bl	80007a4 <__aeabi_ddiv>
 801013a:	f7f0 fcb9 	bl	8000ab0 <__aeabi_d2iz>
 801013e:	4680      	mov	r8, r0
 8010140:	f7f0 f99c 	bl	800047c <__aeabi_i2d>
 8010144:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010148:	f7f0 fa02 	bl	8000550 <__aeabi_dmul>
 801014c:	4602      	mov	r2, r0
 801014e:	460b      	mov	r3, r1
 8010150:	4630      	mov	r0, r6
 8010152:	4639      	mov	r1, r7
 8010154:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010158:	f7f0 f842 	bl	80001e0 <__aeabi_dsub>
 801015c:	f805 6b01 	strb.w	r6, [r5], #1
 8010160:	eba5 060b 	sub.w	r6, r5, fp
 8010164:	45b1      	cmp	r9, r6
 8010166:	4602      	mov	r2, r0
 8010168:	460b      	mov	r3, r1
 801016a:	d139      	bne.n	80101e0 <_dtoa_r+0x6c8>
 801016c:	f7f0 f83a 	bl	80001e4 <__adddf3>
 8010170:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010174:	4606      	mov	r6, r0
 8010176:	460f      	mov	r7, r1
 8010178:	f7f0 fc7a 	bl	8000a70 <__aeabi_dcmpgt>
 801017c:	b9c8      	cbnz	r0, 80101b2 <_dtoa_r+0x69a>
 801017e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010182:	4630      	mov	r0, r6
 8010184:	4639      	mov	r1, r7
 8010186:	f7f0 fc4b 	bl	8000a20 <__aeabi_dcmpeq>
 801018a:	b110      	cbz	r0, 8010192 <_dtoa_r+0x67a>
 801018c:	f018 0f01 	tst.w	r8, #1
 8010190:	d10f      	bne.n	80101b2 <_dtoa_r+0x69a>
 8010192:	9904      	ldr	r1, [sp, #16]
 8010194:	4620      	mov	r0, r4
 8010196:	f000 fac6 	bl	8010726 <_Bfree>
 801019a:	2300      	movs	r3, #0
 801019c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801019e:	702b      	strb	r3, [r5, #0]
 80101a0:	f10a 0301 	add.w	r3, sl, #1
 80101a4:	6013      	str	r3, [r2, #0]
 80101a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	f000 8241 	beq.w	8010630 <_dtoa_r+0xb18>
 80101ae:	601d      	str	r5, [r3, #0]
 80101b0:	e23e      	b.n	8010630 <_dtoa_r+0xb18>
 80101b2:	f8cd a020 	str.w	sl, [sp, #32]
 80101b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80101ba:	2a39      	cmp	r2, #57	; 0x39
 80101bc:	f105 33ff 	add.w	r3, r5, #4294967295
 80101c0:	d108      	bne.n	80101d4 <_dtoa_r+0x6bc>
 80101c2:	459b      	cmp	fp, r3
 80101c4:	d10a      	bne.n	80101dc <_dtoa_r+0x6c4>
 80101c6:	9b08      	ldr	r3, [sp, #32]
 80101c8:	3301      	adds	r3, #1
 80101ca:	9308      	str	r3, [sp, #32]
 80101cc:	2330      	movs	r3, #48	; 0x30
 80101ce:	f88b 3000 	strb.w	r3, [fp]
 80101d2:	465b      	mov	r3, fp
 80101d4:	781a      	ldrb	r2, [r3, #0]
 80101d6:	3201      	adds	r2, #1
 80101d8:	701a      	strb	r2, [r3, #0]
 80101da:	e78c      	b.n	80100f6 <_dtoa_r+0x5de>
 80101dc:	461d      	mov	r5, r3
 80101de:	e7ea      	b.n	80101b6 <_dtoa_r+0x69e>
 80101e0:	2200      	movs	r2, #0
 80101e2:	4b9b      	ldr	r3, [pc, #620]	; (8010450 <_dtoa_r+0x938>)
 80101e4:	f7f0 f9b4 	bl	8000550 <__aeabi_dmul>
 80101e8:	2200      	movs	r2, #0
 80101ea:	2300      	movs	r3, #0
 80101ec:	4606      	mov	r6, r0
 80101ee:	460f      	mov	r7, r1
 80101f0:	f7f0 fc16 	bl	8000a20 <__aeabi_dcmpeq>
 80101f4:	2800      	cmp	r0, #0
 80101f6:	d09a      	beq.n	801012e <_dtoa_r+0x616>
 80101f8:	e7cb      	b.n	8010192 <_dtoa_r+0x67a>
 80101fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80101fc:	2a00      	cmp	r2, #0
 80101fe:	f000 808b 	beq.w	8010318 <_dtoa_r+0x800>
 8010202:	9a06      	ldr	r2, [sp, #24]
 8010204:	2a01      	cmp	r2, #1
 8010206:	dc6e      	bgt.n	80102e6 <_dtoa_r+0x7ce>
 8010208:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801020a:	2a00      	cmp	r2, #0
 801020c:	d067      	beq.n	80102de <_dtoa_r+0x7c6>
 801020e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010212:	9f07      	ldr	r7, [sp, #28]
 8010214:	9d05      	ldr	r5, [sp, #20]
 8010216:	9a05      	ldr	r2, [sp, #20]
 8010218:	2101      	movs	r1, #1
 801021a:	441a      	add	r2, r3
 801021c:	4620      	mov	r0, r4
 801021e:	9205      	str	r2, [sp, #20]
 8010220:	4498      	add	r8, r3
 8010222:	f000 fb20 	bl	8010866 <__i2b>
 8010226:	4606      	mov	r6, r0
 8010228:	2d00      	cmp	r5, #0
 801022a:	dd0c      	ble.n	8010246 <_dtoa_r+0x72e>
 801022c:	f1b8 0f00 	cmp.w	r8, #0
 8010230:	dd09      	ble.n	8010246 <_dtoa_r+0x72e>
 8010232:	4545      	cmp	r5, r8
 8010234:	9a05      	ldr	r2, [sp, #20]
 8010236:	462b      	mov	r3, r5
 8010238:	bfa8      	it	ge
 801023a:	4643      	movge	r3, r8
 801023c:	1ad2      	subs	r2, r2, r3
 801023e:	9205      	str	r2, [sp, #20]
 8010240:	1aed      	subs	r5, r5, r3
 8010242:	eba8 0803 	sub.w	r8, r8, r3
 8010246:	9b07      	ldr	r3, [sp, #28]
 8010248:	b1eb      	cbz	r3, 8010286 <_dtoa_r+0x76e>
 801024a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801024c:	2b00      	cmp	r3, #0
 801024e:	d067      	beq.n	8010320 <_dtoa_r+0x808>
 8010250:	b18f      	cbz	r7, 8010276 <_dtoa_r+0x75e>
 8010252:	4631      	mov	r1, r6
 8010254:	463a      	mov	r2, r7
 8010256:	4620      	mov	r0, r4
 8010258:	f000 fba4 	bl	80109a4 <__pow5mult>
 801025c:	9a04      	ldr	r2, [sp, #16]
 801025e:	4601      	mov	r1, r0
 8010260:	4606      	mov	r6, r0
 8010262:	4620      	mov	r0, r4
 8010264:	f000 fb08 	bl	8010878 <__multiply>
 8010268:	9904      	ldr	r1, [sp, #16]
 801026a:	9008      	str	r0, [sp, #32]
 801026c:	4620      	mov	r0, r4
 801026e:	f000 fa5a 	bl	8010726 <_Bfree>
 8010272:	9b08      	ldr	r3, [sp, #32]
 8010274:	9304      	str	r3, [sp, #16]
 8010276:	9b07      	ldr	r3, [sp, #28]
 8010278:	1bda      	subs	r2, r3, r7
 801027a:	d004      	beq.n	8010286 <_dtoa_r+0x76e>
 801027c:	9904      	ldr	r1, [sp, #16]
 801027e:	4620      	mov	r0, r4
 8010280:	f000 fb90 	bl	80109a4 <__pow5mult>
 8010284:	9004      	str	r0, [sp, #16]
 8010286:	2101      	movs	r1, #1
 8010288:	4620      	mov	r0, r4
 801028a:	f000 faec 	bl	8010866 <__i2b>
 801028e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010290:	4607      	mov	r7, r0
 8010292:	2b00      	cmp	r3, #0
 8010294:	f000 81d0 	beq.w	8010638 <_dtoa_r+0xb20>
 8010298:	461a      	mov	r2, r3
 801029a:	4601      	mov	r1, r0
 801029c:	4620      	mov	r0, r4
 801029e:	f000 fb81 	bl	80109a4 <__pow5mult>
 80102a2:	9b06      	ldr	r3, [sp, #24]
 80102a4:	2b01      	cmp	r3, #1
 80102a6:	4607      	mov	r7, r0
 80102a8:	dc40      	bgt.n	801032c <_dtoa_r+0x814>
 80102aa:	9b00      	ldr	r3, [sp, #0]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d139      	bne.n	8010324 <_dtoa_r+0x80c>
 80102b0:	9b01      	ldr	r3, [sp, #4]
 80102b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d136      	bne.n	8010328 <_dtoa_r+0x810>
 80102ba:	9b01      	ldr	r3, [sp, #4]
 80102bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80102c0:	0d1b      	lsrs	r3, r3, #20
 80102c2:	051b      	lsls	r3, r3, #20
 80102c4:	b12b      	cbz	r3, 80102d2 <_dtoa_r+0x7ba>
 80102c6:	9b05      	ldr	r3, [sp, #20]
 80102c8:	3301      	adds	r3, #1
 80102ca:	9305      	str	r3, [sp, #20]
 80102cc:	f108 0801 	add.w	r8, r8, #1
 80102d0:	2301      	movs	r3, #1
 80102d2:	9307      	str	r3, [sp, #28]
 80102d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d12a      	bne.n	8010330 <_dtoa_r+0x818>
 80102da:	2001      	movs	r0, #1
 80102dc:	e030      	b.n	8010340 <_dtoa_r+0x828>
 80102de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80102e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80102e4:	e795      	b.n	8010212 <_dtoa_r+0x6fa>
 80102e6:	9b07      	ldr	r3, [sp, #28]
 80102e8:	f109 37ff 	add.w	r7, r9, #4294967295
 80102ec:	42bb      	cmp	r3, r7
 80102ee:	bfbf      	itttt	lt
 80102f0:	9b07      	ldrlt	r3, [sp, #28]
 80102f2:	9707      	strlt	r7, [sp, #28]
 80102f4:	1afa      	sublt	r2, r7, r3
 80102f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80102f8:	bfbb      	ittet	lt
 80102fa:	189b      	addlt	r3, r3, r2
 80102fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80102fe:	1bdf      	subge	r7, r3, r7
 8010300:	2700      	movlt	r7, #0
 8010302:	f1b9 0f00 	cmp.w	r9, #0
 8010306:	bfb5      	itete	lt
 8010308:	9b05      	ldrlt	r3, [sp, #20]
 801030a:	9d05      	ldrge	r5, [sp, #20]
 801030c:	eba3 0509 	sublt.w	r5, r3, r9
 8010310:	464b      	movge	r3, r9
 8010312:	bfb8      	it	lt
 8010314:	2300      	movlt	r3, #0
 8010316:	e77e      	b.n	8010216 <_dtoa_r+0x6fe>
 8010318:	9f07      	ldr	r7, [sp, #28]
 801031a:	9d05      	ldr	r5, [sp, #20]
 801031c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801031e:	e783      	b.n	8010228 <_dtoa_r+0x710>
 8010320:	9a07      	ldr	r2, [sp, #28]
 8010322:	e7ab      	b.n	801027c <_dtoa_r+0x764>
 8010324:	2300      	movs	r3, #0
 8010326:	e7d4      	b.n	80102d2 <_dtoa_r+0x7ba>
 8010328:	9b00      	ldr	r3, [sp, #0]
 801032a:	e7d2      	b.n	80102d2 <_dtoa_r+0x7ba>
 801032c:	2300      	movs	r3, #0
 801032e:	9307      	str	r3, [sp, #28]
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8010336:	6918      	ldr	r0, [r3, #16]
 8010338:	f000 fa47 	bl	80107ca <__hi0bits>
 801033c:	f1c0 0020 	rsb	r0, r0, #32
 8010340:	4440      	add	r0, r8
 8010342:	f010 001f 	ands.w	r0, r0, #31
 8010346:	d047      	beq.n	80103d8 <_dtoa_r+0x8c0>
 8010348:	f1c0 0320 	rsb	r3, r0, #32
 801034c:	2b04      	cmp	r3, #4
 801034e:	dd3b      	ble.n	80103c8 <_dtoa_r+0x8b0>
 8010350:	9b05      	ldr	r3, [sp, #20]
 8010352:	f1c0 001c 	rsb	r0, r0, #28
 8010356:	4403      	add	r3, r0
 8010358:	9305      	str	r3, [sp, #20]
 801035a:	4405      	add	r5, r0
 801035c:	4480      	add	r8, r0
 801035e:	9b05      	ldr	r3, [sp, #20]
 8010360:	2b00      	cmp	r3, #0
 8010362:	dd05      	ble.n	8010370 <_dtoa_r+0x858>
 8010364:	461a      	mov	r2, r3
 8010366:	9904      	ldr	r1, [sp, #16]
 8010368:	4620      	mov	r0, r4
 801036a:	f000 fb69 	bl	8010a40 <__lshift>
 801036e:	9004      	str	r0, [sp, #16]
 8010370:	f1b8 0f00 	cmp.w	r8, #0
 8010374:	dd05      	ble.n	8010382 <_dtoa_r+0x86a>
 8010376:	4639      	mov	r1, r7
 8010378:	4642      	mov	r2, r8
 801037a:	4620      	mov	r0, r4
 801037c:	f000 fb60 	bl	8010a40 <__lshift>
 8010380:	4607      	mov	r7, r0
 8010382:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010384:	b353      	cbz	r3, 80103dc <_dtoa_r+0x8c4>
 8010386:	4639      	mov	r1, r7
 8010388:	9804      	ldr	r0, [sp, #16]
 801038a:	f000 fbad 	bl	8010ae8 <__mcmp>
 801038e:	2800      	cmp	r0, #0
 8010390:	da24      	bge.n	80103dc <_dtoa_r+0x8c4>
 8010392:	2300      	movs	r3, #0
 8010394:	220a      	movs	r2, #10
 8010396:	9904      	ldr	r1, [sp, #16]
 8010398:	4620      	mov	r0, r4
 801039a:	f000 f9db 	bl	8010754 <__multadd>
 801039e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103a0:	9004      	str	r0, [sp, #16]
 80103a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	f000 814d 	beq.w	8010646 <_dtoa_r+0xb2e>
 80103ac:	2300      	movs	r3, #0
 80103ae:	4631      	mov	r1, r6
 80103b0:	220a      	movs	r2, #10
 80103b2:	4620      	mov	r0, r4
 80103b4:	f000 f9ce 	bl	8010754 <__multadd>
 80103b8:	9b02      	ldr	r3, [sp, #8]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	4606      	mov	r6, r0
 80103be:	dc4f      	bgt.n	8010460 <_dtoa_r+0x948>
 80103c0:	9b06      	ldr	r3, [sp, #24]
 80103c2:	2b02      	cmp	r3, #2
 80103c4:	dd4c      	ble.n	8010460 <_dtoa_r+0x948>
 80103c6:	e011      	b.n	80103ec <_dtoa_r+0x8d4>
 80103c8:	d0c9      	beq.n	801035e <_dtoa_r+0x846>
 80103ca:	9a05      	ldr	r2, [sp, #20]
 80103cc:	331c      	adds	r3, #28
 80103ce:	441a      	add	r2, r3
 80103d0:	9205      	str	r2, [sp, #20]
 80103d2:	441d      	add	r5, r3
 80103d4:	4498      	add	r8, r3
 80103d6:	e7c2      	b.n	801035e <_dtoa_r+0x846>
 80103d8:	4603      	mov	r3, r0
 80103da:	e7f6      	b.n	80103ca <_dtoa_r+0x8b2>
 80103dc:	f1b9 0f00 	cmp.w	r9, #0
 80103e0:	dc38      	bgt.n	8010454 <_dtoa_r+0x93c>
 80103e2:	9b06      	ldr	r3, [sp, #24]
 80103e4:	2b02      	cmp	r3, #2
 80103e6:	dd35      	ble.n	8010454 <_dtoa_r+0x93c>
 80103e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80103ec:	9b02      	ldr	r3, [sp, #8]
 80103ee:	b963      	cbnz	r3, 801040a <_dtoa_r+0x8f2>
 80103f0:	4639      	mov	r1, r7
 80103f2:	2205      	movs	r2, #5
 80103f4:	4620      	mov	r0, r4
 80103f6:	f000 f9ad 	bl	8010754 <__multadd>
 80103fa:	4601      	mov	r1, r0
 80103fc:	4607      	mov	r7, r0
 80103fe:	9804      	ldr	r0, [sp, #16]
 8010400:	f000 fb72 	bl	8010ae8 <__mcmp>
 8010404:	2800      	cmp	r0, #0
 8010406:	f73f adcc 	bgt.w	800ffa2 <_dtoa_r+0x48a>
 801040a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801040c:	465d      	mov	r5, fp
 801040e:	ea6f 0a03 	mvn.w	sl, r3
 8010412:	f04f 0900 	mov.w	r9, #0
 8010416:	4639      	mov	r1, r7
 8010418:	4620      	mov	r0, r4
 801041a:	f000 f984 	bl	8010726 <_Bfree>
 801041e:	2e00      	cmp	r6, #0
 8010420:	f43f aeb7 	beq.w	8010192 <_dtoa_r+0x67a>
 8010424:	f1b9 0f00 	cmp.w	r9, #0
 8010428:	d005      	beq.n	8010436 <_dtoa_r+0x91e>
 801042a:	45b1      	cmp	r9, r6
 801042c:	d003      	beq.n	8010436 <_dtoa_r+0x91e>
 801042e:	4649      	mov	r1, r9
 8010430:	4620      	mov	r0, r4
 8010432:	f000 f978 	bl	8010726 <_Bfree>
 8010436:	4631      	mov	r1, r6
 8010438:	4620      	mov	r0, r4
 801043a:	f000 f974 	bl	8010726 <_Bfree>
 801043e:	e6a8      	b.n	8010192 <_dtoa_r+0x67a>
 8010440:	2700      	movs	r7, #0
 8010442:	463e      	mov	r6, r7
 8010444:	e7e1      	b.n	801040a <_dtoa_r+0x8f2>
 8010446:	f8dd a020 	ldr.w	sl, [sp, #32]
 801044a:	463e      	mov	r6, r7
 801044c:	e5a9      	b.n	800ffa2 <_dtoa_r+0x48a>
 801044e:	bf00      	nop
 8010450:	40240000 	.word	0x40240000
 8010454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010456:	f8cd 9008 	str.w	r9, [sp, #8]
 801045a:	2b00      	cmp	r3, #0
 801045c:	f000 80fa 	beq.w	8010654 <_dtoa_r+0xb3c>
 8010460:	2d00      	cmp	r5, #0
 8010462:	dd05      	ble.n	8010470 <_dtoa_r+0x958>
 8010464:	4631      	mov	r1, r6
 8010466:	462a      	mov	r2, r5
 8010468:	4620      	mov	r0, r4
 801046a:	f000 fae9 	bl	8010a40 <__lshift>
 801046e:	4606      	mov	r6, r0
 8010470:	9b07      	ldr	r3, [sp, #28]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d04c      	beq.n	8010510 <_dtoa_r+0x9f8>
 8010476:	6871      	ldr	r1, [r6, #4]
 8010478:	4620      	mov	r0, r4
 801047a:	f000 f920 	bl	80106be <_Balloc>
 801047e:	6932      	ldr	r2, [r6, #16]
 8010480:	3202      	adds	r2, #2
 8010482:	4605      	mov	r5, r0
 8010484:	0092      	lsls	r2, r2, #2
 8010486:	f106 010c 	add.w	r1, r6, #12
 801048a:	300c      	adds	r0, #12
 801048c:	f000 f90a 	bl	80106a4 <memcpy>
 8010490:	2201      	movs	r2, #1
 8010492:	4629      	mov	r1, r5
 8010494:	4620      	mov	r0, r4
 8010496:	f000 fad3 	bl	8010a40 <__lshift>
 801049a:	9b00      	ldr	r3, [sp, #0]
 801049c:	f8cd b014 	str.w	fp, [sp, #20]
 80104a0:	f003 0301 	and.w	r3, r3, #1
 80104a4:	46b1      	mov	r9, r6
 80104a6:	9307      	str	r3, [sp, #28]
 80104a8:	4606      	mov	r6, r0
 80104aa:	4639      	mov	r1, r7
 80104ac:	9804      	ldr	r0, [sp, #16]
 80104ae:	f7ff faa5 	bl	800f9fc <quorem>
 80104b2:	4649      	mov	r1, r9
 80104b4:	4605      	mov	r5, r0
 80104b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80104ba:	9804      	ldr	r0, [sp, #16]
 80104bc:	f000 fb14 	bl	8010ae8 <__mcmp>
 80104c0:	4632      	mov	r2, r6
 80104c2:	9000      	str	r0, [sp, #0]
 80104c4:	4639      	mov	r1, r7
 80104c6:	4620      	mov	r0, r4
 80104c8:	f000 fb28 	bl	8010b1c <__mdiff>
 80104cc:	68c3      	ldr	r3, [r0, #12]
 80104ce:	4602      	mov	r2, r0
 80104d0:	bb03      	cbnz	r3, 8010514 <_dtoa_r+0x9fc>
 80104d2:	4601      	mov	r1, r0
 80104d4:	9008      	str	r0, [sp, #32]
 80104d6:	9804      	ldr	r0, [sp, #16]
 80104d8:	f000 fb06 	bl	8010ae8 <__mcmp>
 80104dc:	9a08      	ldr	r2, [sp, #32]
 80104de:	4603      	mov	r3, r0
 80104e0:	4611      	mov	r1, r2
 80104e2:	4620      	mov	r0, r4
 80104e4:	9308      	str	r3, [sp, #32]
 80104e6:	f000 f91e 	bl	8010726 <_Bfree>
 80104ea:	9b08      	ldr	r3, [sp, #32]
 80104ec:	b9a3      	cbnz	r3, 8010518 <_dtoa_r+0xa00>
 80104ee:	9a06      	ldr	r2, [sp, #24]
 80104f0:	b992      	cbnz	r2, 8010518 <_dtoa_r+0xa00>
 80104f2:	9a07      	ldr	r2, [sp, #28]
 80104f4:	b982      	cbnz	r2, 8010518 <_dtoa_r+0xa00>
 80104f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80104fa:	d029      	beq.n	8010550 <_dtoa_r+0xa38>
 80104fc:	9b00      	ldr	r3, [sp, #0]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	dd01      	ble.n	8010506 <_dtoa_r+0x9ee>
 8010502:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8010506:	9b05      	ldr	r3, [sp, #20]
 8010508:	1c5d      	adds	r5, r3, #1
 801050a:	f883 8000 	strb.w	r8, [r3]
 801050e:	e782      	b.n	8010416 <_dtoa_r+0x8fe>
 8010510:	4630      	mov	r0, r6
 8010512:	e7c2      	b.n	801049a <_dtoa_r+0x982>
 8010514:	2301      	movs	r3, #1
 8010516:	e7e3      	b.n	80104e0 <_dtoa_r+0x9c8>
 8010518:	9a00      	ldr	r2, [sp, #0]
 801051a:	2a00      	cmp	r2, #0
 801051c:	db04      	blt.n	8010528 <_dtoa_r+0xa10>
 801051e:	d125      	bne.n	801056c <_dtoa_r+0xa54>
 8010520:	9a06      	ldr	r2, [sp, #24]
 8010522:	bb1a      	cbnz	r2, 801056c <_dtoa_r+0xa54>
 8010524:	9a07      	ldr	r2, [sp, #28]
 8010526:	bb0a      	cbnz	r2, 801056c <_dtoa_r+0xa54>
 8010528:	2b00      	cmp	r3, #0
 801052a:	ddec      	ble.n	8010506 <_dtoa_r+0x9ee>
 801052c:	2201      	movs	r2, #1
 801052e:	9904      	ldr	r1, [sp, #16]
 8010530:	4620      	mov	r0, r4
 8010532:	f000 fa85 	bl	8010a40 <__lshift>
 8010536:	4639      	mov	r1, r7
 8010538:	9004      	str	r0, [sp, #16]
 801053a:	f000 fad5 	bl	8010ae8 <__mcmp>
 801053e:	2800      	cmp	r0, #0
 8010540:	dc03      	bgt.n	801054a <_dtoa_r+0xa32>
 8010542:	d1e0      	bne.n	8010506 <_dtoa_r+0x9ee>
 8010544:	f018 0f01 	tst.w	r8, #1
 8010548:	d0dd      	beq.n	8010506 <_dtoa_r+0x9ee>
 801054a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801054e:	d1d8      	bne.n	8010502 <_dtoa_r+0x9ea>
 8010550:	9b05      	ldr	r3, [sp, #20]
 8010552:	9a05      	ldr	r2, [sp, #20]
 8010554:	1c5d      	adds	r5, r3, #1
 8010556:	2339      	movs	r3, #57	; 0x39
 8010558:	7013      	strb	r3, [r2, #0]
 801055a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801055e:	2b39      	cmp	r3, #57	; 0x39
 8010560:	f105 32ff 	add.w	r2, r5, #4294967295
 8010564:	d04f      	beq.n	8010606 <_dtoa_r+0xaee>
 8010566:	3301      	adds	r3, #1
 8010568:	7013      	strb	r3, [r2, #0]
 801056a:	e754      	b.n	8010416 <_dtoa_r+0x8fe>
 801056c:	9a05      	ldr	r2, [sp, #20]
 801056e:	2b00      	cmp	r3, #0
 8010570:	f102 0501 	add.w	r5, r2, #1
 8010574:	dd06      	ble.n	8010584 <_dtoa_r+0xa6c>
 8010576:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801057a:	d0e9      	beq.n	8010550 <_dtoa_r+0xa38>
 801057c:	f108 0801 	add.w	r8, r8, #1
 8010580:	9b05      	ldr	r3, [sp, #20]
 8010582:	e7c2      	b.n	801050a <_dtoa_r+0x9f2>
 8010584:	9a02      	ldr	r2, [sp, #8]
 8010586:	f805 8c01 	strb.w	r8, [r5, #-1]
 801058a:	eba5 030b 	sub.w	r3, r5, fp
 801058e:	4293      	cmp	r3, r2
 8010590:	d021      	beq.n	80105d6 <_dtoa_r+0xabe>
 8010592:	2300      	movs	r3, #0
 8010594:	220a      	movs	r2, #10
 8010596:	9904      	ldr	r1, [sp, #16]
 8010598:	4620      	mov	r0, r4
 801059a:	f000 f8db 	bl	8010754 <__multadd>
 801059e:	45b1      	cmp	r9, r6
 80105a0:	9004      	str	r0, [sp, #16]
 80105a2:	f04f 0300 	mov.w	r3, #0
 80105a6:	f04f 020a 	mov.w	r2, #10
 80105aa:	4649      	mov	r1, r9
 80105ac:	4620      	mov	r0, r4
 80105ae:	d105      	bne.n	80105bc <_dtoa_r+0xaa4>
 80105b0:	f000 f8d0 	bl	8010754 <__multadd>
 80105b4:	4681      	mov	r9, r0
 80105b6:	4606      	mov	r6, r0
 80105b8:	9505      	str	r5, [sp, #20]
 80105ba:	e776      	b.n	80104aa <_dtoa_r+0x992>
 80105bc:	f000 f8ca 	bl	8010754 <__multadd>
 80105c0:	4631      	mov	r1, r6
 80105c2:	4681      	mov	r9, r0
 80105c4:	2300      	movs	r3, #0
 80105c6:	220a      	movs	r2, #10
 80105c8:	4620      	mov	r0, r4
 80105ca:	f000 f8c3 	bl	8010754 <__multadd>
 80105ce:	4606      	mov	r6, r0
 80105d0:	e7f2      	b.n	80105b8 <_dtoa_r+0xaa0>
 80105d2:	f04f 0900 	mov.w	r9, #0
 80105d6:	2201      	movs	r2, #1
 80105d8:	9904      	ldr	r1, [sp, #16]
 80105da:	4620      	mov	r0, r4
 80105dc:	f000 fa30 	bl	8010a40 <__lshift>
 80105e0:	4639      	mov	r1, r7
 80105e2:	9004      	str	r0, [sp, #16]
 80105e4:	f000 fa80 	bl	8010ae8 <__mcmp>
 80105e8:	2800      	cmp	r0, #0
 80105ea:	dcb6      	bgt.n	801055a <_dtoa_r+0xa42>
 80105ec:	d102      	bne.n	80105f4 <_dtoa_r+0xadc>
 80105ee:	f018 0f01 	tst.w	r8, #1
 80105f2:	d1b2      	bne.n	801055a <_dtoa_r+0xa42>
 80105f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80105f8:	2b30      	cmp	r3, #48	; 0x30
 80105fa:	f105 32ff 	add.w	r2, r5, #4294967295
 80105fe:	f47f af0a 	bne.w	8010416 <_dtoa_r+0x8fe>
 8010602:	4615      	mov	r5, r2
 8010604:	e7f6      	b.n	80105f4 <_dtoa_r+0xadc>
 8010606:	4593      	cmp	fp, r2
 8010608:	d105      	bne.n	8010616 <_dtoa_r+0xafe>
 801060a:	2331      	movs	r3, #49	; 0x31
 801060c:	f10a 0a01 	add.w	sl, sl, #1
 8010610:	f88b 3000 	strb.w	r3, [fp]
 8010614:	e6ff      	b.n	8010416 <_dtoa_r+0x8fe>
 8010616:	4615      	mov	r5, r2
 8010618:	e79f      	b.n	801055a <_dtoa_r+0xa42>
 801061a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010680 <_dtoa_r+0xb68>
 801061e:	e007      	b.n	8010630 <_dtoa_r+0xb18>
 8010620:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010622:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010684 <_dtoa_r+0xb6c>
 8010626:	b11b      	cbz	r3, 8010630 <_dtoa_r+0xb18>
 8010628:	f10b 0308 	add.w	r3, fp, #8
 801062c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801062e:	6013      	str	r3, [r2, #0]
 8010630:	4658      	mov	r0, fp
 8010632:	b017      	add	sp, #92	; 0x5c
 8010634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010638:	9b06      	ldr	r3, [sp, #24]
 801063a:	2b01      	cmp	r3, #1
 801063c:	f77f ae35 	ble.w	80102aa <_dtoa_r+0x792>
 8010640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010642:	9307      	str	r3, [sp, #28]
 8010644:	e649      	b.n	80102da <_dtoa_r+0x7c2>
 8010646:	9b02      	ldr	r3, [sp, #8]
 8010648:	2b00      	cmp	r3, #0
 801064a:	dc03      	bgt.n	8010654 <_dtoa_r+0xb3c>
 801064c:	9b06      	ldr	r3, [sp, #24]
 801064e:	2b02      	cmp	r3, #2
 8010650:	f73f aecc 	bgt.w	80103ec <_dtoa_r+0x8d4>
 8010654:	465d      	mov	r5, fp
 8010656:	4639      	mov	r1, r7
 8010658:	9804      	ldr	r0, [sp, #16]
 801065a:	f7ff f9cf 	bl	800f9fc <quorem>
 801065e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010662:	f805 8b01 	strb.w	r8, [r5], #1
 8010666:	9a02      	ldr	r2, [sp, #8]
 8010668:	eba5 030b 	sub.w	r3, r5, fp
 801066c:	429a      	cmp	r2, r3
 801066e:	ddb0      	ble.n	80105d2 <_dtoa_r+0xaba>
 8010670:	2300      	movs	r3, #0
 8010672:	220a      	movs	r2, #10
 8010674:	9904      	ldr	r1, [sp, #16]
 8010676:	4620      	mov	r0, r4
 8010678:	f000 f86c 	bl	8010754 <__multadd>
 801067c:	9004      	str	r0, [sp, #16]
 801067e:	e7ea      	b.n	8010656 <_dtoa_r+0xb3e>
 8010680:	08011228 	.word	0x08011228
 8010684:	0801122a 	.word	0x0801122a

08010688 <_localeconv_r>:
 8010688:	4b04      	ldr	r3, [pc, #16]	; (801069c <_localeconv_r+0x14>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	6a18      	ldr	r0, [r3, #32]
 801068e:	4b04      	ldr	r3, [pc, #16]	; (80106a0 <_localeconv_r+0x18>)
 8010690:	2800      	cmp	r0, #0
 8010692:	bf08      	it	eq
 8010694:	4618      	moveq	r0, r3
 8010696:	30f0      	adds	r0, #240	; 0xf0
 8010698:	4770      	bx	lr
 801069a:	bf00      	nop
 801069c:	20000164 	.word	0x20000164
 80106a0:	200001c8 	.word	0x200001c8

080106a4 <memcpy>:
 80106a4:	b510      	push	{r4, lr}
 80106a6:	1e43      	subs	r3, r0, #1
 80106a8:	440a      	add	r2, r1
 80106aa:	4291      	cmp	r1, r2
 80106ac:	d100      	bne.n	80106b0 <memcpy+0xc>
 80106ae:	bd10      	pop	{r4, pc}
 80106b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80106b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80106b8:	e7f7      	b.n	80106aa <memcpy+0x6>

080106ba <__malloc_lock>:
 80106ba:	4770      	bx	lr

080106bc <__malloc_unlock>:
 80106bc:	4770      	bx	lr

080106be <_Balloc>:
 80106be:	b570      	push	{r4, r5, r6, lr}
 80106c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80106c2:	4604      	mov	r4, r0
 80106c4:	460e      	mov	r6, r1
 80106c6:	b93d      	cbnz	r5, 80106d8 <_Balloc+0x1a>
 80106c8:	2010      	movs	r0, #16
 80106ca:	f7fe fd7d 	bl	800f1c8 <malloc>
 80106ce:	6260      	str	r0, [r4, #36]	; 0x24
 80106d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80106d4:	6005      	str	r5, [r0, #0]
 80106d6:	60c5      	str	r5, [r0, #12]
 80106d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80106da:	68eb      	ldr	r3, [r5, #12]
 80106dc:	b183      	cbz	r3, 8010700 <_Balloc+0x42>
 80106de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106e0:	68db      	ldr	r3, [r3, #12]
 80106e2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80106e6:	b9b8      	cbnz	r0, 8010718 <_Balloc+0x5a>
 80106e8:	2101      	movs	r1, #1
 80106ea:	fa01 f506 	lsl.w	r5, r1, r6
 80106ee:	1d6a      	adds	r2, r5, #5
 80106f0:	0092      	lsls	r2, r2, #2
 80106f2:	4620      	mov	r0, r4
 80106f4:	f000 fabe 	bl	8010c74 <_calloc_r>
 80106f8:	b160      	cbz	r0, 8010714 <_Balloc+0x56>
 80106fa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80106fe:	e00e      	b.n	801071e <_Balloc+0x60>
 8010700:	2221      	movs	r2, #33	; 0x21
 8010702:	2104      	movs	r1, #4
 8010704:	4620      	mov	r0, r4
 8010706:	f000 fab5 	bl	8010c74 <_calloc_r>
 801070a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801070c:	60e8      	str	r0, [r5, #12]
 801070e:	68db      	ldr	r3, [r3, #12]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d1e4      	bne.n	80106de <_Balloc+0x20>
 8010714:	2000      	movs	r0, #0
 8010716:	bd70      	pop	{r4, r5, r6, pc}
 8010718:	6802      	ldr	r2, [r0, #0]
 801071a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801071e:	2300      	movs	r3, #0
 8010720:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010724:	e7f7      	b.n	8010716 <_Balloc+0x58>

08010726 <_Bfree>:
 8010726:	b570      	push	{r4, r5, r6, lr}
 8010728:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801072a:	4606      	mov	r6, r0
 801072c:	460d      	mov	r5, r1
 801072e:	b93c      	cbnz	r4, 8010740 <_Bfree+0x1a>
 8010730:	2010      	movs	r0, #16
 8010732:	f7fe fd49 	bl	800f1c8 <malloc>
 8010736:	6270      	str	r0, [r6, #36]	; 0x24
 8010738:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801073c:	6004      	str	r4, [r0, #0]
 801073e:	60c4      	str	r4, [r0, #12]
 8010740:	b13d      	cbz	r5, 8010752 <_Bfree+0x2c>
 8010742:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010744:	686a      	ldr	r2, [r5, #4]
 8010746:	68db      	ldr	r3, [r3, #12]
 8010748:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801074c:	6029      	str	r1, [r5, #0]
 801074e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010752:	bd70      	pop	{r4, r5, r6, pc}

08010754 <__multadd>:
 8010754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010758:	690d      	ldr	r5, [r1, #16]
 801075a:	461f      	mov	r7, r3
 801075c:	4606      	mov	r6, r0
 801075e:	460c      	mov	r4, r1
 8010760:	f101 0c14 	add.w	ip, r1, #20
 8010764:	2300      	movs	r3, #0
 8010766:	f8dc 0000 	ldr.w	r0, [ip]
 801076a:	b281      	uxth	r1, r0
 801076c:	fb02 7101 	mla	r1, r2, r1, r7
 8010770:	0c0f      	lsrs	r7, r1, #16
 8010772:	0c00      	lsrs	r0, r0, #16
 8010774:	fb02 7000 	mla	r0, r2, r0, r7
 8010778:	b289      	uxth	r1, r1
 801077a:	3301      	adds	r3, #1
 801077c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010780:	429d      	cmp	r5, r3
 8010782:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010786:	f84c 1b04 	str.w	r1, [ip], #4
 801078a:	dcec      	bgt.n	8010766 <__multadd+0x12>
 801078c:	b1d7      	cbz	r7, 80107c4 <__multadd+0x70>
 801078e:	68a3      	ldr	r3, [r4, #8]
 8010790:	42ab      	cmp	r3, r5
 8010792:	dc12      	bgt.n	80107ba <__multadd+0x66>
 8010794:	6861      	ldr	r1, [r4, #4]
 8010796:	4630      	mov	r0, r6
 8010798:	3101      	adds	r1, #1
 801079a:	f7ff ff90 	bl	80106be <_Balloc>
 801079e:	6922      	ldr	r2, [r4, #16]
 80107a0:	3202      	adds	r2, #2
 80107a2:	f104 010c 	add.w	r1, r4, #12
 80107a6:	4680      	mov	r8, r0
 80107a8:	0092      	lsls	r2, r2, #2
 80107aa:	300c      	adds	r0, #12
 80107ac:	f7ff ff7a 	bl	80106a4 <memcpy>
 80107b0:	4621      	mov	r1, r4
 80107b2:	4630      	mov	r0, r6
 80107b4:	f7ff ffb7 	bl	8010726 <_Bfree>
 80107b8:	4644      	mov	r4, r8
 80107ba:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80107be:	3501      	adds	r5, #1
 80107c0:	615f      	str	r7, [r3, #20]
 80107c2:	6125      	str	r5, [r4, #16]
 80107c4:	4620      	mov	r0, r4
 80107c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080107ca <__hi0bits>:
 80107ca:	0c02      	lsrs	r2, r0, #16
 80107cc:	0412      	lsls	r2, r2, #16
 80107ce:	4603      	mov	r3, r0
 80107d0:	b9b2      	cbnz	r2, 8010800 <__hi0bits+0x36>
 80107d2:	0403      	lsls	r3, r0, #16
 80107d4:	2010      	movs	r0, #16
 80107d6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80107da:	bf04      	itt	eq
 80107dc:	021b      	lsleq	r3, r3, #8
 80107de:	3008      	addeq	r0, #8
 80107e0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80107e4:	bf04      	itt	eq
 80107e6:	011b      	lsleq	r3, r3, #4
 80107e8:	3004      	addeq	r0, #4
 80107ea:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80107ee:	bf04      	itt	eq
 80107f0:	009b      	lsleq	r3, r3, #2
 80107f2:	3002      	addeq	r0, #2
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	db06      	blt.n	8010806 <__hi0bits+0x3c>
 80107f8:	005b      	lsls	r3, r3, #1
 80107fa:	d503      	bpl.n	8010804 <__hi0bits+0x3a>
 80107fc:	3001      	adds	r0, #1
 80107fe:	4770      	bx	lr
 8010800:	2000      	movs	r0, #0
 8010802:	e7e8      	b.n	80107d6 <__hi0bits+0xc>
 8010804:	2020      	movs	r0, #32
 8010806:	4770      	bx	lr

08010808 <__lo0bits>:
 8010808:	6803      	ldr	r3, [r0, #0]
 801080a:	f013 0207 	ands.w	r2, r3, #7
 801080e:	4601      	mov	r1, r0
 8010810:	d00b      	beq.n	801082a <__lo0bits+0x22>
 8010812:	07da      	lsls	r2, r3, #31
 8010814:	d423      	bmi.n	801085e <__lo0bits+0x56>
 8010816:	0798      	lsls	r0, r3, #30
 8010818:	bf49      	itett	mi
 801081a:	085b      	lsrmi	r3, r3, #1
 801081c:	089b      	lsrpl	r3, r3, #2
 801081e:	2001      	movmi	r0, #1
 8010820:	600b      	strmi	r3, [r1, #0]
 8010822:	bf5c      	itt	pl
 8010824:	600b      	strpl	r3, [r1, #0]
 8010826:	2002      	movpl	r0, #2
 8010828:	4770      	bx	lr
 801082a:	b298      	uxth	r0, r3
 801082c:	b9a8      	cbnz	r0, 801085a <__lo0bits+0x52>
 801082e:	0c1b      	lsrs	r3, r3, #16
 8010830:	2010      	movs	r0, #16
 8010832:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010836:	bf04      	itt	eq
 8010838:	0a1b      	lsreq	r3, r3, #8
 801083a:	3008      	addeq	r0, #8
 801083c:	071a      	lsls	r2, r3, #28
 801083e:	bf04      	itt	eq
 8010840:	091b      	lsreq	r3, r3, #4
 8010842:	3004      	addeq	r0, #4
 8010844:	079a      	lsls	r2, r3, #30
 8010846:	bf04      	itt	eq
 8010848:	089b      	lsreq	r3, r3, #2
 801084a:	3002      	addeq	r0, #2
 801084c:	07da      	lsls	r2, r3, #31
 801084e:	d402      	bmi.n	8010856 <__lo0bits+0x4e>
 8010850:	085b      	lsrs	r3, r3, #1
 8010852:	d006      	beq.n	8010862 <__lo0bits+0x5a>
 8010854:	3001      	adds	r0, #1
 8010856:	600b      	str	r3, [r1, #0]
 8010858:	4770      	bx	lr
 801085a:	4610      	mov	r0, r2
 801085c:	e7e9      	b.n	8010832 <__lo0bits+0x2a>
 801085e:	2000      	movs	r0, #0
 8010860:	4770      	bx	lr
 8010862:	2020      	movs	r0, #32
 8010864:	4770      	bx	lr

08010866 <__i2b>:
 8010866:	b510      	push	{r4, lr}
 8010868:	460c      	mov	r4, r1
 801086a:	2101      	movs	r1, #1
 801086c:	f7ff ff27 	bl	80106be <_Balloc>
 8010870:	2201      	movs	r2, #1
 8010872:	6144      	str	r4, [r0, #20]
 8010874:	6102      	str	r2, [r0, #16]
 8010876:	bd10      	pop	{r4, pc}

08010878 <__multiply>:
 8010878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801087c:	4614      	mov	r4, r2
 801087e:	690a      	ldr	r2, [r1, #16]
 8010880:	6923      	ldr	r3, [r4, #16]
 8010882:	429a      	cmp	r2, r3
 8010884:	bfb8      	it	lt
 8010886:	460b      	movlt	r3, r1
 8010888:	4688      	mov	r8, r1
 801088a:	bfbc      	itt	lt
 801088c:	46a0      	movlt	r8, r4
 801088e:	461c      	movlt	r4, r3
 8010890:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010894:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010898:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801089c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80108a0:	eb07 0609 	add.w	r6, r7, r9
 80108a4:	42b3      	cmp	r3, r6
 80108a6:	bfb8      	it	lt
 80108a8:	3101      	addlt	r1, #1
 80108aa:	f7ff ff08 	bl	80106be <_Balloc>
 80108ae:	f100 0514 	add.w	r5, r0, #20
 80108b2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80108b6:	462b      	mov	r3, r5
 80108b8:	2200      	movs	r2, #0
 80108ba:	4573      	cmp	r3, lr
 80108bc:	d316      	bcc.n	80108ec <__multiply+0x74>
 80108be:	f104 0214 	add.w	r2, r4, #20
 80108c2:	f108 0114 	add.w	r1, r8, #20
 80108c6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80108ca:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80108ce:	9300      	str	r3, [sp, #0]
 80108d0:	9b00      	ldr	r3, [sp, #0]
 80108d2:	9201      	str	r2, [sp, #4]
 80108d4:	4293      	cmp	r3, r2
 80108d6:	d80c      	bhi.n	80108f2 <__multiply+0x7a>
 80108d8:	2e00      	cmp	r6, #0
 80108da:	dd03      	ble.n	80108e4 <__multiply+0x6c>
 80108dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d05d      	beq.n	80109a0 <__multiply+0x128>
 80108e4:	6106      	str	r6, [r0, #16]
 80108e6:	b003      	add	sp, #12
 80108e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ec:	f843 2b04 	str.w	r2, [r3], #4
 80108f0:	e7e3      	b.n	80108ba <__multiply+0x42>
 80108f2:	f8b2 b000 	ldrh.w	fp, [r2]
 80108f6:	f1bb 0f00 	cmp.w	fp, #0
 80108fa:	d023      	beq.n	8010944 <__multiply+0xcc>
 80108fc:	4689      	mov	r9, r1
 80108fe:	46ac      	mov	ip, r5
 8010900:	f04f 0800 	mov.w	r8, #0
 8010904:	f859 4b04 	ldr.w	r4, [r9], #4
 8010908:	f8dc a000 	ldr.w	sl, [ip]
 801090c:	b2a3      	uxth	r3, r4
 801090e:	fa1f fa8a 	uxth.w	sl, sl
 8010912:	fb0b a303 	mla	r3, fp, r3, sl
 8010916:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801091a:	f8dc 4000 	ldr.w	r4, [ip]
 801091e:	4443      	add	r3, r8
 8010920:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010924:	fb0b 840a 	mla	r4, fp, sl, r8
 8010928:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801092c:	46e2      	mov	sl, ip
 801092e:	b29b      	uxth	r3, r3
 8010930:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010934:	454f      	cmp	r7, r9
 8010936:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801093a:	f84a 3b04 	str.w	r3, [sl], #4
 801093e:	d82b      	bhi.n	8010998 <__multiply+0x120>
 8010940:	f8cc 8004 	str.w	r8, [ip, #4]
 8010944:	9b01      	ldr	r3, [sp, #4]
 8010946:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801094a:	3204      	adds	r2, #4
 801094c:	f1ba 0f00 	cmp.w	sl, #0
 8010950:	d020      	beq.n	8010994 <__multiply+0x11c>
 8010952:	682b      	ldr	r3, [r5, #0]
 8010954:	4689      	mov	r9, r1
 8010956:	46a8      	mov	r8, r5
 8010958:	f04f 0b00 	mov.w	fp, #0
 801095c:	f8b9 c000 	ldrh.w	ip, [r9]
 8010960:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010964:	fb0a 440c 	mla	r4, sl, ip, r4
 8010968:	445c      	add	r4, fp
 801096a:	46c4      	mov	ip, r8
 801096c:	b29b      	uxth	r3, r3
 801096e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010972:	f84c 3b04 	str.w	r3, [ip], #4
 8010976:	f859 3b04 	ldr.w	r3, [r9], #4
 801097a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801097e:	0c1b      	lsrs	r3, r3, #16
 8010980:	fb0a b303 	mla	r3, sl, r3, fp
 8010984:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010988:	454f      	cmp	r7, r9
 801098a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801098e:	d805      	bhi.n	801099c <__multiply+0x124>
 8010990:	f8c8 3004 	str.w	r3, [r8, #4]
 8010994:	3504      	adds	r5, #4
 8010996:	e79b      	b.n	80108d0 <__multiply+0x58>
 8010998:	46d4      	mov	ip, sl
 801099a:	e7b3      	b.n	8010904 <__multiply+0x8c>
 801099c:	46e0      	mov	r8, ip
 801099e:	e7dd      	b.n	801095c <__multiply+0xe4>
 80109a0:	3e01      	subs	r6, #1
 80109a2:	e799      	b.n	80108d8 <__multiply+0x60>

080109a4 <__pow5mult>:
 80109a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109a8:	4615      	mov	r5, r2
 80109aa:	f012 0203 	ands.w	r2, r2, #3
 80109ae:	4606      	mov	r6, r0
 80109b0:	460f      	mov	r7, r1
 80109b2:	d007      	beq.n	80109c4 <__pow5mult+0x20>
 80109b4:	3a01      	subs	r2, #1
 80109b6:	4c21      	ldr	r4, [pc, #132]	; (8010a3c <__pow5mult+0x98>)
 80109b8:	2300      	movs	r3, #0
 80109ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80109be:	f7ff fec9 	bl	8010754 <__multadd>
 80109c2:	4607      	mov	r7, r0
 80109c4:	10ad      	asrs	r5, r5, #2
 80109c6:	d035      	beq.n	8010a34 <__pow5mult+0x90>
 80109c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80109ca:	b93c      	cbnz	r4, 80109dc <__pow5mult+0x38>
 80109cc:	2010      	movs	r0, #16
 80109ce:	f7fe fbfb 	bl	800f1c8 <malloc>
 80109d2:	6270      	str	r0, [r6, #36]	; 0x24
 80109d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80109d8:	6004      	str	r4, [r0, #0]
 80109da:	60c4      	str	r4, [r0, #12]
 80109dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80109e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80109e4:	b94c      	cbnz	r4, 80109fa <__pow5mult+0x56>
 80109e6:	f240 2171 	movw	r1, #625	; 0x271
 80109ea:	4630      	mov	r0, r6
 80109ec:	f7ff ff3b 	bl	8010866 <__i2b>
 80109f0:	2300      	movs	r3, #0
 80109f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80109f6:	4604      	mov	r4, r0
 80109f8:	6003      	str	r3, [r0, #0]
 80109fa:	f04f 0800 	mov.w	r8, #0
 80109fe:	07eb      	lsls	r3, r5, #31
 8010a00:	d50a      	bpl.n	8010a18 <__pow5mult+0x74>
 8010a02:	4639      	mov	r1, r7
 8010a04:	4622      	mov	r2, r4
 8010a06:	4630      	mov	r0, r6
 8010a08:	f7ff ff36 	bl	8010878 <__multiply>
 8010a0c:	4639      	mov	r1, r7
 8010a0e:	4681      	mov	r9, r0
 8010a10:	4630      	mov	r0, r6
 8010a12:	f7ff fe88 	bl	8010726 <_Bfree>
 8010a16:	464f      	mov	r7, r9
 8010a18:	106d      	asrs	r5, r5, #1
 8010a1a:	d00b      	beq.n	8010a34 <__pow5mult+0x90>
 8010a1c:	6820      	ldr	r0, [r4, #0]
 8010a1e:	b938      	cbnz	r0, 8010a30 <__pow5mult+0x8c>
 8010a20:	4622      	mov	r2, r4
 8010a22:	4621      	mov	r1, r4
 8010a24:	4630      	mov	r0, r6
 8010a26:	f7ff ff27 	bl	8010878 <__multiply>
 8010a2a:	6020      	str	r0, [r4, #0]
 8010a2c:	f8c0 8000 	str.w	r8, [r0]
 8010a30:	4604      	mov	r4, r0
 8010a32:	e7e4      	b.n	80109fe <__pow5mult+0x5a>
 8010a34:	4638      	mov	r0, r7
 8010a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a3a:	bf00      	nop
 8010a3c:	08011328 	.word	0x08011328

08010a40 <__lshift>:
 8010a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a44:	460c      	mov	r4, r1
 8010a46:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010a4a:	6923      	ldr	r3, [r4, #16]
 8010a4c:	6849      	ldr	r1, [r1, #4]
 8010a4e:	eb0a 0903 	add.w	r9, sl, r3
 8010a52:	68a3      	ldr	r3, [r4, #8]
 8010a54:	4607      	mov	r7, r0
 8010a56:	4616      	mov	r6, r2
 8010a58:	f109 0501 	add.w	r5, r9, #1
 8010a5c:	42ab      	cmp	r3, r5
 8010a5e:	db32      	blt.n	8010ac6 <__lshift+0x86>
 8010a60:	4638      	mov	r0, r7
 8010a62:	f7ff fe2c 	bl	80106be <_Balloc>
 8010a66:	2300      	movs	r3, #0
 8010a68:	4680      	mov	r8, r0
 8010a6a:	f100 0114 	add.w	r1, r0, #20
 8010a6e:	461a      	mov	r2, r3
 8010a70:	4553      	cmp	r3, sl
 8010a72:	db2b      	blt.n	8010acc <__lshift+0x8c>
 8010a74:	6920      	ldr	r0, [r4, #16]
 8010a76:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010a7a:	f104 0314 	add.w	r3, r4, #20
 8010a7e:	f016 021f 	ands.w	r2, r6, #31
 8010a82:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010a86:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010a8a:	d025      	beq.n	8010ad8 <__lshift+0x98>
 8010a8c:	f1c2 0e20 	rsb	lr, r2, #32
 8010a90:	2000      	movs	r0, #0
 8010a92:	681e      	ldr	r6, [r3, #0]
 8010a94:	468a      	mov	sl, r1
 8010a96:	4096      	lsls	r6, r2
 8010a98:	4330      	orrs	r0, r6
 8010a9a:	f84a 0b04 	str.w	r0, [sl], #4
 8010a9e:	f853 0b04 	ldr.w	r0, [r3], #4
 8010aa2:	459c      	cmp	ip, r3
 8010aa4:	fa20 f00e 	lsr.w	r0, r0, lr
 8010aa8:	d814      	bhi.n	8010ad4 <__lshift+0x94>
 8010aaa:	6048      	str	r0, [r1, #4]
 8010aac:	b108      	cbz	r0, 8010ab2 <__lshift+0x72>
 8010aae:	f109 0502 	add.w	r5, r9, #2
 8010ab2:	3d01      	subs	r5, #1
 8010ab4:	4638      	mov	r0, r7
 8010ab6:	f8c8 5010 	str.w	r5, [r8, #16]
 8010aba:	4621      	mov	r1, r4
 8010abc:	f7ff fe33 	bl	8010726 <_Bfree>
 8010ac0:	4640      	mov	r0, r8
 8010ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ac6:	3101      	adds	r1, #1
 8010ac8:	005b      	lsls	r3, r3, #1
 8010aca:	e7c7      	b.n	8010a5c <__lshift+0x1c>
 8010acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010ad0:	3301      	adds	r3, #1
 8010ad2:	e7cd      	b.n	8010a70 <__lshift+0x30>
 8010ad4:	4651      	mov	r1, sl
 8010ad6:	e7dc      	b.n	8010a92 <__lshift+0x52>
 8010ad8:	3904      	subs	r1, #4
 8010ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ade:	f841 2f04 	str.w	r2, [r1, #4]!
 8010ae2:	459c      	cmp	ip, r3
 8010ae4:	d8f9      	bhi.n	8010ada <__lshift+0x9a>
 8010ae6:	e7e4      	b.n	8010ab2 <__lshift+0x72>

08010ae8 <__mcmp>:
 8010ae8:	6903      	ldr	r3, [r0, #16]
 8010aea:	690a      	ldr	r2, [r1, #16]
 8010aec:	1a9b      	subs	r3, r3, r2
 8010aee:	b530      	push	{r4, r5, lr}
 8010af0:	d10c      	bne.n	8010b0c <__mcmp+0x24>
 8010af2:	0092      	lsls	r2, r2, #2
 8010af4:	3014      	adds	r0, #20
 8010af6:	3114      	adds	r1, #20
 8010af8:	1884      	adds	r4, r0, r2
 8010afa:	4411      	add	r1, r2
 8010afc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010b00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010b04:	4295      	cmp	r5, r2
 8010b06:	d003      	beq.n	8010b10 <__mcmp+0x28>
 8010b08:	d305      	bcc.n	8010b16 <__mcmp+0x2e>
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	bd30      	pop	{r4, r5, pc}
 8010b10:	42a0      	cmp	r0, r4
 8010b12:	d3f3      	bcc.n	8010afc <__mcmp+0x14>
 8010b14:	e7fa      	b.n	8010b0c <__mcmp+0x24>
 8010b16:	f04f 33ff 	mov.w	r3, #4294967295
 8010b1a:	e7f7      	b.n	8010b0c <__mcmp+0x24>

08010b1c <__mdiff>:
 8010b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b20:	460d      	mov	r5, r1
 8010b22:	4607      	mov	r7, r0
 8010b24:	4611      	mov	r1, r2
 8010b26:	4628      	mov	r0, r5
 8010b28:	4614      	mov	r4, r2
 8010b2a:	f7ff ffdd 	bl	8010ae8 <__mcmp>
 8010b2e:	1e06      	subs	r6, r0, #0
 8010b30:	d108      	bne.n	8010b44 <__mdiff+0x28>
 8010b32:	4631      	mov	r1, r6
 8010b34:	4638      	mov	r0, r7
 8010b36:	f7ff fdc2 	bl	80106be <_Balloc>
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b44:	bfa4      	itt	ge
 8010b46:	4623      	movge	r3, r4
 8010b48:	462c      	movge	r4, r5
 8010b4a:	4638      	mov	r0, r7
 8010b4c:	6861      	ldr	r1, [r4, #4]
 8010b4e:	bfa6      	itte	ge
 8010b50:	461d      	movge	r5, r3
 8010b52:	2600      	movge	r6, #0
 8010b54:	2601      	movlt	r6, #1
 8010b56:	f7ff fdb2 	bl	80106be <_Balloc>
 8010b5a:	692b      	ldr	r3, [r5, #16]
 8010b5c:	60c6      	str	r6, [r0, #12]
 8010b5e:	6926      	ldr	r6, [r4, #16]
 8010b60:	f105 0914 	add.w	r9, r5, #20
 8010b64:	f104 0214 	add.w	r2, r4, #20
 8010b68:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010b6c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010b70:	f100 0514 	add.w	r5, r0, #20
 8010b74:	f04f 0e00 	mov.w	lr, #0
 8010b78:	f852 ab04 	ldr.w	sl, [r2], #4
 8010b7c:	f859 4b04 	ldr.w	r4, [r9], #4
 8010b80:	fa1e f18a 	uxtah	r1, lr, sl
 8010b84:	b2a3      	uxth	r3, r4
 8010b86:	1ac9      	subs	r1, r1, r3
 8010b88:	0c23      	lsrs	r3, r4, #16
 8010b8a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010b8e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010b92:	b289      	uxth	r1, r1
 8010b94:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010b98:	45c8      	cmp	r8, r9
 8010b9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010b9e:	4694      	mov	ip, r2
 8010ba0:	f845 3b04 	str.w	r3, [r5], #4
 8010ba4:	d8e8      	bhi.n	8010b78 <__mdiff+0x5c>
 8010ba6:	45bc      	cmp	ip, r7
 8010ba8:	d304      	bcc.n	8010bb4 <__mdiff+0x98>
 8010baa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010bae:	b183      	cbz	r3, 8010bd2 <__mdiff+0xb6>
 8010bb0:	6106      	str	r6, [r0, #16]
 8010bb2:	e7c5      	b.n	8010b40 <__mdiff+0x24>
 8010bb4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010bb8:	fa1e f381 	uxtah	r3, lr, r1
 8010bbc:	141a      	asrs	r2, r3, #16
 8010bbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010bc2:	b29b      	uxth	r3, r3
 8010bc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010bc8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010bcc:	f845 3b04 	str.w	r3, [r5], #4
 8010bd0:	e7e9      	b.n	8010ba6 <__mdiff+0x8a>
 8010bd2:	3e01      	subs	r6, #1
 8010bd4:	e7e9      	b.n	8010baa <__mdiff+0x8e>

08010bd6 <__d2b>:
 8010bd6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010bda:	460e      	mov	r6, r1
 8010bdc:	2101      	movs	r1, #1
 8010bde:	ec59 8b10 	vmov	r8, r9, d0
 8010be2:	4615      	mov	r5, r2
 8010be4:	f7ff fd6b 	bl	80106be <_Balloc>
 8010be8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010bec:	4607      	mov	r7, r0
 8010bee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010bf2:	bb34      	cbnz	r4, 8010c42 <__d2b+0x6c>
 8010bf4:	9301      	str	r3, [sp, #4]
 8010bf6:	f1b8 0300 	subs.w	r3, r8, #0
 8010bfa:	d027      	beq.n	8010c4c <__d2b+0x76>
 8010bfc:	a802      	add	r0, sp, #8
 8010bfe:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010c02:	f7ff fe01 	bl	8010808 <__lo0bits>
 8010c06:	9900      	ldr	r1, [sp, #0]
 8010c08:	b1f0      	cbz	r0, 8010c48 <__d2b+0x72>
 8010c0a:	9a01      	ldr	r2, [sp, #4]
 8010c0c:	f1c0 0320 	rsb	r3, r0, #32
 8010c10:	fa02 f303 	lsl.w	r3, r2, r3
 8010c14:	430b      	orrs	r3, r1
 8010c16:	40c2      	lsrs	r2, r0
 8010c18:	617b      	str	r3, [r7, #20]
 8010c1a:	9201      	str	r2, [sp, #4]
 8010c1c:	9b01      	ldr	r3, [sp, #4]
 8010c1e:	61bb      	str	r3, [r7, #24]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	bf14      	ite	ne
 8010c24:	2102      	movne	r1, #2
 8010c26:	2101      	moveq	r1, #1
 8010c28:	6139      	str	r1, [r7, #16]
 8010c2a:	b1c4      	cbz	r4, 8010c5e <__d2b+0x88>
 8010c2c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010c30:	4404      	add	r4, r0
 8010c32:	6034      	str	r4, [r6, #0]
 8010c34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010c38:	6028      	str	r0, [r5, #0]
 8010c3a:	4638      	mov	r0, r7
 8010c3c:	b003      	add	sp, #12
 8010c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010c46:	e7d5      	b.n	8010bf4 <__d2b+0x1e>
 8010c48:	6179      	str	r1, [r7, #20]
 8010c4a:	e7e7      	b.n	8010c1c <__d2b+0x46>
 8010c4c:	a801      	add	r0, sp, #4
 8010c4e:	f7ff fddb 	bl	8010808 <__lo0bits>
 8010c52:	9b01      	ldr	r3, [sp, #4]
 8010c54:	617b      	str	r3, [r7, #20]
 8010c56:	2101      	movs	r1, #1
 8010c58:	6139      	str	r1, [r7, #16]
 8010c5a:	3020      	adds	r0, #32
 8010c5c:	e7e5      	b.n	8010c2a <__d2b+0x54>
 8010c5e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010c62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010c66:	6030      	str	r0, [r6, #0]
 8010c68:	6918      	ldr	r0, [r3, #16]
 8010c6a:	f7ff fdae 	bl	80107ca <__hi0bits>
 8010c6e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010c72:	e7e1      	b.n	8010c38 <__d2b+0x62>

08010c74 <_calloc_r>:
 8010c74:	b538      	push	{r3, r4, r5, lr}
 8010c76:	fb02 f401 	mul.w	r4, r2, r1
 8010c7a:	4621      	mov	r1, r4
 8010c7c:	f7fe fb0a 	bl	800f294 <_malloc_r>
 8010c80:	4605      	mov	r5, r0
 8010c82:	b118      	cbz	r0, 8010c8c <_calloc_r+0x18>
 8010c84:	4622      	mov	r2, r4
 8010c86:	2100      	movs	r1, #0
 8010c88:	f7fe faae 	bl	800f1e8 <memset>
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	bd38      	pop	{r3, r4, r5, pc}

08010c90 <__ascii_mbtowc>:
 8010c90:	b082      	sub	sp, #8
 8010c92:	b901      	cbnz	r1, 8010c96 <__ascii_mbtowc+0x6>
 8010c94:	a901      	add	r1, sp, #4
 8010c96:	b142      	cbz	r2, 8010caa <__ascii_mbtowc+0x1a>
 8010c98:	b14b      	cbz	r3, 8010cae <__ascii_mbtowc+0x1e>
 8010c9a:	7813      	ldrb	r3, [r2, #0]
 8010c9c:	600b      	str	r3, [r1, #0]
 8010c9e:	7812      	ldrb	r2, [r2, #0]
 8010ca0:	1c10      	adds	r0, r2, #0
 8010ca2:	bf18      	it	ne
 8010ca4:	2001      	movne	r0, #1
 8010ca6:	b002      	add	sp, #8
 8010ca8:	4770      	bx	lr
 8010caa:	4610      	mov	r0, r2
 8010cac:	e7fb      	b.n	8010ca6 <__ascii_mbtowc+0x16>
 8010cae:	f06f 0001 	mvn.w	r0, #1
 8010cb2:	e7f8      	b.n	8010ca6 <__ascii_mbtowc+0x16>

08010cb4 <__ascii_wctomb>:
 8010cb4:	b149      	cbz	r1, 8010cca <__ascii_wctomb+0x16>
 8010cb6:	2aff      	cmp	r2, #255	; 0xff
 8010cb8:	bf85      	ittet	hi
 8010cba:	238a      	movhi	r3, #138	; 0x8a
 8010cbc:	6003      	strhi	r3, [r0, #0]
 8010cbe:	700a      	strbls	r2, [r1, #0]
 8010cc0:	f04f 30ff 	movhi.w	r0, #4294967295
 8010cc4:	bf98      	it	ls
 8010cc6:	2001      	movls	r0, #1
 8010cc8:	4770      	bx	lr
 8010cca:	4608      	mov	r0, r1
 8010ccc:	4770      	bx	lr
	...

08010cd0 <_init>:
 8010cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cd2:	bf00      	nop
 8010cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cd6:	bc08      	pop	{r3}
 8010cd8:	469e      	mov	lr, r3
 8010cda:	4770      	bx	lr

08010cdc <_fini>:
 8010cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cde:	bf00      	nop
 8010ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ce2:	bc08      	pop	{r3}
 8010ce4:	469e      	mov	lr, r3
 8010ce6:	4770      	bx	lr
